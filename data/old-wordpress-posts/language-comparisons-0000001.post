---
title: "Language Comparisons 0000001"
date: "Wed, 05 Feb 2014 15:53:51 +0000"
layout: post
path: "/2014/2/5/language-comparisons-0000001/"
---


In a thread on HN recently there was a prompt:

> Read in a file full of numbers, one number on each line  
>  Represent those numbers as integers in your program  
>  Replace each number with that number times its line number  
>  Write the file out elsewhere  
>  And complete the task right now at your computer as fast as possible, you’re being timed

Ignoring the spurious nature of the comment (and ignoring the benefits/drawbacks of interview-programming in general) there were a few responses:

Consider this file for the responses:

```
1
2
3
4
5
6
7
8
9
10
```


## Python

First, a sys-admin style Python script:

It considers lines to be 0-based. (the first line is line 0) and accepts a file as an argument.

```
<code class="python">#!/usr/bin/python
import sys
with open(sys.argv[1]) as f:
    for l, i in enumerate(f):
        print l * int(i)
```

Pretty nice overall and gives this result:

```
2
6
12
20
30
42
56
72
90
```


## awk

The next was awk-based:

`<code class="bash">awk '{print $0 * NR}' nums.txt > output`

Very succinct. Probably the shortest (most powerful if you subscribe to that idea) response and very efficient for this use case (doubling numbers based on lines). It gives this output:

```
1
4
9
16
25
36
49
64
81
100```


## node.js

Next up, node.js:

```
<code class="javascript">var fs = require('fs');
var lines = fs.readFileSync('./nums.txt','utf8')
    .trim().split(/\r\n|\r|\n/g);
for (var i=0; i<lines.length; i++) {
    lines[i] = i * +lines[i];
}
fs.writeFileSync(
    './outfile.txt'
    ,'utf8'
    ,lines.join('\n')
);
```

Which works, but chokes when writing the file back out. Arguably reading/writing files is more of a strength for python/(bash/awk). There are many ways to write this code in js, so we’ll just skip to the output.

```
fs.js:113
    throw new Error('Unknown encoding: ' + encoding);
          ^
Error: Unknown encoding: 0
2
6
12
20
30
42
56
72
90
    at assertEncoding (fs.js:113:11)
    at Object.fs.writeFileSync (fs.js:963:3)
    at Object.<anonymous> (/Users/chris/Desktop/haskell/nums.js:7:4)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:901:3</anonymous>```


## Haskell

Next up, a Haskell implementation:

```
<code class="haskell" style="overflow-x:scroll">import Data.List

main :: IO ()
main = writeListAsLines . toDoubleList . lines =```

This is probably similar to the code I would've written in an interview environment. It can be cleaned up a bit fairly trivially though with `unlines` (which I somehow forgot about, then remembered as I was on my way to lunch):

```
<code class="haskell" style="overflow-x:scroll">import Data.List

main :: IO ()
main = writeListAsLines . toDoubleList . lines =```

or split up (maybe a little pathologically if you aren't particularly happy with interview coding) to see the type signatures on everything.

```
<code class="haskell" style="overflow-x:scroll">import Data.List

main :: IO ()
main = doubleIntsInFile "nums.txt" "numsout.txt"

doubleIntsInFile :: FilePath -> FilePath -> IO ()
doubleIntsInFile inFile out = writeDoubled out = String -> IO ()
writeDoubled x = writeListAsLines x . toDoubleList . lines

toDoubleList :: [String] -> [Int]
toDoubleList y = zipWith (*) (map read y) [1..length y]

writeListAsLines :: String -> [Int] -> IO ()
writeListAsLines fl =  writeFile fl . mkString

mkString :: [Int] -> String
mkString = unlines . map show
```

and the output:

```
1
4
9
16
25
36
49
64
81
100```


## Conclusion

Draw your own. My opinion is that AWK is the best tool for this odd job with Python a close second. (When observing these answers).

Feel like code golfing a bit? Post an answer in the comments.


# Update


## Perl

Perl was added by [David Baker](https://plus.google.com/u/0/+DavidBakerNYC/posts) on the [Google+ thread](https://plus.google.com/u/0/104488078938246881552/posts/Uzsf6qrRMns).

`<code class="perl">perl -lne 'print $_ * $.' `

It is approximately the same level as the previous awk script and a pretty easy to understand.

```
1
4
9
16
25
36
49
64
81
100```


