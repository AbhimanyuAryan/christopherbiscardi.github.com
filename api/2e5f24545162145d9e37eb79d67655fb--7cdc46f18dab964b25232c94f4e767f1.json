{"data":{"root":{"post":{"body":"<p>To set up a Servant/WAI application with monitoring, we will first\nscaffold a servant application using stack.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&gt; stack new servant-prometheus \\\nhttps://raw.githubusercontent.com/commercialhaskell/stack-templates/8cb4889fb7c502c18f6f9ecf9<span class=\"highlight__hljs-built_in___3uuyR\">cd</span>62aef58589c21/servant.hsfiles \\\n--resolver nightly-2016-05-21\n</code></pre>\n<p>To instrument our servant application, add the following three\ndependencies to <code>servant-prometheus.cabal</code> under the <code>build-depends</code>\nof the <code>library</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>, wai-middleware-prometheus &gt;= <span class=\"highlight__hljs-number___2gmaH\">0.1</span><span class=\"highlight__hljs-number___2gmaH\">.0</span><span class=\"highlight__hljs-number___2gmaH\">.1</span>\n, prometheus-client &gt;= <span class=\"highlight__hljs-number___2gmaH\">0.1</span><span class=\"highlight__hljs-number___2gmaH\">.0</span><span class=\"highlight__hljs-number___2gmaH\">.1</span>\n, prometheus-metrics-ghc &gt;= <span class=\"highlight__hljs-number___2gmaH\">0.1</span><span class=\"highlight__hljs-number___2gmaH\">.0</span><span class=\"highlight__hljs-number___2gmaH\">.1</span>\n</code></pre>\n<p>In <code>src/Lib.hs</code> we need the following 3 imports. They are fully\nqualified for clarity.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-keyword___som98\">import</span> Network.Wai.Middleware.Prometheus (<span class=\"highlight__hljs-title___1fl8Q\">prometheus</span>, <span class=\"highlight__hljs-type___11WfV\">PrometheusSettings(..)</span>)\n<span class=\"highlight__hljs-keyword___som98\">import</span> Prometheus (<span class=\"highlight__hljs-title___1fl8Q\">register</span>)\n<span class=\"highlight__hljs-keyword___som98\">import</span> Prometheus.Metric.GHC (<span class=\"highlight__hljs-title___1fl8Q\">ghcMetrics</span>)\n</code></pre>\n<p>All of our work will be in the <code>startApp</code> function defined in the same\nfile. Currently, <code>startApp</code> is defined as <code>run 8080 app</code>. We are going\nto change that to the following.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">startApp</span> = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  register ghcMetrics\n  <span class=\"highlight__hljs-keyword___som98\">let</span> promMiddleware = prometheus $ <span class=\"highlight__hljs-type___11WfV\">PrometheusSettings</span> [<span class=\"highlight__hljs-string___1SffY\">\"metrics\"</span>] <span class=\"highlight__hljs-type___11WfV\">True</span> <span class=\"highlight__hljs-type___11WfV\">True</span>\n  run <span class=\"highlight__hljs-number___2gmaH\">8080</span> $ promMiddleware $ app\n</code></pre>\n<p>We also need <code>{-# LANGUAGE OverloadedStrings #-}</code> for the\n<code>[&quot;metrics&quot;]</code> literal.</p>\n<p>Finally, to actually enable consumption of GHC metrics, we need to\ninclude the <code>-T</code> flag in our executable. The <code>executable</code>'s\n<code>ghc-options</code> becomes:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>ghc-options: -threaded -rtsopts -with-rtsopts=-TN\n</code></pre>\n<p>After building and running, the servant server should be providing\nprometheus metrics at /metrics.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>stack install --only-dependencies\nstack build\nstack <span class=\"highlight__hljs-built_in___3uuyR\">exec</span> servant-prometheus-exe\n</code></pre>\n<h1 id=\"details\">Details</h1>\n<p>All three of the packages we added as dependencies come from\n<a href=\"https://github.com/fimad/prometheus-haskell\">fimad/prometheus-haskell</a>.</p>\n<ul>\n<li>Prometheus Client\n<ul>\n<li>Defines the core data types and metrics. The other two packages\nbuild on client to provide their metrics.</li>\n<li>This is the package to use to set up custom metrics.</li>\n</ul>\n</li>\n<li>Prometheus Metrics GHC\n<ul>\n<li>Provides a set of custom metrics for Prometheus Client that are\nexposed from GHC’s runtime system.</li>\n</ul>\n</li>\n<li>WAI Middleware Prometheus\n<ul>\n<li>Instruments a WAI application, exposing common HTTP metrics. Also\nexposes those metrics on /metrics (or the url of the user’s\nchoice)</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://localhost:8080/metrics\">localhost:8080/metrics</a> should now\nhave the following output, which can be scraped by Prometheus.</p>\n<ul>\n<li><code>http_</code> prefixed metrics come from the WAI middleware</li>\n<li><code>ghc_</code> prefixed metrics come from <code>ghcMetrics</code></li>\n</ul>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code># HELP http_request_duration_microseconds The HTTP request latencies in microseconds.\n# TYPE http_request_duration_microseconds summary\nhttp_request_duration_microseconds{handler=&quot;app&quot;,quantile=&quot;0.5&quot;} 258.0\nhttp_request_duration_microseconds{handler=&quot;app&quot;,quantile=&quot;0.9&quot;} 258.0\nhttp_request_duration_microseconds{handler=&quot;app&quot;,quantile=&quot;0.99&quot;} 258.0\nhttp_request_duration_microseconds_sum{handler=&quot;app&quot;} 258.0\nhttp_request_duration_microseconds_count{handler=&quot;app&quot;} 1\n# HELP ghc_sparks The number of sparks in the local spark pool.\n# TYPE ghc_sparks gauge\nghc_sparks 0\n# HELP ghc_capabilities The number of threads that can run truly simultaneously.\n# TYPE ghc_capabilities gauge\nghc_capabilities 1\n# HELP ghc_bytes_allocated Total number of bytes allocated.\n# TYPE ghc_bytes_allocated gauge\nghc_bytes_allocated 249136\n# HELP ghc_num_gcs The number of garbage collections performed.\n# TYPE ghc_num_gcs gauge\nghc_num_gcs 3\n# HELP ghc_max_bytes_used The maximum number of live bytes seen so far.\n# TYPE ghc_max_bytes_used gauge\nghc_max_bytes_used 65576\n# HELP ghc_cumulative_bytes_used The cumulative total bytes used.\n# TYPE ghc_cumulative_bytes_used gauge\nghc_cumulative_bytes_used 149136\n# HELP ghc_bytes_copied The number of bytes copied during garbage collection.\n# TYPE ghc_bytes_copied gauge\nghc_bytes_copied 76344\n# HELP ghc_current_bytes_used The number of current live bytes.\n# TYPE ghc_current_bytes_used gauge\nghc_current_bytes_used 65504\n# HELP ghc_current_bytes_slop The current number of bytes lost to slop.\n# TYPE ghc_current_bytes_slop gauge\nghc_current_bytes_slop 0\n# HELP ghc_max_bytes_slop The maximum number of bytes lost to slop so far.\n# TYPE ghc_max_bytes_slop gauge\nghc_max_bytes_slop 8152\n# HELP ghc_peak_megabytes_allocated The maximum number of megabytes allocated.\n# TYPE ghc_peak_megabytes_allocated gauge\nghc_peak_megabytes_allocated 1\n# HELP ghc_mutator_cpu_seconds The CPU time spent running mutator threads.\n# TYPE ghc_mutator_cpu_seconds gauge\nghc_mutator_cpu_seconds 1.471e-3\n# HELP ghc_mutator_wall_seconds The wall clock time spent running mutator threads.\n# TYPE ghc_mutator_wall_seconds gauge\nghc_mutator_wall_seconds 1.48e-3\n# HELP ghc_gc_cpu_seconds The CPU time spent running GC.\n# TYPE ghc_gc_cpu_seconds gauge\nghc_gc_cpu_seconds 1.428e-3\n# HELP ghc_gc_wall_seconds The wall clock time spent running GC.\n# TYPE ghc_gc_wall_seconds gauge\nghc_gc_wall_seconds 1.781416e-3\n# HELP ghc_cpu_seconds Total CPU time elapsed since program start.\n# TYPE ghc_cpu_seconds gauge\nghc_cpu_seconds 0.352497\n# HELP ghc_wall_seconds Total wall clock time elapsed since start.\n# TYPE ghc_wall_seconds gauge\nghc_wall_seconds 28.681236189\n# HELP ghc_parallel_total_bytes_copied Number of bytes copied during GC, minus space held by mutable lists held by the capabilities.\n# TYPE ghc_parallel_total_bytes_copied gauge\nghc_parallel_total_bytes_copied 0\n# HELP ghc_parallel_max_bytes_copied Sum of number of bytes copied\neach GC by the most active GC thread each GC.\n# TYPE ghc_parallel_max_bytes_copied gauge\nghc_parallel_max_bytes_copied 0\n</code></pre>\n","attributes":{"title":"Instrumenting Servant with Prometheus","updatedAt":"May 21st, 2016","publishedAt":"May 21st, 2016","timeToRead":2,"headerImage":"/4697ea4ccbcd2ba2f293936baed59b9d.png","url":"/instrumenting-servant-with-prometheus/","canonicalURL":null,"excerpt":"To set up a Servant/WAI application with monitoring, we will first\nscaffold a servant application using stack.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}