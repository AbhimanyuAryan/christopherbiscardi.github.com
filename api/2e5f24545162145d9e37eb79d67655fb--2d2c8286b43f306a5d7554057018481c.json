{"data":{"root":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a>\nThe github repo for this code is at <a href=\"https://github.com/ChristopherBiscardi/Snap-Databased-within-Auth-Snaplet-Example\">here</a>.</p>\n<p>tldr; use this instance:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot;&gt;instance HasPostgres (Handler App (AuthManager App)) where\n    getPostgresState = withTop pg get\n</code></pre>\n<p>The app we’re using was built by running <code>snap init</code> and adding the following code:</p>\n<h5 id=\"srcapplicationhs\">src/Application.hs</h5>\n<p>In <code>src/Application.hs</code> we’ve added the following imports:</p>\n<p><code>import Snap.Snaplet.PostgresqlSimple</code></p>\n<p>and the following definition to our <code>App</code> datatype:</p>\n<p><code>,_pg :: Snaplet Postgres</code></p>\n<h5 id=\"srcsitehs\">src/Site.hs</h5>\n<p>In <code>src/Site.hs</code> we’ve added the following language extensions:</p>\n<p><code>{-# LANGUAGE FlexibleInstances #-}</code></p>\n<p>Imports:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot;&gt;-- for &quot;get&quot;\nimport Control.Monad.State.Class\n-- for &quot;liftIO&quot;\nimport           Control.Monad.IO.Class\n--for &quot;writeJSON&quot;\nimport           Snap.Extras.JSON\n-- for Non Snaplet-Auth related database queries\nimport           Snap.Snaplet.PostgresqlSimple\n-- for Snaplet-Auth backed\nimport           Snap.Snaplet.Auth.Backends.PostgresqlSimple```\n\nInstances:\n\n</code></pre>\n<p><code class=\"haskell\">instance HasPostgres (Handler b App) where\ngetPostgresState = with pg get</p>\n<p>instance HasPostgres (Handler App (AuthManager App)) where\ngetPostgresState = withTop pg get</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>\nand Snaplet Init code:\n\n`&lt;code class=&quot;haskell&quot;&gt;p `\n\n\n## What's Going On\n\nWe've also defined a convenience function `needsAuth` to restrict our `&quot;/postgres&quot;` route to only logged in users.\n\n</code></pre>\n<p><code class=\"haskell\">needsAuth :: Handler App (AuthManager App) () -&gt; Handler App App ()\nneedsAuth x = with auth $ requireUser auth (redirect “/”) x</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>\n`getFromPostgres` does the dirty work for us by querying a table that was created as part of the Snaplet-Auth backend. It will return a list of all users.\n\n</code></pre>\n<p><code class=\"haskell\">getFromPostgres :: Handler App (AuthManager App) ()\ngetFromPostgres = do\n–get the results\nresults ```</p>\n<p><code>&quot;/postgres&quot;</code> is the url to hit to check to see if it’s working.</p>\n<p><code>, (&quot;/postgres&quot;, needsAuth getFromPostgres)</code></p>\n<h2 id=\"the-instance\">The Instance</h2>\n<p>What’s really doing the heavy lifting of using the postgres snaplet inside of the auth snaplet’s route is this instance:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot;&gt;instance HasPostgres (Handler App (AuthManager App)) where\n    getPostgresState = withTop pg get\n</code></pre>\n<p>The important difference from the instance above it is <code>withTop</code> which can be found <a href=\"http://hackage.haskell.org/package/snap-0.6.0.2/docs/Snap-Snaplet.html\">here</a>.</p>\n<p>From the docs:</p>\n<blockquote>\n<p>– | Like ‘with’ but doesn’t impose the requirement that the action\n– being run be a descendant of the current snaplet.</p>\n</blockquote>\n<p>Essentially, the auth snaplet doesn’t know anything about the postgres snaplet as we’ve instantiated it (it doesn’t keep around a reference from the Backend module), so we have to ask the parent context (using <code>withTop</code>).</p>\n","attributes":{"title":"Using Databases inside of Snaplet Auth Restricted Routes","updatedAt":"Jan 9th, 2014","publishedAt":"Jan 9th, 2014","timeToRead":1,"headerImage":null,"url":"/2014/1/9/using-databases-inside-of-snaplet-auth-restricted-routes/","canonicalURL":null,"excerpt":"The github repo for this code is at here.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}