{"data":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a><br>\nThe github repo for this code is at <a href=\"https://github.com/ChristopherBiscardi/Snap-Databased-within-Auth-Snaplet-Example\">here</a>.</p>\n<p>tldr; use this instance:</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"haskell\"</span>&gt;<span class=\"hljs-function\">instance <span class=\"hljs-title\">HasPostgres</span> (<span class=\"hljs-params\">Handler App (AuthManager App</span>)) <span class=\"hljs-keyword\">where</span>\n    getPostgresState </span>= withTop pg <span class=\"hljs-keyword\">get</span>\n</code></pre>\n<p>The app we’re using was built by running <code>snap init</code> and adding the following code:</p>\n<h5>src/Application.hs</h5>\n<p>In <code>src/Application.hs</code> we’ve added the following imports:</p>\n<p><code>import Snap.Snaplet.PostgresqlSimple</code></p>\n<p>and the following definition to our <code>App</code> datatype:</p>\n<p><code>,_pg :: Snaplet Postgres</code></p>\n<h5>src/Site.hs</h5>\n<p>In <code>src/Site.hs</code> we’ve added the following language extensions:</p>\n<p><code>{-# LANGUAGE FlexibleInstances #-}</code></p>\n<p>Imports:</p>\n<pre><code>&lt;<span class=\"hljs-selector-tag\">code</span> class=<span class=\"hljs-string\">\"haskell\"</span>&gt;-- <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"get\"</span>\nimport Control<span class=\"hljs-selector-class\">.Monad</span><span class=\"hljs-selector-class\">.State</span><span class=\"hljs-selector-class\">.Class</span>\n-- <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"liftIO\"</span>\nimport           Control<span class=\"hljs-selector-class\">.Monad</span><span class=\"hljs-selector-class\">.IO</span><span class=\"hljs-selector-class\">.Class</span>\n--<span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"writeJSON\"</span>\nimport           Snap<span class=\"hljs-selector-class\">.Extras</span><span class=\"hljs-selector-class\">.JSON</span>\n-- <span class=\"hljs-keyword\">for</span> Non Snaplet-Auth related database queries\nimport           Snap<span class=\"hljs-selector-class\">.Snaplet</span><span class=\"hljs-selector-class\">.PostgresqlSimple</span>\n-- <span class=\"hljs-keyword\">for</span> Snaplet-Auth backed\nimport           Snap<span class=\"hljs-selector-class\">.Snaplet</span><span class=\"hljs-selector-class\">.Auth</span><span class=\"hljs-selector-class\">.Backends</span><span class=\"hljs-selector-class\">.PostgresqlSimple</span>```\n\nInstances:\n\n</code></pre>\n<p><code class=\"haskell\">instance HasPostgres (Handler b App) where\ngetPostgresState = with pg get</p>\n<p>instance HasPostgres (Handler App (AuthManager App)) where\ngetPostgresState = withTop pg get</p>\n<pre><code>\n<span class=\"hljs-keyword\">and</span> Snaplet Init code:\n\n`&lt;code class=<span class=\"hljs-string\">\"haskell\"</span>&gt;p `\n\n\n## What<span class=\"hljs-symbol\">'s</span> Going <span class=\"hljs-keyword\">On</span>\n\nWe<span class=\"hljs-symbol\">'ve</span> also defined a convenience <span class=\"hljs-keyword\">function</span> `needsAuth` <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">restrict</span> our `<span class=\"hljs-string\">\"/postgres\"</span>` route <span class=\"hljs-keyword\">to</span> only logged <span class=\"hljs-keyword\">in</span> users.\n\n</code></pre>\n<p><code class=\"haskell\">needsAuth :: Handler App (AuthManager App) () -&gt; Handler App App ()\nneedsAuth x = with auth $ requireUser auth (redirect “/”) x</p>\n<pre><code>\n`getFromPostgres` does <span class=\"hljs-keyword\">the</span> dirty work <span class=\"hljs-keyword\">for</span> us <span class=\"hljs-keyword\">by</span> querying <span class=\"hljs-keyword\">a</span> table that was created <span class=\"hljs-keyword\">as</span> part <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> Snaplet-Auth backend. It will <span class=\"hljs-literal\">return</span> <span class=\"hljs-keyword\">a</span> list <span class=\"hljs-keyword\">of</span> all users.\n\n</code></pre>\n<p><code class=\"haskell\">getFromPostgres :: Handler App (AuthManager App) ()\ngetFromPostgres = do\n–get the results\nresults ```</p>\n<p><code>&quot;/postgres&quot;</code> is the url to hit to check to see if it’s working.</p>\n<p><code>, (&quot;/postgres&quot;, needsAuth getFromPostgres)</code></p>\n<h2>The Instance</h2>\n<p>What’s really doing the heavy lifting of using the postgres snaplet inside of the auth snaplet’s route is this instance:</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"haskell\"</span>&gt;<span class=\"hljs-function\">instance <span class=\"hljs-title\">HasPostgres</span> (<span class=\"hljs-params\">Handler App (AuthManager App</span>)) <span class=\"hljs-keyword\">where</span>\n    getPostgresState </span>= withTop pg <span class=\"hljs-keyword\">get</span>\n</code></pre>\n<p>The important difference from the instance above it is <code>withTop</code> which can be found <a href=\"http://hackage.haskell.org/package/snap-0.6.0.2/docs/Snap-Snaplet.html\">here</a>.</p>\n<p>From the docs:</p>\n<blockquote>\n<p>– | Like ‘with’ but doesn’t impose the requirement that the action<br>\n– being run be a descendant of the current snaplet.</p>\n</blockquote>\n<p>Essentially, the auth snaplet doesn’t know anything about the postgres snaplet as we’ve instantiated it (it doesn’t keep around a reference from the Backend module), so we have to ask the parent context (using <code>withTop</code>).</p>\n"}}}