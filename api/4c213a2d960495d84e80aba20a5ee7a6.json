{"data":{"post":{"body":"<p>In this post we will examine an example app in which we make a RoboSpice request using GoogleHttpClient.</p>\n<p>The github repo is <a href=\"https://github.com/ChristopherBiscardi/robospice-googlehttpclient-example\">here</a>.</p>\n<h2>Dependencies</h2>\n<p>First, we need to grab the RoboSpice dependency JARs from the <code>repository</code> repo.</p>\n<p><code>&lt;code class=&quot;bash&quot;&gt;git clone https://github.com/octo-online/robospice/tree/repository</code></p>\n<p>Inside of <a href=\"https://github.com/octo-online/robospice/tree/repository/dependencies/1.4.11/robospice-google-http-client\">1.4.11/robospice-google-http-client</a> are the JARs we need to include in the project. If you are using Eclipse copy the JARs into your <code>libs/</code> folder and add them to the build path in <code>Project -&gt; Properties -&gt; Libraries</code> by clicking <code>Add JARs</code>. You may also need to click the <code>Order and Export</code> tab, check their boxes and move the included JARs to the top.</p>\n<p>We will also need one JAR from the Google-Http-Lib <a href=\"https://code.google.com/p/google-http-java-client/wiki/Setup#Download_Library_with_Dependencies\">source</a>. It is <code>google-http-client-1.17.0</code>. Again, if using Eclipse, add it to your project in the same way.</p>\n<h2>Classes</h2>\n<p>We are going to create a few files:</p>\n<ul>\n<li><a href=\"#spice-base\">BaseSpiceActivity.java</a></li>\n<li><a href=\"#spice-reddit\">Reddit*.java</a></li>\n<li><a href=\"#spice-request-reddit\">SpiceRequestReddit.java</a></li>\n</ul>\n<h4>BaseSpiceActivity</h4>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"java\"</span>&gt;import com.octo.android.robospice.JacksonGoogleHttpClientSpiceService;\nimport com.octo.android.robospice.SpiceManager;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseSpiceActivity</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">Activity</span> {\n\t<span class=\"hljs-keyword\">private</span> SpiceManager spiceManager = <span class=\"hljs-keyword\">new</span> SpiceManager(JacksonGoogleHttpClientSpiceService.class);\n\n\t@<span class=\"hljs-function\">Override\n\t<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onStart</span>(<span class=\"hljs-params\"></span>) </span>{\n\t\tspiceManager.start(<span class=\"hljs-keyword\">this</span>);\n\t\tsuper.onStart();\n\t}\n\n\t@<span class=\"hljs-function\">Override\n\t<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onStop</span>(<span class=\"hljs-params\"></span>) </span>{\n\t\tspiceManager.shouldStop();\n\t\tsuper.onStop();\n\t}\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> SpiceManager <span class=\"hljs-title\">getSpiceManager</span>(<span class=\"hljs-params\"></span>) </span>{\n\t\t<span class=\"hljs-keyword\">return</span> spiceManager;\n\t}\n\n}```\n\nThe big thing we’re doing <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span> file <span class=\"hljs-keyword\">is</span> creating an instance of `SpiceManager` <span class=\"hljs-function\">that will be accessible <span class=\"hljs-keyword\">in</span> the activities that inherit <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">base</span> <span class=\"hljs-title\">class</span> (<span class=\"hljs-params\">like our `MainActivity.java` will</span>).\n\nWe then start `spiceManager` <span class=\"hljs-keyword\">in</span> `<span class=\"hljs-title\">onStart</span>(<span class=\"hljs-params\"></span>)` and stop it <span class=\"hljs-keyword\">in</span> `onStop`. This will ensure that our activities have a `SpiceManager` accessible <span class=\"hljs-keyword\">when</span> they start and clean up after themselves <span class=\"hljs-keyword\">when</span> they stop.\n\nThe final piece <span class=\"hljs-keyword\">is</span> a getter <span class=\"hljs-title\">function</span> (<span class=\"hljs-params\">`getSpiceManager(</span>)`) so that we have easy access to the `spiceManager` <span class=\"hljs-keyword\">in</span> our activities.\n\n#### Reddit*.java\n\nWe will be getting our data <span class=\"hljs-keyword\">from</span> Reddit, so we first need to examine the responses we’re going to <span class=\"hljs-keyword\">get</span>. I’ve chosen a subreddit <span class=\"hljs-keyword\">where</span> all the posts are very <span class=\"hljs-title\">similar</span> (<span class=\"hljs-params\">/r/Riak</span>). Here <span class=\"hljs-keyword\">is</span> a sample API response:\n\n</span></code></pre>\n<p><code class=\"JavaScript\">{\n“kind”:“Listing”,\n“data”:{\n“modhash”:“3mxugaulcd1f8b500be09”,\n“children”:[\n{\n“kind”:“t3”,\n“data”:{\n“domain”:“<a href=\"http://github.com\">github.com</a>”,\n“banned_by”:null,\n“media_embed”:{</p>\n<pre><code>           },\n           &quot;subreddit&quot;:&quot;Riak&quot;,\n           &quot;selftext_html&quot;:null,\n           &quot;selftext&quot;:&quot;&quot;,\n           &quot;likes&quot;:null,\n           &quot;secure_media&quot;:null,\n           &quot;link_flair_text&quot;:null,\n           &quot;id&quot;:&quot;19v60r&quot;,\n           &quot;secure_media_embed&quot;:{\n\n           },\n           &quot;clicked&quot;:false,\n           &quot;stickied&quot;:false,\n           &quot;author&quot;:&quot;BonzoESC&quot;,\n           &quot;media&quot;:null,\n           &quot;score&quot;:1,\n           &quot;approved_by&quot;:null,\n           &quot;over_18&quot;:false,\n           &quot;hidden&quot;:false,\n           &quot;thumbnail&quot;:&quot;&quot;,\n           &quot;subreddit_id&quot;:&quot;t5_2s3vw&quot;,\n           &quot;edited&quot;:false,\n           &quot;link_flair_css_class&quot;:null,\n           &quot;author_flair_css_class&quot;:null,\n           &quot;downs&quot;:0,\n           &quot;saved&quot;:false,\n           &quot;is_self&quot;:false,\n           &quot;permalink&quot;:&quot;/r/Riak..riak/&quot;,\n           &quot;name&quot;:&quot;t3_19v60r&quot;,\n           &quot;created&quot;:1362687827.0,\n           &quot;url&quot;:&quot;https://github.com/basho/riak_dt&quot;,\n           &quot;author_flair_text&quot;:null,\n           &quot;title&quot;:&quot;riak_dt: CRDT for Riak&quot;,\n           &quot;created_utc&quot;:1362687827.0,\n           &quot;ups&quot;:1,\n           &quot;num_comments&quot;:0,\n           &quot;visited&quot;:false,\n           &quot;num_reports&quot;:null,\n           &quot;distinguished&quot;:null\n        }\n     }\n  ],\n  &quot;after&quot;:null,\n  &quot;before&quot;:null\n</code></pre>\n<p>}\n}```</p>\n<p>We will create a few classes to model the data. The first being <code>Reddit.java</code>.</p>\n<p>In <code>Reddit.java</code> we include the keys <code>kind</code> and <code>data</code> using <code>@Key</code> declarations. Then we declare their types.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"java\"</span>&gt;<span class=\"hljs-keyword\">package</span> com.christopherbiscardi.robospicetest;\n\n<span class=\"hljs-keyword\">import</span> com.google.api.client.util.Key;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Reddit</span> </span>{\n\t<span class=\"hljs-meta\">@Key</span>\n\t<span class=\"hljs-keyword\">private</span> String kind;\n\t<span class=\"hljs-meta\">@Key</span>\n\t<span class=\"hljs-keyword\">private</span> RedditData data;\n\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Reddit</span><span class=\"hljs-params\">()</span> </span>{\n\t}```\n\nThen define some basic getters <span class=\"hljs-keyword\">for</span> when we are dealing with our request’s response.\n\n</code></pre>\n<p><code class=\"java\">\tpublic String getKind() {\n\t\treturn this.kind;\n\t}</p>\n<pre><code>public RedditData getData() {\n\treturn this.data;\n}\n</code></pre>\n<pre><code>\n<span class=\"hljs-built_in\">and</span> override some utility <span class=\"hljs-built_in\">function</span><span class=\"hljs-variable\">s:</span>\n\n</code></pre>\n<p><code class=\"java\">\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ( kind == null ? 0 : kind.hashCode() ) + ( data == null ? 0 : data.hashCode() );\n\t\treturn result;\n\t}</p>\n<pre><code>@Override\npublic boolean equals( Object obj ) {\n\tif ( this == obj ) {\n\t\treturn true;\n\t}\n\tif ( obj == null ) {\n\t\treturn false;\n\t}\n\tif ( getClass() != obj.getClass() ) {\n\t\treturn false;\n\t}\n\tReddit other = (Reddit) obj;\n\tif ( kind == null ) {\n\t\tif ( other.kind != null ) {\n\t\t\treturn false;\n\t\t}\n\t} else if ( !kind.equals( other.kind ) ) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n@Override\npublic String toString() {\n\treturn &quot;Reddit [kind=&quot; + kind + &quot; &quot; + data + &quot;]&quot;;\n}\n</code></pre>\n<p>}</p>\n<pre><code>\nThe model <span class=\"hljs-keyword\">files</span> will <span class=\"hljs-keyword\">all</span> follow this same forma<span class=\"hljs-variable\">t:</span> @Key definitions, getters, utilities.\n\nOur final model (`RedditListing.java`) <span class=\"hljs-keyword\">is</span> where we are getting the content we care about. We don’<span class=\"hljs-keyword\">t</span> have <span class=\"hljs-keyword\">to</span> include `@Key` <span class=\"hljs-keyword\">for</span> every key in our JSON response, <span class=\"hljs-keyword\">so</span> we’<span class=\"hljs-keyword\">ll</span> just grab the ones we care abou<span class=\"hljs-variable\">t:</span>\n\n</code></pre>\n<p><code class=\"java\">\t@Key\n\tprivate String domain;\n@Key\n\tprivate String author;\n@Key\n\tprivate String permalink;\n@Key\n\tprivate String title;```</p>\n<h4>SpiceRequestReddit.java</h4>\n<p>To finish off our classes, we’ll create a SpiceRequest that takes a string (our subreddit) and returns a <code>Reddit</code>.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"java\"</span> style=<span class=\"hljs-string\">\"overflow-x:auto\"</span>&gt;<span class=\"hljs-keyword\">package</span> com.christopherbiscardi.robospicetest;\n\n<span class=\"hljs-keyword\">import</span> java.io.<span class=\"hljs-type\">IOException</span>;\n\n<span class=\"hljs-keyword\">import</span> roboguice.util.temp.<span class=\"hljs-type\">Ln</span>;\n\n<span class=\"hljs-keyword\">import</span> com.google.api.client.http.<span class=\"hljs-type\">GenericUrl</span>;\n<span class=\"hljs-keyword\">import</span> com.google.api.client.http.<span class=\"hljs-type\">HttpRequest</span>;\n<span class=\"hljs-keyword\">import</span> com.google.api.client.json.jackson.<span class=\"hljs-type\">JacksonFactory</span>;\n<span class=\"hljs-keyword\">import</span> com.octo.android.robospice.request.googlehttpclient.<span class=\"hljs-type\">GoogleHttpClientSpiceRequest</span>;\n\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpiceRequestReddit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">GoogleHttpClientSpiceRequest&lt;reddit&gt;</span> </span>{\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> baseUrl;\n\n    public <span class=\"hljs-type\">SpiceRequestReddit</span>( <span class=\"hljs-type\">String</span> subreddit ) {\n        <span class=\"hljs-keyword\">super</span>( <span class=\"hljs-type\">Reddit</span>.<span class=\"hljs-keyword\">class</span> );\n        <span class=\"hljs-keyword\">this</span>.baseUrl = <span class=\"hljs-type\">String</span>.format( <span class=\"hljs-string\">\"http://www.reddit.com/r/%s.json\"</span>, subreddit );\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    public <span class=\"hljs-type\">Reddit</span> loadDataFromNetwork() <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">IOException</span> {\n        <span class=\"hljs-type\">Ln</span>.d( <span class=\"hljs-string\">\"Call web service \"</span> + baseUrl );\n        <span class=\"hljs-type\">HttpRequest</span> request = getHttpRequestFactory()<span class=\"hljs-comment\">//</span>\n                .buildGetRequest( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">GenericUrl</span>( baseUrl ) );\n        request.setParser( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">JacksonFactory</span>().createJsonObjectParser() );\n        <span class=\"hljs-keyword\">return</span> request.execute().parseAs( getResultType() );\n    }\n}&lt;/reddit&gt;```\n\n\n## <span class=\"hljs-type\">Calling</span> the <span class=\"hljs-type\">API</span>\n\n<span class=\"hljs-type\">In</span> `<span class=\"hljs-type\">MainActivity</span>.java` we need to add some code to execute the request:\n\n<span class=\"hljs-type\">We</span> need to extend our `<span class=\"hljs-type\">MainActivity</span>` from `<span class=\"hljs-type\">BaseSpiceActivity</span>`\n\n`&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"java\"</span>&gt;public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseSpiceActivity</span> </span>{`\n\n<span class=\"hljs-type\">Add</span> a <span class=\"hljs-keyword\">new</span> `<span class=\"hljs-type\">SpiceRequestReddit</span>`\n\n`&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"java\"</span>&gt;<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">SpiceRequestReddit</span> spiceRequestReddit;`\n\n<span class=\"hljs-type\">Instantiate</span> it <span class=\"hljs-keyword\">with</span> the <span class=\"hljs-type\">Riak</span> subreddit;\n\n`&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"java\"</span>&gt;spiceRequestReddit = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">SpiceRequestReddit</span>( <span class=\"hljs-string\">\"Riak\"</span> );`\n\nand implement our <span class=\"hljs-type\">ResultHandler</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>:\n\n</code></pre>\n<p><code class=\"java\" style=\"overflow-x:auto\">public final class RedditSpiceRequestListener implements RequestListener {</p>\n<pre><code>\t@Override\n\tpublic void onRequestFailure( SpiceException spiceException ) {\n\t\tToast.makeText( MainActivity.this, &quot;failure&quot;, Toast.LENGTH_SHORT ).show();\n\t}\n\n\t@Override\n\tpublic void onRequestSuccess( final Reddit result ) {\n\t\tToast.makeText( MainActivity.this, &quot;success&quot;, Toast.LENGTH_SHORT ).show();\n\t\tLog.e(&quot;TEST&quot;,result.getData().toString());\n\t\tLog.e(&quot;TEST&quot;,result.getData().getChildren().get(0).getData().getTitle());\n\t}\n}```\n</code></pre>\n<p>We’ve just implemented a simple log to view the data, but we could have added it to an ArrayAdapter and displayed it in a ListView.</p>\n<p>Finally, we override the <code>onStart()</code> method to actually make the request.</p>\n<pre><code>&lt;code <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"java\"</span>&gt;@Override\n\tprotected void onStart() {\n\t\tsuper.onStart();\n\n\t\tsetProgressBarIndeterminate( <span class=\"hljs-literal\">false</span> );\n\t\tsetProgressBarVisibility( <span class=\"hljs-literal\">true</span> );\n\n\t\tgetSpiceManager().execute( spiceRequestReddit, <span class=\"hljs-string\">\"json\"</span>, DurationInMillis.ONE_MINUTE, new RedditSpiceRequestListener() );\n\t}```\n\n\n<span class=\"hljs-comment\">## AndroidManifest.xml</span>\n\nNow <span class=\"hljs-keyword\">that</span>’s all <span class=\"hljs-keyword\">the</span> code we need <span class=\"hljs-keyword\">to</span> <span class=\"hljs-built_in\">write</span>, <span class=\"hljs-keyword\">but</span> we still need <span class=\"hljs-keyword\">to</span> register our service <span class=\"hljs-keyword\">and</span> permissions <span class=\"hljs-keyword\">in</span> `AndroidManifest.xml`. Notice we’ve added three `uses-permission` nodes <span class=\"hljs-keyword\">and</span> a `service` node.\n\n</code></pre>\n<p><code class=\"xml\" style=\"overflow-x:auto\"><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.christopherbiscardi.robospicetest\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" ></p>\n<pre><code>&lt;uses-sdk\n    android:minSdkVersion=&quot;8&quot;\n    android:targetSdkVersion=&quot;17&quot; /&gt;\n\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;\n\n&lt;application\n    android:allowBackup=&quot;true&quot;\n    android:icon=&quot;@drawable/ic_launcher&quot;\n    android:label=&quot;@string/app_name&quot;\n    android:theme=&quot;@style/AppTheme&quot; &gt;\n    &lt;activity\n        android:name=&quot;com.christopherbiscardi.robospicetest.MainActivity&quot;\n        android:label=&quot;@string/app_name&quot; &gt;\n        &lt;intent-filter&gt;\n            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n        &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;service\n        android:name=&quot;com.octo.android.robospice.JacksonGoogleHttpClientSpiceService&quot;\n        android:exported=&quot;false&quot; /&gt;\n&lt;/application&gt;\n</code></pre>\n<p></manifest>```</p>\n<h2>Fin</h2>\n<p>Now we can run the app and see the result (success or failure) pop up as a Toast as well as viewing the actual data in LogCat.</p>\n<p>Check out the github repository <a href=\"https://github.com/ChristopherBiscardi/robospice-googlehttpclient-example\">here</a></p>\n"}}}