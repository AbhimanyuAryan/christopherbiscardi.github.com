{"data":{"post":{"body":"<p>So today I tried to write my first fully custom Emacs Lisp code. Here are some things I learned (along with the code for a <code>region-to-gist</code> function).</p>\n<p><a href=\"https://gist.github.com/anonymous/8812412\">Here</a> is my final product, uploaded straight from Emacs.</p>\n<p>The final script looks like this at the bottom of my <code>.emacs</code> file:</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"lisp\"</span> style=<span class=\"hljs-string\">\"overflow-x:scroll\"</span>&gt;;;; Region <span class=\"hljs-keyword\">to</span> Gist\n(defun region-<span class=\"hljs-keyword\">to</span>-gist ()\n  <span class=\"hljs-string\">\"Sends region to Gist\"</span>\n  (interactive)\n  (<span class=\"hljs-keyword\">if</span> (region-active-p)\n      (gist-req (<span class=\"hljs-keyword\">buffer</span>-substring-no-properties (region-beginning) (region-<span class=\"hljs-keyword\">end</span>))))\n  nil)\n\n(defun gist-test (buf)\n  (message <span class=\"hljs-string\">\"%S\"</span> `(:content ,buf)))\n\n(defun gist-req (buf)\n  (request\n       <span class=\"hljs-string\">\"https://api.github.com/gists\"</span>\n       :<span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">\"POST\"</span>\n       :data (json-encode `(:description <span class=\"hljs-string\">\"Created with Christopher Biscardi's region-to-gist\"</span>\n                            :public t\n                            :files (:example.el (:content ,buf))))\n       ;; :data <span class=\"hljs-string\">\"key=value&amp;key2=value2\"</span>  ; this <span class=\"hljs-keyword\">is</span> equivalent\n       :parser <span class=\"hljs-symbol\">'json</span>-read\n       :success (<span class=\"hljs-keyword\">function</span>*\n                 (lambda (&amp;key data &amp;allow-other-keys)\n                   (message <span class=\"hljs-string\">\"I sent: %S\"</span> (assoc-<span class=\"hljs-keyword\">default</span> <span class=\"hljs-symbol\">'html_url</span> data)))))\n  nil)```\n\nIt <span class=\"hljs-keyword\">is</span> used by setting a mark `C-SPC`, selecting a region (arrow keys work <span class=\"hljs-keyword\">to</span> expand the region) <span class=\"hljs-keyword\">then</span> typing `M-x region-<span class=\"hljs-keyword\">to</span>-gist`. The <span class=\"hljs-keyword\">Function</span> <span class=\"hljs-keyword\">then</span> runs <span class=\"hljs-keyword\">and</span> outputs either an error message (hopefully <span class=\"hljs-keyword\">not</span>) <span class=\"hljs-keyword\">or</span> this <span class=\"hljs-keyword\">to</span> the message <span class=\"hljs-keyword\">buffer</span>:\n\n`&lt;code class=<span class=\"hljs-string\">\"bash\"</span>&gt;I sent: <span class=\"hljs-string\">\"https://gist.github.com/8812412\"</span>`\n\nThe most important part here <span class=\"hljs-keyword\">is</span> the `(interactive)` which allows you <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">use</span> `M-x region-<span class=\"hljs-keyword\">to</span>-gist` <span class=\"hljs-keyword\">to</span> execute the <span class=\"hljs-keyword\">function</span>. There are a couple different modes you can enable <span class=\"hljs-keyword\">with</span> this.\n\n`region-active-p` basically returns true <span class=\"hljs-keyword\">if</span> there’s a region selection (The `C-SPC` <span class=\"hljs-keyword\">and</span> arrows stuff).\n\n`gist-test` <span class=\"hljs-keyword\">is</span> a <span class=\"hljs-keyword\">function</span> I used <span class=\"hljs-keyword\">to</span> replace the `gist-req` call so I could test whether <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> the region was actually being sent <span class=\"hljs-keyword\">and</span> resolve some formatting issues. This <span class=\"hljs-keyword\">function</span> can be wholly deleted <span class=\"hljs-keyword\">with</span> no ramifications.\n\n`<span class=\"hljs-keyword\">buffer</span>-substring-no-properties` returns undecorated strings from your buffers. <span class=\"hljs-keyword\">Use</span> this <span class=\"hljs-keyword\">is</span> you’re trying <span class=\"hljs-keyword\">to</span> handle a <span class=\"hljs-built_in\">string</span> (such as <span class=\"hljs-keyword\">in</span> JSON) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">use</span> `<span class=\"hljs-keyword\">buffer</span>-substring` <span class=\"hljs-keyword\">if</span> you’re trying <span class=\"hljs-keyword\">to</span> put something <span class=\"hljs-keyword\">in</span> the kill-ring, etc.\n\nI’m using [request.el](http://tkf.github.io/emacs-request/) <span class=\"hljs-keyword\">to</span> make my request. It tries <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">use</span> `curl` <span class=\"hljs-keyword\">if</span> available.\n\nThe biggest part <span class=\"hljs-keyword\">of</span> the request code <span class=\"hljs-keyword\">is</span> the `:success` <span class=\"hljs-keyword\">function</span>. <span class=\"hljs-keyword\">In</span> this <span class=\"hljs-keyword\">case</span> we grab the key `html_url` from the [Gist API Response](http://developer.github.com/v3/gists/#create-a-gist)`data`.\n\nThe backtick here:\n\n</code></pre>\n<p><code class=\"haskell\">`(:description “Created with Christopher Biscardi’s region-to-gist”\n:public t\n:files (:example.el (:content ,buf)))```</p>\n<p>means we have to use the <code>,</code> for <code>,buf</code> to get the value of <code>buf</code>.</p>\n<p>Oh, and also, this function should probably be called <code>gist-region</code> as per other region functions. oops.</p>\n"}}}