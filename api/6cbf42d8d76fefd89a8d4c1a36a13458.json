{"data":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611515/vagrantriak_qhwv7l.gif\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611515/vagrantriak_qhwv7l.gif\" alt=\"vagrantriak\"></a></p>\n<p>In this post we will go over how to set up five Riak nodes, cluster them, setup HAProxy on a sixth machine and run a Haskell environment in a seventh machine. This will allow us to query from our Haskell vm to our HAProxy vm and distribute the queries among a Riak cluster.</p>\n<p>If you haven’t installed Vagrant, do that now:<br>\n<a href=\"http://www.vagrantup.com/\">Vagrant</a></p>\n<p>I used VirtualBox as a backing for Vagrant.<br>\n<a href=\"https://www.virtualbox.org/\">VirtualBox</a></p>\n<h1>tldr: Running the Code</h1>\n<h2>The Base Box</h2>\n<p>We will need Ubuntu 13.10 (Saucy Salamander), as this is the base box in our <code>Vagrantfile</code>s.</p>\n<p><code>vagrant box add saucy-amd http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box</code></p>\n<h2>Cloning the Repo</h2>\n<p>The code is contained in a git repo <a href=\"\">here</a></p>\n<p><code>git clone git@github.com:ChristopherBiscardi/Riak-HAProxy-Haskell-Vagrant.git</code></p>\n<h2>Getting Them Up</h2>\n<p>The simplest way to get everything up and running is:</p>\n<pre><code>&lt;code <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;cd riak-haproxy-haskell-vagrant\nvagrant up```\n\nI personally like <span class=\"hljs-keyword\">to</span> bring up <span class=\"hljs-keyword\">my</span> databases <span class=\"hljs-keyword\">first</span>, <span class=\"hljs-keyword\">then</span> proxy, <span class=\"hljs-keyword\">then</span> webserver.\n\n</code></pre>\n<p><code class=\"bash\">cd riak-haproxy-haskell-vagrant\nvagrant up /riak[0-9]/\nvagrant up haproxy\nvagrant up web```</p>\n<p>A gif of running <code>vagrant up haproxy</code> is availible <a href=\"http://www.christopherbiscardi.com/wp-content/uploads/2014/02/vagrantuphaproxy.gif\">here</a></p>\n<h2>Testing</h2>\n<p>We can be assured that everything has worked by running:</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;vagrant ssh web\ncurl <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.50</span><span class=\"hljs-number\">.3</span>:<span class=\"hljs-number\">8098</span>```\n\nWhich <span class=\"hljs-keyword\">is</span> curling the IP of our load balancer. This should <span class=\"hljs-keyword\">return</span> something like <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">from</span> a Riak node:\n\n</code></pre>\n<code class=\"html\" style=\"overflow-x:auto\">\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_bucket_type&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_counter&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_crdt&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_index&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_index&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_keylist&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_keylist&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/mapred&quot;&gt;riak_kv_wm_mapred&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/ping&quot;&gt;riak_kv_wm_ping&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_props&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_props&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/stats&quot;&gt;riak_kv_wm_stats&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/search&quot;&gt;yz_wm_extract&lt;/a&gt;&lt;/li&gt;```\n</code></pre>\n<h2>What’s Going On</h2>\n<p>Our Vagrantfile looks like this:</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"ruby\"</span> style=<span class=\"hljs-string\">\"overflow-x:auto\"</span>&gt;<span class=\"hljs-comment\"># -*- mode: ruby -*-</span>\n<span class=\"hljs-comment\"># vi: set ft=ruby :</span>\n\nVAGRANTFILE_API_VERSION = <span class=\"hljs-string\">\"2\"</span>\nNUM_RIAK_NODES = <span class=\"hljs-number\">5</span>\n\nVagrant.configure(VAGRANTFILE_API_VERSION) <span class=\"hljs-built_in\">do</span> |config|\n  config.vm.box = <span class=\"hljs-string\">\"saucy-amd\"</span>\n\n  config.vm.define <span class=\"hljs-string\">\"web\"</span> <span class=\"hljs-built_in\">do</span> |web|\n    web.vm.network <span class=\"hljs-string\">\"private_network\"</span>,\n      ip: <span class=\"hljs-string\">\"192.168.50.2\"</span>, virtualbox__intnet: <span class=\"hljs-string\">\"riakhaskellnetwork\"</span>\n    web.vm.provision <span class=\"hljs-string\">\"shell\"</span>, path: <span class=\"hljs-string\">\"vagrant-files/haskell-build.sh\"</span>\n    web.vm.provider <span class=\"hljs-string\">\"virtualbox\"</span> <span class=\"hljs-built_in\">do</span> |v|\n      v.memory = <span class=\"hljs-number\">1024</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-title\">end</span></span>\n\n  config.vm.define <span class=\"hljs-string\">\"haproxy\"</span> <span class=\"hljs-built_in\">do</span> |ha|\n    ha.vm.network <span class=\"hljs-string\">\"private_network\"</span>,\n      ip: <span class=\"hljs-string\">\"192.168.50.3\"</span>, virtualbox__intnet: <span class=\"hljs-string\">\"riakhaskellnetwork\"</span>\n    ha.vm.provision <span class=\"hljs-string\">\"shell\"</span>, path: <span class=\"hljs-string\">\"vagrant-files/haproxy-build.sh\"</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">end</span>\n\n# <span class=\"hljs-title\">Base</span> <span class=\"hljs-title\">node</span> <span class=\"hljs-title\">is</span> <span class=\"hljs-title\">192</span>.<span class=\"hljs-title\">168</span>.<span class=\"hljs-title\">50</span>.<span class=\"hljs-title\">10</span></span>\n<span class=\"hljs-comment\"># Subsequent nodes are .11/.12/etc</span>\n  (<span class=\"hljs-number\">1.</span>.NUM_RIAK_NODES).<span class=\"hljs-keyword\">each</span> <span class=\"hljs-built_in\">do</span> |i|\n    config.vm.define <span class=\"hljs-string\">\"riak#{i}\"</span> <span class=\"hljs-built_in\">do</span> |riakx|\n      riakx.vm.network <span class=\"hljs-string\">\"private_network\"</span>,\n        ip: <span class=\"hljs-string\">\"192.168.50.#{i+9}\"</span>, virtualbox__intnet: <span class=\"hljs-string\">\"riakhaskellnetwork\"</span>\n      riakx.vm.provision <span class=\"hljs-string\">\"shell\"</span>, path: <span class=\"hljs-string\">\"vagrant-files/riak-build.sh\"</span>, args: <span class=\"hljs-string\">\"192.168.50.#{i+9} 192.168.50.10\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-title\">end</span></span>\n<span class=\"hljs-keyword\">end</span>```\n\nEach <span class=\"hljs-keyword\">of</span> our vm types is defined <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">a</span> `config.vm.define` block. We have `web`, `haproxy` <span class=\"hljs-keyword\">and</span> some `riak` nodes.\n\n<span class=\"hljs-comment\">### Global</span>\n\nIn <span class=\"hljs-keyword\">each</span> block we define <span class=\"hljs-keyword\">a</span> `private_network` named `riakhaskellnetwork` <span class=\"hljs-keyword\">and</span> define <span class=\"hljs-keyword\">the</span> IP addresses <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">each</span> vm. `web` is `x.x.x<span class=\"hljs-number\">.2</span>`, `haproxy` is `x.x.x<span class=\"hljs-number\">.3</span>` <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">the</span> `riak` nodes autoincrement <span class=\"hljs-built_in\">from</span> `x.x.x<span class=\"hljs-number\">.10</span>`. (riak1 is x.x.x<span class=\"hljs-number\">.10</span>, riak2 is x.x.x<span class=\"hljs-number\">.11</span>, etc)\n\n<span class=\"hljs-comment\">### web</span>\n\nOur web vm is provisioned <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">shell</span> script located <span class=\"hljs-keyword\">in</span> `vagrant-<span class=\"hljs-built_in\">files</span>/haskell-build.sh`. It’s fairly basic <span class=\"hljs-keyword\">and</span> just installs <span class=\"hljs-keyword\">the</span> `haskell-<span class=\"hljs-built_in\">platform</span>` <span class=\"hljs-keyword\">and</span> updates `cabal`.\n\n</code></pre>\n<p><code class=\"bash\" style=\"overflow-x:auto\">echo &quot;Haskell 7.6.3&quot;\napt-get update\napt-get install build-essential haskell-platform -y\ncabal update\ncabal install cabal-install```</p>\n<p>After <code>vagrant up web</code> we can <code>vagrant ssh web</code> and run <code>ghci</code> to start a Haskell interpreter.</p>\n<h3>haproxy</h3>\n<p>Our HAProxy vm is a little more interesting. We install <code>haproxy</code>, set the open files limit to &gt; 256000 (in this case 266000) and then we start <code>haproxy</code> with the config file <code>vagrant-files/haproxy.config</code>. Note that there are no startup scripts, so this won’t to be able to withstand <code>vagrant reload</code> without running <code>vagrant provision</code> after it.</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"bash\"</span> style=<span class=\"hljs-string\">\"overflow-x:auto\"</span>&gt;echo <span class=\"hljs-string\">\"Building HAProxy\"</span>\napt-<span class=\"hljs-built_in\">get</span> update\napt-<span class=\"hljs-built_in\">get</span> install haproxy -y\nulimit -n <span class=\"hljs-number\">266000</span>\nhaproxy -V -f /vagrant/vagrant-<span class=\"hljs-built_in\">files</span>/haproxy.config```\n\nIf we check out `vagrant-<span class=\"hljs-built_in\">files</span>/haproxy.config` we can see <span class=\"hljs-keyword\">a</span> little about what we’re doing <span class=\"hljs-keyword\">with</span> our <span class=\"hljs-built_in\">load</span> balancer:\n\n</code></pre>\n<p><code class=\"config\" style=\"overflow-x:auto\">global\nlog 192.168.50.3     local0\nlog 192.168.50.3     local1 notice\nmaxconn           256000\nchroot            /var/lib/haproxy\nuser              haproxy\ngroup             haproxy\nspread-checks     5\ndaemon\nquiet</p>\n<p>defaults\nlog               global\noption            dontlognull\noption            redispatch\noption            allbackups\nmaxconn           256000\ntimeout connect   5000</p>\n<p>backend riak_rest_backend\nmode               http\nbalance            roundrobin\noption             httpchk GET /ping\noption             httplog\nserver riak1 192.168.50.10:8098 weight 1 maxconn 1024  check\nserver riak2 192.168.50.11:8098 weight 1 maxconn 1024  check\nserver riak3 192.168.50.12:8098 weight 1 maxconn 1024  check\nserver riak4 192.168.50.13:8098 weight 1 maxconn 1024  check\nserver riak5 192.168.50.14:8098 weight 1 maxconn 1024  check</p>\n<p>frontend riak_rest\nbind               192.168.50.3:8098\nmode               http\noption             contstats\ndefault_backend    riak_rest_backend</p>\n<p>backend riak_protocol_buffer_backend\nbalance            leastconn\nmode               tcp\noption             tcpka\noption             srvtcpka\nserver riak1 192.168.50.10:8087 weight 1 maxconn 1024  check\nserver riak2 192.168.50.11:8087 weight 1 maxconn 1024  check\nserver riak3 192.168.50.12:8087 weight 1 maxconn 1024  check\nserver riak4 192.168.50.13:8087 weight 1 maxconn 1024  check\nserver riak5 192.168.50.14:8087 weight 1 maxconn 1024  check</p>\n<p>frontend riak_protocol_buffer\nbind               192.168.50.3:8087\nmode               tcp\noption             tcplog\noption             contstats\nmode               tcp\noption             tcpka\noption             srvtcpka\ndefault_backend    riak_protocol_buffer_backend```</p>\n<p>We are binding to the IP address of our vm, <code>192.168.50.3</code> and we’ve hardcoded the five node Riak cluster into our backends. We have a backend (the Riak nodes) and a frontend (webserver side) for Riak’s HTTP and Protobuf APIs.</p>\n<h3>riakx</h3>\n<p>The Riak nodes are provisioned by <code>vagrant-files/riak-build</code>. We cycle through a list from 1 to <code>NUM_RIAK_NODES</code> (in this case, 5), and create a node for each. We pass two arguments to our shell script for each node. One is the base node IP (always x.x.x.10) and the other is the current node’s IP.</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"config\"</span> style=<span class=\"hljs-string\">\"overflow-x:auto\"</span>&gt;<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-comment\"># $2 is base riak node IP</span>\n<span class=\"hljs-comment\"># $1 is current node's IP</span>\necho <span class=\"hljs-string\">\"Building Riak Vagrant Node\"</span>\necho $<span class=\"hljs-number\">2</span>\necho $<span class=\"hljs-number\">1</span>\nsudo apt-<span class=\"hljs-built_in\">get</span> update\nsudo apt-<span class=\"hljs-built_in\">get</span> install libssl0<span class=\"hljs-number\">.9</span><span class=\"hljs-number\">.8</span> default-jre -y\nwget <span class=\"hljs-keyword\">http</span>://s3.amazonaws.com/downloads.basho.com/riak/<span class=\"hljs-number\">2.0</span>/<span class=\"hljs-number\">2.0</span><span class=\"hljs-number\">.0</span>pre11/ubuntu/precise/riak_2<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>pre11<span class=\"hljs-number\">-1</span>_amd64.deb\nsudo dpkg -i riak_2<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>pre11<span class=\"hljs-number\">-1</span>_amd64.deb\nsed -i <span class=\"hljs-string\">\"s/127.0.0.1/$1/g\"</span> /etc/riak/riak.conf\nsed -i <span class=\"hljs-string\">'s/search = off/search = on/g'</span> /etc/riak/riak.conf\nulimit -n <span class=\"hljs-number\">8192</span>\nriak <span class=\"hljs-built_in\">start</span>\n<span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"$2\"</span> != <span class=\"hljs-string\">\"$1\"</span> ]]\n<span class=\"hljs-keyword\">then</span>\n  echo <span class=\"hljs-string\">\"Joining Base Riak Node $2\"</span>\n  riak-admin cluster join riak@$<span class=\"hljs-number\">2</span>\n  riak-admin cluster plan\n  riak-admin cluster commit\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">\"Starting Base Riak Node\"</span>\nfi\necho $(riak-admin status | grep ring_members)```\n\n<span class=\"hljs-number\">1.</span> We install libssl <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">a</span> JRE (because we want <span class=\"hljs-built_in\">to</span> run Riak Search)\n<span class=\"hljs-number\">2.</span> wget <span class=\"hljs-keyword\">the</span> `amd64.deb` <span class=\"hljs-keyword\">for</span> Riak2<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-pre11\n<span class=\"hljs-number\">3.</span> install <span class=\"hljs-keyword\">the</span> .deb\n<span class=\"hljs-number\">4.</span> Replace <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-keyword\">with</span> our node’s IP address\n<span class=\"hljs-number\">5.</span> Replace `search = off` <span class=\"hljs-keyword\">with</span> `search = <span class=\"hljs-keyword\">on</span>` <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">turn</span> <span class=\"hljs-title\">on</span> <span class=\"hljs-title\">Riak</span> <span class=\"hljs-title\">Search</span>\n<span class=\"hljs-number\">6.</span> Set <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">file</span> limit <span class=\"hljs-built_in\">to</span> <span class=\"hljs-number\">8192</span>\n<span class=\"hljs-number\">7.</span> Start Riak\n<span class=\"hljs-number\">8.</span> <span class=\"hljs-keyword\">then</span>, <span class=\"hljs-keyword\">if</span> we have <span class=\"hljs-keyword\">the</span> base node, <span class=\"hljs-built_in\">do</span> nothing\n<span class=\"hljs-number\">9.</span> If we have <span class=\"hljs-keyword\">the</span> non-base node, we commit <span class=\"hljs-keyword\">a</span> cluster plan <span class=\"hljs-built_in\">to</span> join <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">the</span> base node\n<span class=\"hljs-number\">10.</span> Finally, echo <span class=\"hljs-keyword\">the</span> <span class=\"hljs-built_in\">result</span> <span class=\"hljs-keyword\">of</span> `riak-admin status | grep ring_members`\n\nNote that, just like <span class=\"hljs-keyword\">the</span> HAProxy vm, <span class=\"hljs-keyword\">the</span> Riak nodes don’t have init scripts <span class=\"hljs-keyword\">and</span> will need <span class=\"hljs-keyword\">a</span> `vagrant provision` <span class=\"hljs-keyword\">after</span> <span class=\"hljs-keyword\">a</span> `vagrant reload`\n\n\n<span class=\"hljs-comment\"># Future Work</span>\n\nIn <span class=\"hljs-keyword\">the</span> future I might <span class=\"hljs-built_in\">include</span> Riak CS <span class=\"hljs-keyword\">in</span> this configuration. In addition, <span class=\"hljs-keyword\">it</span> would be nice <span class=\"hljs-built_in\">to</span> have some init scripts <span class=\"hljs-built_in\">to</span> make <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">a</span> more stable cluster. As <span class=\"hljs-keyword\">it</span> stands now, we have <span class=\"hljs-keyword\">a</span> pseudo-production configuration <span class=\"hljs-keyword\">and</span> we can examine <span class=\"hljs-keyword\">the</span> results <span class=\"hljs-keyword\">of</span> doing insane things like randomly `vagrant destroy`ing Riak nodes.\n\nNow that I think about <span class=\"hljs-keyword\">it</span>, <span class=\"hljs-keyword\">a</span> chaos monkey would be <span class=\"hljs-keyword\">a</span> cool addition <span class=\"hljs-built_in\">to</span> this setup.\n\n\n</code></pre>\n"}}}