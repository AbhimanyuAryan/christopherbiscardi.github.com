{"data":{"root":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611515/vagrantriak_qhwv7l.gif\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611515/vagrantriak_qhwv7l.gif\" alt=\"vagrantriak\"></a></p>\n<p>In this post we will go over how to set up five Riak nodes, cluster them, setup HAProxy on a sixth machine and run a Haskell environment in a seventh machine. This will allow us to query from our Haskell vm to our HAProxy vm and distribute the queries among a Riak cluster.</p>\n<p>If you haven’t installed Vagrant, do that now:\n<a href=\"http://www.vagrantup.com/\">Vagrant</a></p>\n<p>I used VirtualBox as a backing for Vagrant.\n<a href=\"https://www.virtualbox.org/\">VirtualBox</a></p>\n<h1 id=\"tldr-running-the-code\">tldr: Running the Code</h1>\n<h2 id=\"the-base-box\">The Base Box</h2>\n<p>We will need Ubuntu 13.10 (Saucy Salamander), as this is the base box in our <code>Vagrantfile</code>s.</p>\n<p><code>vagrant box add saucy-amd http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box</code></p>\n<h2 id=\"cloning-the-repo\">Cloning the Repo</h2>\n<p>The code is contained in a git repo <a href=\"\">here</a></p>\n<p><code>git clone git@github.com:ChristopherBiscardi/Riak-HAProxy-Haskell-Vagrant.git</code></p>\n<h2 id=\"getting-them-up\">Getting Them Up</h2>\n<p>The simplest way to get everything up and running is:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;cd riak-haproxy-haskell-vagrant\nvagrant up```\n\nI personally like to bring up my databases first, then proxy, then webserver.\n\n</code></pre>\n<p><code class=\"bash\">cd riak-haproxy-haskell-vagrant\nvagrant up /riak[0-9]/\nvagrant up haproxy\nvagrant up web```</p>\n<p>A gif of running <code>vagrant up haproxy</code> is availible <a href=\"http://www.christopherbiscardi.com/wp-content/uploads/2014/02/vagrantuphaproxy.gif\">here</a></p>\n<h2 id=\"testing\">Testing</h2>\n<p>We can be assured that everything has worked by running:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;vagrant ssh web\ncurl 192.168.50.3:8098```\n\nWhich is curling the IP of our load balancer. This should return something like this from a Riak node:\n\n</code></pre>\n<code class=\"html\" style=\"overflow-x:auto\">\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_bucket_type&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_buckets&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_counter&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_crdt&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_index&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_index&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_keylist&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_keylist&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_link_walker&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/mapred&quot;&gt;riak_kv_wm_mapred&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/riak&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_object&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/ping&quot;&gt;riak_kv_wm_ping&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/buckets&quot;&gt;riak_kv_wm_props&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/types&quot;&gt;riak_kv_wm_props&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/stats&quot;&gt;riak_kv_wm_stats&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/search&quot;&gt;yz_wm_extract&lt;/a&gt;&lt;/li&gt;```\n</code></pre>\n<h2 id=\"whats-going-on\">What’s Going On</h2>\n<p>Our Vagrantfile looks like this:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;ruby&quot; style=&quot;overflow-x:auto&quot;&gt;# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVAGRANTFILE_API_VERSION = &quot;2&quot;\nNUM_RIAK_NODES = 5\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = &quot;saucy-amd&quot;\n\n  config.vm.define &quot;web&quot; do |web|\n    web.vm.network &quot;private_network&quot;,\n      ip: &quot;192.168.50.2&quot;, virtualbox__intnet: &quot;riakhaskellnetwork&quot;\n    web.vm.provision &quot;shell&quot;, path: &quot;vagrant-files/haskell-build.sh&quot;\n    web.vm.provider &quot;virtualbox&quot; do |v|\n      v.memory = 1024\n    end\n  end\n\n  config.vm.define &quot;haproxy&quot; do |ha|\n    ha.vm.network &quot;private_network&quot;,\n      ip: &quot;192.168.50.3&quot;, virtualbox__intnet: &quot;riakhaskellnetwork&quot;\n    ha.vm.provision &quot;shell&quot;, path: &quot;vagrant-files/haproxy-build.sh&quot;\n  end\n\n# Base node is 192.168.50.10\n# Subsequent nodes are .11/.12/etc\n  (1..NUM_RIAK_NODES).each do |i|\n    config.vm.define &quot;riak#{i}&quot; do |riakx|\n      riakx.vm.network &quot;private_network&quot;,\n        ip: &quot;192.168.50.#{i+9}&quot;, virtualbox__intnet: &quot;riakhaskellnetwork&quot;\n      riakx.vm.provision &quot;shell&quot;, path: &quot;vagrant-files/riak-build.sh&quot;, args: &quot;192.168.50.#{i+9} 192.168.50.10&quot;\n    end\n  end\nend```\n\nEach of our vm types is defined in a `config.vm.define` block. We have `web`, `haproxy` and some `riak` nodes.\n\n### Global\n\nIn each block we define a `private_network` named `riakhaskellnetwork` and define the IP addresses for each vm. `web` is `x.x.x.2`, `haproxy` is `x.x.x.3` and the `riak` nodes autoincrement from `x.x.x.10`. (riak1 is x.x.x.10, riak2 is x.x.x.11, etc)\n\n### web\n\nOur web vm is provisioned using the shell script located in `vagrant-files/haskell-build.sh`. It’s fairly basic and just installs the `haskell-platform` and updates `cabal`.\n\n</code></pre>\n<p><code class=\"bash\" style=\"overflow-x:auto\">echo &quot;Haskell 7.6.3&quot;\napt-get update\napt-get install build-essential haskell-platform -y\ncabal update\ncabal install cabal-install```</p>\n<p>After <code>vagrant up web</code> we can <code>vagrant ssh web</code> and run <code>ghci</code> to start a Haskell interpreter.</p>\n<h3 id=\"haproxy\">haproxy</h3>\n<p>Our HAProxy vm is a little more interesting. We install <code>haproxy</code>, set the open files limit to &gt; 256000 (in this case 266000) and then we start <code>haproxy</code> with the config file <code>vagrant-files/haproxy.config</code>. Note that there are no startup scripts, so this won’t to be able to withstand <code>vagrant reload</code> without running <code>vagrant provision</code> after it.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot; style=&quot;overflow-x:auto&quot;&gt;echo &quot;Building HAProxy&quot;\napt-get update\napt-get install haproxy -y\nulimit -n 266000\nhaproxy -V -f /vagrant/vagrant-files/haproxy.config```\n\nIf we check out `vagrant-files/haproxy.config` we can see a little about what we’re doing with our load balancer:\n\n</code></pre>\n<p><code class=\"config\" style=\"overflow-x:auto\">global\nlog 192.168.50.3     local0\nlog 192.168.50.3     local1 notice\nmaxconn           256000\nchroot            /var/lib/haproxy\nuser              haproxy\ngroup             haproxy\nspread-checks     5\ndaemon\nquiet</p>\n<p>defaults\nlog               global\noption            dontlognull\noption            redispatch\noption            allbackups\nmaxconn           256000\ntimeout connect   5000</p>\n<p>backend riak_rest_backend\nmode               http\nbalance            roundrobin\noption             httpchk GET /ping\noption             httplog\nserver riak1 192.168.50.10:8098 weight 1 maxconn 1024  check\nserver riak2 192.168.50.11:8098 weight 1 maxconn 1024  check\nserver riak3 192.168.50.12:8098 weight 1 maxconn 1024  check\nserver riak4 192.168.50.13:8098 weight 1 maxconn 1024  check\nserver riak5 192.168.50.14:8098 weight 1 maxconn 1024  check</p>\n<p>frontend riak_rest\nbind               192.168.50.3:8098\nmode               http\noption             contstats\ndefault_backend    riak_rest_backend</p>\n<p>backend riak_protocol_buffer_backend\nbalance            leastconn\nmode               tcp\noption             tcpka\noption             srvtcpka\nserver riak1 192.168.50.10:8087 weight 1 maxconn 1024  check\nserver riak2 192.168.50.11:8087 weight 1 maxconn 1024  check\nserver riak3 192.168.50.12:8087 weight 1 maxconn 1024  check\nserver riak4 192.168.50.13:8087 weight 1 maxconn 1024  check\nserver riak5 192.168.50.14:8087 weight 1 maxconn 1024  check</p>\n<p>frontend riak_protocol_buffer\nbind               192.168.50.3:8087\nmode               tcp\noption             tcplog\noption             contstats\nmode               tcp\noption             tcpka\noption             srvtcpka\ndefault_backend    riak_protocol_buffer_backend```</p>\n<p>We are binding to the IP address of our vm, <code>192.168.50.3</code> and we’ve hardcoded the five node Riak cluster into our backends. We have a backend (the Riak nodes) and a frontend (webserver side) for Riak’s HTTP and Protobuf APIs.</p>\n<h3 id=\"riakx\">riakx</h3>\n<p>The Riak nodes are provisioned by <code>vagrant-files/riak-build</code>. We cycle through a list from 1 to <code>NUM_RIAK_NODES</code> (in this case, 5), and create a node for each. We pass two arguments to our shell script for each node. One is the base node IP (always x.x.x.10) and the other is the current node’s IP.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;config&quot; style=&quot;overflow-x:auto&quot;&gt;#!/bin/bash\n# $2 is base riak node IP\n# $1 is current node's IP\necho &quot;Building Riak Vagrant Node&quot;\necho $2\necho $1\nsudo apt-get update\nsudo apt-get install libssl0.9.8 default-jre -y\nwget http://s3.amazonaws.com/downloads.basho.com/riak/2.0/2.0.0pre11/ubuntu/precise/riak_2.0.0pre11-1_amd64.deb\nsudo dpkg -i riak_2.0.0pre11-1_amd64.deb\nsed -i &quot;s/127.0.0.1/$1/g&quot; /etc/riak/riak.conf\nsed -i 's/search = off/search = on/g' /etc/riak/riak.conf\nulimit -n 8192\nriak start\nif [[ &quot;$2&quot; != &quot;$1&quot; ]]\nthen\n  echo &quot;Joining Base Riak Node $2&quot;\n  riak-admin cluster join riak@$2\n  riak-admin cluster plan\n  riak-admin cluster commit\nelse\n  echo &quot;Starting Base Riak Node&quot;\nfi\necho $(riak-admin status | grep ring_members)```\n\n1. We install libssl and a JRE (because we want to run Riak Search)\n2. wget the `amd64.deb` for Riak2.0.0-pre11\n3. install the .deb\n4. Replace 127.0.0.1 with our node’s IP address\n5. Replace `search = off` with `search = on` to turn on Riak Search\n6. Set the file limit to 8192\n7. Start Riak\n8. then, if we have the base node, do nothing\n9. If we have the non-base node, we commit a cluster plan to join with the base node\n10. Finally, echo the result of `riak-admin status | grep ring_members`\n\nNote that, just like the HAProxy vm, the Riak nodes don’t have init scripts and will need a `vagrant provision` after a `vagrant reload`\n\n\n# Future Work\n\nIn the future I might include Riak CS in this configuration. In addition, it would be nice to have some init scripts to make for a more stable cluster. As it stands now, we have a pseudo-production configuration and we can examine the results of doing insane things like randomly `vagrant destroy`ing Riak nodes.\n\nNow that I think about it, a chaos monkey would be a cool addition to this setup.\n</code></pre>\n","attributes":{"title":"Riak, HAProxy and Haskell: MultiMachine Vagrant on OSX","updatedAt":"Feb 12th, 2014","publishedAt":"Feb 12th, 2014","timeToRead":5,"headerImage":null,"url":"/2014/2/12/riak-haproxy-and-haskell-multimachine-vagrant-on-osx/","canonicalURL":null,"excerpt":"","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}