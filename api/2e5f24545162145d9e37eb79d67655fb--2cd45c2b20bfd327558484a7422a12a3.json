{"data":{"root":{"post":{"body":"<p>Today I was trying to extract the minimal imports for a module using <code>ghc -ddump-minimal-imports</code> but I was getting this error on some files:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>error: missing binary operator before token <span class=\"highlight__hljs-string___1SffY\">\"(\"</span>\n<span class=\"highlight__hljs-comment___UYk12\">#if MIN_VERSION_base(4,4,0)</span>\n^\n</code></pre>\n<p>Which is related to the fact that <code>cabal</code> expands <code>MIN_VERSION_base</code> macros when\nrunning <code>cabal build</code>, so we don’t have them when running <code>ghc</code> or <code>ghci</code>.\nLuckily it’s an easy fix.</p>\n<p>Cabal generates a macros file relative to the root of the project at\n<code>dist/build/autogen/cabal_macros.h</code>. We can include this file to gain access to\nthe macros:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>ghc -ddump-minimal-imports -optP-include -optPdist/build/autogen/cabal_macros.h src/Types.hs\n</code></pre>\n<p>Which will now spit out our imports into a file called <code>Types.imports</code> and may\nlook something like this:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-keyword___som98\">import</span> Blaze.ByteString.Builder\n    ( <span class=\"highlight__hljs-type___11WfV\">Builder</span>, fromLazyByteString, fromByteString )\n<span class=\"highlight__hljs-keyword___som98\">import</span> Blaze.ByteString.Builder.Char.Utf8\n    ( fromText, fromLazyText )\n<span class=\"highlight__hljs-keyword___som98\">import</span> Control.Applicative\n    ( <span class=\"highlight__hljs-type___11WfV\">Applicative</span>((), pure), <span class=\"highlight__hljs-type___11WfV\">Alternative</span>((), empty), () )\n<span class=\"highlight__hljs-keyword___som98\">import</span> Control.Exception.Lifted\n    ( <span class=\"highlight__hljs-type___11WfV\">ErrorCall</span>(..),\n      <span class=\"highlight__hljs-type___11WfV\">Exception</span>,\n      <span class=\"highlight__hljs-type___11WfV\">Handler</span>(..),\n      <span class=\"highlight__hljs-type___11WfV\">SomeException</span>(..),\n      catch,\n      catches,\n      mask,\n      onException,\n      throwIO )\n</code></pre>\n","attributes":{"title":"GHC -ddump-minimal-imports and CPP error: missing binary operator before token \"(\"","updatedAt":"Mar 5th, 2014","publishedAt":"Mar 5th, 2014","timeToRead":1,"headerImage":null,"url":"/2014/3/5/ghc-ddump-minimal-imports-and-cpp-error-missing-binary-operator-before-token/","canonicalURL":null,"excerpt":"Today I was trying to extract the minimal imports for a module using ghc -ddump-minimal-imports but I was getting this error on some files:","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}