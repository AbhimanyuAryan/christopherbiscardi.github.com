{"data":{"root":{"post":{"body":"<p>So today I tried to write my first fully custom Emacs Lisp code. Here are some things I learned (along with the code for a <code>region-to-gist</code> function).</p>\n<p><a href=\"https://gist.github.com/anonymous/8812412\">Here</a> is my final product, uploaded straight from Emacs.</p>\n<p>The final script looks like this at the bottom of my <code>.emacs</code> file:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;lisp&quot; style=&quot;overflow-x:scroll&quot;&gt;;;; Region to Gist\n(defun region-to-gist ()\n  &quot;Sends region to Gist&quot;\n  (interactive)\n  (if (region-active-p)\n      (gist-req (buffer-substring-no-properties (region-beginning) (region-end))))\n  nil)\n\n(defun gist-test (buf)\n  (message &quot;%S&quot; `(:content ,buf)))\n\n(defun gist-req (buf)\n  (request\n       &quot;https://api.github.com/gists&quot;\n       :type &quot;POST&quot;\n       :data (json-encode `(:description &quot;Created with Christopher Biscardi's region-to-gist&quot;\n                            :public t\n                            :files (:example.el (:content ,buf))))\n       ;; :data &quot;key=value&amp;key2=value2&quot;  ; this is equivalent\n       :parser 'json-read\n       :success (function*\n                 (lambda (&amp;key data &amp;allow-other-keys)\n                   (message &quot;I sent: %S&quot; (assoc-default 'html_url data)))))\n  nil)```\n\nIt is used by setting a mark `C-SPC`, selecting a region (arrow keys work to expand the region) then typing `M-x region-to-gist`. The Function then runs and outputs either an error message (hopefully not) or this to the message buffer:\n\n`&lt;code class=&quot;bash&quot;&gt;I sent: &quot;https://gist.github.com/8812412&quot;`\n\nThe most important part here is the `(interactive)` which allows you to use `M-x region-to-gist` to execute the function. There are a couple different modes you can enable with this.\n\n`region-active-p` basically returns true if there’s a region selection (The `C-SPC` and arrows stuff).\n\n`gist-test` is a function I used to replace the `gist-req` call so I could test whether or not the region was actually being sent and resolve some formatting issues. This function can be wholly deleted with no ramifications.\n\n`buffer-substring-no-properties` returns undecorated strings from your buffers. Use this is you’re trying to handle a string (such as in JSON) and use `buffer-substring` if you’re trying to put something in the kill-ring, etc.\n\nI’m using [request.el](http://tkf.github.io/emacs-request/) to make my request. It tries to use `curl` if available.\n\nThe biggest part of the request code is the `:success` function. In this case we grab the key `html_url` from the [Gist API Response](http://developer.github.com/v3/gists/#create-a-gist)`data`.\n\nThe backtick here:\n\n</code></pre>\n<p><code class=\"haskell\">`(:description “Created with Christopher Biscardi’s region-to-gist”\n:public t\n:files (:example.el (:content ,buf)))```</p>\n<p>means we have to use the <code>,</code> for <code>,buf</code> to get the value of <code>buf</code>.</p>\n<p>Oh, and also, this function should probably be called <code>gist-region</code> as per other region functions. oops.</p>\n","attributes":{"title":"Writing A First Emacs Elisp Function","updatedAt":"Feb 4th, 2014","publishedAt":"Feb 4th, 2014","timeToRead":2,"headerImage":null,"url":"/2014/2/4/writing-a-first-emacs-elisp-function/","canonicalURL":null,"excerpt":"So today I tried to write my first fully custom Emacs Lisp code. Here are some things I learned (along with the code for a region-to-gist…","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}