{"data":{"root":{"post":{"body":"<p>Containers are surging right now. This series of blog posts will\nexplore a small corner of that universe by building a Docker Registry\nthat adheres to the <a href=\"https://github.com/docker/distribution/blob/bfa0a9c0973b5026d2e942dec29115c120e7f731/docs/spec/api.md\">Docker Registry HTTP V2 API</a>. The\ninformation contained in these posts will take a conceptual approach\nrather than a step-by-step approach. The code will be available in\nfull on GitHub, as the <a href=\"https://github.com/ChristopherBiscardi/superhuman-registry\">Superhuman Registry</a>.</p>\n<h1 id=\"intro\">Intro</h1>\n<p>For this project we’ll use Haskell as the implementation language so\nthat we can use Servant.</p>\n<blockquote>\n<p>Servant is a set of packages for declaring web APIs at the\ntype-level and then using those API specifications to:</p>\n</blockquote>\n<ul>\n<li>write servers (this part of servant can be considered a web\nframework),</li>\n<li>obtain client functions (in Haskell),</li>\n<li>generate client functions for other programming languages,</li>\n<li>generate documentation</li>\n</ul>\n<p>Servant allows us to specify everything from request bodies to Headers\nat the type level, which will help us be explicit as we explore\nManifests, Tags and Digests. Since the purpose of this set of articles\nis informative, the types will help ground our conversations.</p>\n<h1 id=\"getting-started\">Getting Started</h1>\n<p>Firstly, we’ll need a new Haskell project. <a href=\"https://www.haskellstack.org/\">Stack</a> provides\nnice templating functionality, so we’ll use that to scaffold a new\nproject.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">stack</span> new servant sr <span class=\"highlight__hljs-comment___UYk12\">--resolver nightly-2016-07-31</span>\n</code></pre>\n<p>Since we aren’t focusing on Servant itself for this series, we’ll\nskip a bunch of the boilerplate and backing code to focus in on the\nhandlers and business logic. The code for this section <em>is</em>\n<a href=\"https://github.com/ChristopherBiscardi/superhuman-registry/blob/861b20d317132d3ea43dc05cc03d507ca325d3e0/src/Lib.hs\">on GitHub</a> for those that want to investigate further.</p>\n<h2 id=\"routes\">Routes</h2>\n<p>One of the benefits of working from a spec is that there are a full\nset of routes already penned out for us to implement so we can achieve\ncompatibility with the wider ecosystem of tools, such as the Docker\nEngine.</p>\n<p>To start, we’ll translate the routes pretty loosely. Then we’ll go\nback and fill in the return types as we write each of the route\nhandlers. Translating the <a href=\"https://github.com/docker/distribution/blob/bfa0a9c0973b5026d2e942dec29115c120e7f731/docs/spec/api.md\">V2 API</a> into types looks like the\nfollowing.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Head</span> = <span class=\"highlight__hljs-type___11WfV\">Verb</span> '<span class=\"highlight__hljs-type___11WfV\">HEAD</span> 200</span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2Base</span> = \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> \"<span class=\"highlight__hljs-type___11WfV\">Docker</span>-<span class=\"highlight__hljs-type___11WfV\">Distribution</span>-<span class=\"highlight__hljs-type___11WfV\">API</span>-<span class=\"highlight__hljs-type___11WfV\">Version</span>\" <span class=\"highlight__hljs-type___11WfV\">String</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)</span>\n\n<span class=\"highlight__hljs-comment___UYk12\">-- | Main API Type</span>\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">API</span> = <span class=\"highlight__hljs-type___11WfV\">V2Base</span> :&lt;|&gt; \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">V2API</span></span>\n\n<span class=\"highlight__hljs-comment___UYk12\">-- | V2 API Definition</span>\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2API</span> = <span class=\"highlight__hljs-type___11WfV\">Metadata</span></span>\n  :&lt;|&gt; <span class=\"highlight__hljs-string___1SffY\">\"_catalog\"</span> :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Tags</span> = \"tags\" :&gt; \"list\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> </span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Metadata</span> = <span class=\"highlight__hljs-type___11WfV\">Capture</span> \"name\" <span class=\"highlight__hljs-type___11WfV\">Name</span> :&gt; (\n  <span class=\"highlight__hljs-type___11WfV\">Tags</span> :&lt;|&gt;\n  \"<span class=\"highlight__hljs-title___1fl8Q\">manifests</span>\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Manifests</span> :&lt;|&gt;\n  \"<span class=\"highlight__hljs-title___1fl8Q\">blobs</span>\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Blobs</span>\n  )</span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Blobs</span> = <span class=\"highlight__hljs-type___11WfV\">Digests</span> :&lt;|&gt; <span class=\"highlight__hljs-type___11WfV\">Upload</span></span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Manifests</span> = <span class=\"highlight__hljs-type___11WfV\">Capture</span> \"reference\" <span class=\"highlight__hljs-type___11WfV\">Ref</span> :&gt; (\n  <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Put</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Delete</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Head</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n  ) </span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Digests</span> = <span class=\"highlight__hljs-type___11WfV\">Capture</span> \"digest\" <span class=\"highlight__hljs-type___11WfV\">Digest</span> :&gt; (\n  <span class=\"highlight__hljs-type___11WfV\">Head</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Delete</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n  )</span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">Upload</span> = \"uploads\" :&gt; (\n  <span class=\"highlight__hljs-type___11WfV\">Post</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Capture</span> \"<span class=\"highlight__hljs-title___1fl8Q\">uuid</span>\" <span class=\"highlight__hljs-type___11WfV\">UUID</span> :&gt; (\n    <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n    <span class=\"highlight__hljs-type___11WfV\">Patch</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n    <span class=\"highlight__hljs-type___11WfV\">Put</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span> :&lt;|&gt;\n    <span class=\"highlight__hljs-type___11WfV\">Delete</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n    )</span>\n  )\n</code></pre>\n<p>This produces a set of routes that lay out as follows:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>/\n└─ v2/\n   ├─•\n   ┆\n   ┆\n   ├─ &lt;capture&gt;/\n   │  ├─ blobs/\n   │  │  ├─ &lt;capture&gt;/\n   │  │  │  ├─•\n   │  │  │  ┆\n   │  │  │  ├─•\n   │  │  │  ┆\n   │  │  │  └─•\n   │  │  ┆\n   │  │  └─ uploads/\n   │  │     ├─•\n   │  │     ┆\n   │  │     ┆\n   │  │     └─ &lt;capture&gt;/\n   │  │        ├─•\n   │  │        ┆\n   │  │        ├─•\n   │  │        ┆\n   │  │        ├─•\n   │  │        ┆\n   │  │        └─•\n   │  ├─ manifests/\n   │  │  └─ &lt;capture&gt;/\n   │  │     ├─•\n   │  │     ┆\n   │  │     ├─•\n   │  │     ┆\n   │  │     ├─•\n   │  │     ┆\n   │  │     └─•\n   │  └─ tags/\n   │     └─ list/\n   │        └─•\n   ┆\n   └─ _catalog/\n      └─•\n</code></pre>\n<p>This matches up with the spec quite well and gives us a nice base to\nstart writing more specific code without worrying about whether we’ll\nmiss a route.</p>\n<h2 id=\"the-types\">The Types</h2>\n<p>If we take a closer look at the types we just wrote out we see a bunch\nof concepts including <code>Name</code>, <code>Tags</code>, <code>Manifests</code>, <code>Blobs</code>, and\n<code>Digests</code>. Interestingly, we don’t see an <code>Image</code> or <code>Container</code>\nanywhere.</p>\n<h3 id=\"name\">Name</h3>\n<p>We use <code>Name</code> to represent an repository name. <code>Name</code>s must adhere to\na specific regex (<code>[a-z0-9]+(?:[._-][a-z0-9]+)*</code>) and be less than 256\ncharacters. In plain english from the spec:</p>\n<blockquote>\n<p>A repository name is broken up into path components. A component of\na repository name must be at least one lowercase, alpha-numeric\ncharacters, optionally separated by periods, dashes or\nunderscores.</p>\n</blockquote>\n<h3 id=\"tags\">Tags</h3>\n<p><code>Tags</code> are strings that reference images. For example, if we were\nusing <code>debian</code> and wanted to only use the tag <code>jessie</code>, we could pull\nusing the format <code>debian:jessie</code>.</p>\n<h3 id=\"manifests\">Manifests</h3>\n<p>An image manifest provides a configuration and a set of\nlayers for a container image. It looks like the following JSON:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>{\n    <span class=\"highlight__hljs-string___1SffY\">\"schemaVersion\"</span>: <span class=\"highlight__hljs-number___2gmaH\">2</span>,\n    <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,\n    <span class=\"highlight__hljs-string___1SffY\">\"config\"</span>: {\n        <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.container.image.v1+json\"</span>,\n        <span class=\"highlight__hljs-string___1SffY\">\"size\"</span>: <span class=\"highlight__hljs-number___2gmaH\">7023</span>,\n        <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7\"</span>\n    },\n    <span class=\"highlight__hljs-string___1SffY\">\"layers\"</span>: [\n        {\n            <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"size\"</span>: <span class=\"highlight__hljs-number___2gmaH\">32654</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f\"</span>\n        },\n        {\n            <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"size\"</span>: <span class=\"highlight__hljs-number___2gmaH\">16724</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b\"</span>\n        },\n        {\n            <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"size\"</span>: <span class=\"highlight__hljs-number___2gmaH\">73109</span>,\n            <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736\"</span>\n        }\n    ],\n}\n</code></pre>\n<h3 id=\"blobs-digests\">Blobs &amp; Digests</h3>\n<p>Layers are stored in the blob portion of the registry, keyed by\ndigest.</p>\n<h2 id=\"our-first-handler\">Our First Handler</h2>\n<p>The first route we’ll look at implementing is also the most\nsimple. It’s the route that lets clients know that this registry\nimplements the V2 APIs.</p>\n<p>The type of the <code>/v2</code> route is</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2Base</span> = \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> \"<span class=\"highlight__hljs-type___11WfV\">Docker</span>-<span class=\"highlight__hljs-type___11WfV\">Distribution</span>-<span class=\"highlight__hljs-type___11WfV\">API</span>-<span class=\"highlight__hljs-type___11WfV\">Version</span>\" <span class=\"highlight__hljs-type___11WfV\">String</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)</span>\n</code></pre>\n<p>Which breaks down to a <code>GET</code> request with an <code>application/json</code>\ncontent type. The response has a single header,\n<code>Docker-Distribution-API-Version</code>, which is what lets a client know\nwhich API version our registry implements. We also send back no body\ncontent. Finally, we can dig a bit deeper into <code>Get</code>, which is a type\nalias for <code>Verb 'GET 200</code>. This tells us that a successful response\nwill have a 200 code.</p>\n<p>The only other valid codes for this route <code>401 Unauthorized</code> and <code>429 Too Many Requests</code> but since we haven’t implemented authorization or\nrate-limiting, we’ll skip that for now.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">v2</span> :: <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[<span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Distribution-API-Version\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">v2</span> = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  $(logTM) <span class=\"highlight__hljs-type___11WfV\">InfoS</span> <span class=\"highlight__hljs-string___1SffY\">\"registry/2.0\"</span>\n  return $ addHeader <span class=\"highlight__hljs-string___1SffY\">\"registry/2.0\"</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>Our logging is pretty basic right now. We’ll worry about bulking it up\nlater. For now, we’re going to leave the default Katip stdout which\nleaves us with time, loglevel, hostname (container id), thread id and\nsource location:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>[2016-08-08 21:47:50][superhuman-registry][Info][85f79bec070f][33][ThreadId 11][sr-0.1.0.0-61fGnb6tOFbKD5fzBNSxKr:Lib src/Lib.hs:63:5] registry/2.0\n</code></pre>\n<h1 id=\"dealing-with-layers\">Dealing with Layers</h1>\n<p>The primary purpose of a Registry is to store layers and manifests so\na client (such as a Docker Engine) can pull images. We’ll avoid\nsupporting legacy versions of the registry for security and simplicity\nreasons, which means our registry will only work for docker 1.10 and\nabove. Benefits of this include not having to rewrite v2 manifests\ninto the v1 format.</p>\n<h2 id=\"docker-client\">Docker Client</h2>\n<p>We need to figure out what the docker is doing on a push. Since I’m\nrunning Docker for Mac, booting a server to act as a registry is\npretty simple. We’ll use <code>nc</code> for a first attempt.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker run -itp 9000:9000 alpine nc -l 9000\n</code></pre>\n<p>Now that we have a server acting as a “registry”, we need to tag and\npush an image to it.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&gt; docker tag hello-world localhost:9000/hello-world\n&gt; docker push localhost:9000/hello-world\nThe push refers to a repository [localhost:9000/hello-world]\nPut http://localhost:9000/v1/repositories/hello-world/: EOF\n</code></pre>\n<p>Great! Our server is listening and the engine is pushing to the right\nplace. If it wasn’t, we could’ve seen something like this:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>Put http://localhost:9000/v1/repositories/hello-world/: read tcp\n[::1]:56492-&gt;[::1]:9000: read: connection reset by peer\n</code></pre>\n<p>There’s a problem though, <code>nc</code> doesn’t implement the <code>/v2/</code> endpoint,\nso the docker client falls back to v1 of the api. Luckily, we’ve\nimplemented the v2 endpoint already so we’ll skip netcat and jump back\ninto Haskell.</p>\n<p>We can use <code>Wai.Middleware.RequestLogger</code> to log out everything docker\ntries to do to our registry. Using docker-compose to boot up our\nregistry and re-attempting the push yields:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>api_1  | GET /v2/\napi_1  |   Accept:\napi_1  |   Status: 200 OK 0.000190373s\napi_1  | Prelude.undefined\napi_1  | CallStack (from HasCallStack):\napi_1  |   error, called at libraries/base/GHC/Err.hs:79:14 in base:GHC.Err\napi_1  |   undefined, called at src/SR/Blobs.hs:26:14 in sr-0.1.0.0-5isXdkrmBvbJTFdJY734op:SR.Blobs\napi_1  | Prelude.undefined\napi_1  | CallStack (from HasCallStack):\napi_1  |   error, called at libraries/base/GHC/Err.hs:79:14 in base:GHC.Err\napi_1  |   undefined, called at src/SR/Blobs.hs:26:14 in sr-0.1.0.0-5isXdkrmBvbJTFdJY734op:SR.Blobs\n</code></pre>\n<p>From the information, we see that the <code>/v2/</code> route is working as\nexpected, but we hit <code>undefined</code> at <code>src/SR/Blobs.hs:26:14</code>, which is\ntotally expected because we haven’t implemented <code>uploadBlob</code>\nyet. Notice that the engine retries the upload request.</p>\n<p>If the route didn’t exist, we would have seen a 404 in the logs.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>api_1  | GET /v2/\napi_1  |   Accept:\napi_1  |   Status: 200 OK 0.011277359s\napi_1  | POST /v2/hello-world/blobs/uploads/\napi_1  |   Accept:\napi_1  |   Status: 404 Not Found 0.000028066s\n</code></pre>\n<p>This matches with what we know about the\n<a href=\"https://github.com/docker/distribution/blob/dea554fc7cce2f2e7af5b1e1d38e28c5e96e1d9e/docs/spec/api.md#starting-an-upload\">upload process</a>.</p>\n<h2 id=\"uploadblob\">uploadBlob</h2>\n<p>We can throw a couple print statements in to replace the undefined as\nsuch:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">uploadBlob</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n<span class=\"highlight__hljs-title___1fl8Q\">uploadBlob</span> namespace' name' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  liftIO $ print namespace'\n  liftIO $ print name'\n  return <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>Which will yield us some progress when trying to push.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>api_1  | GET /v2/\napi_1  |   Accept:\napi_1  |   Status: 200 OK 0.004299263s\napi_1  | Namespace &quot;lib&quot;\napi_1  | Name &quot;hello-world&quot;\napi_1  | POST /v2/lib/hello-world/blobs/uploads/\napi_1  |   Accept:\napi_1  |   Status: 200 OK 0.000105174s\n</code></pre>\n<p>This is good progress, but we clearly have some issues since the\ndocker engine is still retrying the endpoint.</p>\n<p>There are two approaches to blob upload\n<a href=\"https://github.com/docker/distribution/blob/b1b100cf011b037b8821e8d0ae4f5ab3e2222c48/docs/spec/api.md#initiate-monolithic-blob-upload\">monolithic</a> and\n<a href=\"https://github.com/docker/distribution/blob/b1b100cf011b037b8821e8d0ae4f5ab3e2222c48/docs/spec/api.md#initiate-resumable-blob-upload\">resumeable</a>. The docs for\n<code>/v2/&lt;name&gt;/blobs/uploads</code> detail that the digest query param is the\ndifferentiator between monolithic and resumable upload.</p>\n<blockquote>\n<p>Initiate a resumable blob upload. If successful, an upload location\nwill be provided to complete the upload. Optionally, if the digest\nparameter is present, the request body will be used to complete the\nupload in a single request.</p>\n</blockquote>\n<p>Let’s take a look at an implementation for the <code>uploadBlob</code>\n(<code>&lt;&gt;/blobs/uploads</code>) route. We modifiy the type to reflect the various\nheaders and response codes (docker engine is a picky client). All of\nthe relevant information is communicated through headers, so we return\n<code>NoContent</code> as well. <code>PostAccepted</code> is a shortcut for <code>202</code> responses.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">PostAccepted</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Location\"</span> <span class=\"highlight__hljs-type___11WfV\">URI</span>,\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Range\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>,\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Upload-UUID\"</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n</code></pre>\n<p>Now the handler code. We generate a new uuid to send back in the\nresponse. Our first go is just trying to get the docker client to\ncontinue to the next request but in the future we should do something\nwith the uuid so we can respond to status requests. <code>uploadAPI</code> might\nlook scary, but it’s just specifying the route we want to generate for\nthe <code>Location</code> header. We do this so that Servant will automatically\ncheck that the route is valid for the <code>api</code> we are serving and we get\na compile error if it doesn’t typecheck.</p>\n<p>We add 3 headers, setting the Range to <code>&quot;0-0&quot;</code> because we are only\nresponding to resumable upload requests for now. (Otherwise we’d have\nto handle the case of an extra query string parameter). Once we\ngenerate the <code>Location</code> and the <code>Docker-Upload-UUID</code>, we send them\nback so the docker engine can start uploading blobs at the specified\n<code>Location</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">uploadBlob</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Location\"</span> <span class=\"highlight__hljs-type___11WfV\">URI</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Range\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Upload-UUID\"</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">uploadBlob</span> namespace' name' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  uuid &lt;- liftIO $ nextRandom\n  <span class=\"highlight__hljs-keyword___som98\">let</span> uploadAPI = <span class=\"highlight__hljs-type___11WfV\">Proxy</span> :: <span class=\"highlight__hljs-type___11WfV\">Proxy</span> (<span class=\"highlight__hljs-string___1SffY\">\"v2\"</span> :&gt; <span class=\"highlight__hljs-type___11WfV\">Capture</span> <span class=\"highlight__hljs-string___1SffY\">\"namespace\"</span> <span class=\"highlight__hljs-type___11WfV\">Namespace</span> :&gt; <span class=\"highlight__hljs-type___11WfV\">Capture</span> <span class=\"highlight__hljs-string___1SffY\">\"name\"</span> <span class=\"highlight__hljs-type___11WfV\">Name</span> :&gt; <span class=\"highlight__hljs-string___1SffY\">\"blobs\"</span> :&gt; <span class=\"highlight__hljs-string___1SffY\">\"uploads\"</span> :&gt; <span class=\"highlight__hljs-type___11WfV\">Capture</span> <span class=\"highlight__hljs-string___1SffY\">\"uuid\"</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span> :&gt; <span class=\"highlight__hljs-type___11WfV\">Put</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n      mkURI = safeLink api uploadAPI\n      uri = mkURI namespace' name' uuid\n      response = addHeader uri\n        $ addHeader <span class=\"highlight__hljs-string___1SffY\">\"0-0\"</span>\n        $ addHeader uuid <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n  $(logTM) <span class=\"highlight__hljs-type___11WfV\">InfoS</span> (logStr $ show $ getHeaders response)\n  return response\n</code></pre>\n<p>We also need a couple instances which allow us to render types like\n<code>UUID</code> into path components and headers. (note: these are orphan\ninstances, but we could fix that by using a newtype and declaring the\ninstances for the newtypes instead).</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">FromHttpApiData</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  parseUrlPiece text = <span class=\"highlight__hljs-keyword___som98\">case</span> (fromText text) <span class=\"highlight__hljs-keyword___som98\">of</span>\n    <span class=\"highlight__hljs-type___11WfV\">Nothing</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">Left</span> $ <span class=\"highlight__hljs-type___11WfV\">T</span>.append <span class=\"highlight__hljs-string___1SffY\">\"Invalid UUID\"</span> text\n    <span class=\"highlight__hljs-type___11WfV\">Just</span> uuid -&gt; <span class=\"highlight__hljs-type___11WfV\">Right</span> uuid\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">ToByteString</span> <span class=\"highlight__hljs-type___11WfV\">URI</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  builder = lazyByteString . pack . show\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">ToHttpApiData</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  toUrlPiece = toText\n  toHeader = toASCIIBytes\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">ToByteString</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  builder = lazyByteString . toLazyASCIIBytes\n</code></pre>\n<p>We push again to test the route</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker push localhost:9000/lib/hello-world\n</code></pre>\n<p>And voilà, we get the desired effect. The docker engine accepts the\nUUID and tries to upload blobs to <code>PATCH /v2/lib/hello-world/blobs/uploads/v2/lib/hello-world/blobs/uploads/aeab6f5e-4b80-4c7b-9027-616b1cbe6a55</code>. That’s\ntotally not the right URI though. We’ve accidentally used a relative\nURI in our <code>Location</code> header. We’ll fix that though 😃</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>GET /v2/\n  Accept:\n  Status: 200 OK 0.000458567s\n[2016-08-30 18:12:49][superhuman-registry][Info][b4fa86e02706][6258][ThreadId 15][sr-0.1.0.0-4uXdy03mbpG98AEB4xHfiO:SR.Blobs src/SR/Blobs.hs:47:5] [(&quot;Location&quot;,&quot;v2/lib/hello-world/blobs/uploads/aeab6f5e-4b80-4c7b-9027-616b1cbe6a55&quot;),(&quot;Range&quot;,&quot;0-0&quot;),(&quot;Docker-Upload-UUID&quot;,&quot;aeab6f5e-4b80-4c7b-9027-616b1cbe6a55&quot;)]\nPOST /v2/lib/hello-world/blobs/uploads/\n  Accept:\n  Status: 202 Accepted 0.000303745s\nPATCH /v2/lib/hello-world/blobs/uploads/v2/lib/hello-world/blobs/uploads/aeab6f5e-4b80-4c7b-9027-616b1cbe6a55\n  Accept:\n  Status: 404 Not Found 0.000041239s\n</code></pre>\n<h2 id=\"patchblob\">patchBlob</h2>\n<p>The <a href=\"https://github.com/docker/distribution/blob/41f383fb9a3b4e3ff428a92db4f7836f8053058b/docs/spec/api.md#patch-blob-upload\">next route</a>, as shown in the logs above, is\nthe <code>PATCH</code> to the <code>Location</code> header we sent back down. The type for\nthe <code>PATCH</code> route changes to:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">ReqBody</span> '[<span class=\"highlight__hljs-type___11WfV\">OctetStream</span>] <span class=\"highlight__hljs-type___11WfV\">ByteString</span> :&gt;\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"range\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span> :&gt;\n  <span class=\"highlight__hljs-type___11WfV\">PatchNoContent</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Location\"</span> <span class=\"highlight__hljs-type___11WfV\">URI</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Range\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Upload-UUID\"</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n</code></pre>\n<p>We need to accept and echo back the <code>Range</code> header, while the request\nbody comes in as an <code>OctetStream</code>. We take this information and just\nwrite out the <code>OctetStream</code> to a file for now.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">patchBlob</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n          -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n          -&gt; <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n          -&gt; <span class=\"highlight__hljs-type___11WfV\">ByteString</span>\n          -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">String</span>\n          -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Location\"</span> <span class=\"highlight__hljs-type___11WfV\">URI</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Range\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Upload-UUID\"</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">patchBlob</span> namespace' name' uuid' blob range' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  liftIO $ <span class=\"highlight__hljs-type___11WfV\">Data</span>.<span class=\"highlight__hljs-type___11WfV\">ByteString</span>.writeFile (<span class=\"highlight__hljs-string___1SffY\">\"./tmp/\"</span> ++ toString uuid') blob\n  response &lt;- mkHeaders range' uuid' namespace' name'\n  return response\n</code></pre>\n<p>With this code (and another upload attempt from the engine), we can\nsee that the next request is a <code>PUT</code>, which indicates the last request\nfor this layer.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>GET /v2/\n  Accept:\n  Status: 200 OK 0.005978465s\n[2016-09-03 20:21:39][superhuman-registry][Info][b4fa86e02706][130][ThreadId 14][sr-0.1.0.0-7Q5s7SCyVcbA5o0UAD7J0W:SR.Blobs src/SR/Blobs.hs:74:5] [(&quot;Location&quot;,&quot;http://localhost:9000/v2/lib/hello-world/blobs/uploads/f525cc29-b588-417b-aac2-85c5752ce07b&quot;),(&quot;Range&quot;,&quot;0-0&quot;),(&quot;Docker-Upload-UUID&quot;,&quot;f525cc29-b588-417b-aac2-85c5752ce07b&quot;)]\nPOST /v2/lib/hello-world/blobs/uploads/\n  Accept:\n  Status: 202 Accepted 0.000442272s\nPATCH /v2/lib/hello-world/blobs/uploads/f525cc29-b588-417b-aac2-85c5752ce07b\n  Accept:\n  Status: 204 No Content 0.012519558s\nPUT /v2/lib/hello-world/blobs/uploads/f525cc29-b588-417b-aac2-85c5752ce07b\n  Params: [(&quot;digest&quot;,&quot;sha256:a9d36faac0fe2a855f798346f33bd48917bf3af9b6e4b77870ef8862fee8a8a3&quot;)]\n  Accept:\n  Status: 200 OK 0.000077408s\n</code></pre>\n<h2 id=\"putblob\">putBlob</h2>\n<p>After <code>PATCH</code>s finish flowing in, the client sends a <code>PUT</code> request\nwith the digest and potentially any final layer content. Note that at\nthis point, we have not implemented any append functionality so our\n<code>PATCH</code> endpoint will only work for small layers. Likewise, our <code>PUT</code>\nand the <code>HEAD</code> that comes after it will be very minimal, omitting\ncritical functionality. This is so that we can get through all of the\nrequests and confirm a full upload flow.</p>\n<p>The <code>Digest</code> for a layer is a sha256 hash as such:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\n</code></pre>\n<p>Our handler will just emit <code>NoContent</code> so we can skip the validation\ncode and get on with groking the entire request flow.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">putBlob</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n<span class=\"highlight__hljs-title___1fl8Q\">putBlob</span> namespace' name' uuid' digest' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  <span class=\"highlight__hljs-keyword___som98\">case</span> digest' <span class=\"highlight__hljs-keyword___som98\">of</span>\n    <span class=\"highlight__hljs-type___11WfV\">Nothing</span> -&gt; return <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n    <span class=\"highlight__hljs-type___11WfV\">Just</span> a -&gt; return <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<h2 id=\"headdigest\">headDigest</h2>\n<p>This is getting familiar, so we will move on to a minimal <code>HEAD</code> which\nis a request to check to see if a particular layer (identified by\n<code>Digest</code>) has been uploaded. Our version responds “yes” to every\nsingle <code>HEAD</code> request, indicating that the layer exists in the\nregistry already. Luckily for us the Docker client doesn’t seem to\nvalidate the <code>Content-Length</code> header which means we can just echo the\n<code>Digest</code> back in a header and call it done.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">headDigest</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Content-Length\"</span> <span class=\"highlight__hljs-type___11WfV\">Int</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Content-Digest\"</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n    ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">headDigest</span> namespace' name' digest' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  return $ addHeader <span class=\"highlight__hljs-number___2gmaH\">0</span>\n         $ addHeader digest' <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<h2 id=\"putmanifest\">putManifest</h2>\n<p>With the rest of the pieces in place, we receive a <code>PUT</code> to upload the\n<code>Manifest</code> for an image. When uploading the <code>Manifest</code> for an image,\nit is interesting to note that this is the first reference to a <code>Tag</code>\nthat we have seen so far. In this case, it is <code>latest</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>PUT /v2/lib/hello-world/manifests/latest\n</code></pre>\n<p>It is also interesting to remind ourselves that <code>docker pull</code> works if\nwe use the sha256 hash of the <code>Manifest</code>. To see this in action let’s\ngrab the sha for <code>hello-world</code>, which we’ve been using to test our\nregistry.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&gt; docker inspect <span class=\"hljs-_\">-f</span> <span class=\"highlight__hljs-string___1SffY\">\"{{ .RepoDigests}}\"</span> hello-world\n[hello-world@sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9]\n&gt; docker pull hello-world@sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9\nsha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9: Pulling from library/hello-world\nDigest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9\nStatus: Image is up to date <span class=\"highlight__hljs-keyword___som98\">for</span> hello-world@sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9\n</code></pre>\n<p>This is useful because a <code>Reference</code>, which is the final path segment\nin the <code>PUT</code> URL, can be a <code>Digest</code> OR a <code>Tag</code>. We need to know this\nbecause the response headers need the <code>Digest</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>201 Created\nLocation: &lt;url&gt;\nContent-Length: 0\nDocker-Content-Digest: &lt;digest&gt;\n</code></pre>\n<h3 id=\"manifests\">Manifests</h3>\n<p>The <code>Manifest</code> for <code>hello-world</code> is a\n<a href=\"https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md#image-manifest-field-descriptions\">v2+json</a>\nstyle manifest. The other major option for us is going to be a\nManifest List, aka a Fat Manifest. Our <code>Manifest</code> looks as the\nfollowing, with a single layer.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>{\n   <span class=\"highlight__hljs-string___1SffY\">\"schemaVersion\"</span>: <span class=\"highlight__hljs-number___2gmaH\">2</span>,\n   <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,\n   <span class=\"highlight__hljs-string___1SffY\">\"config\"</span>: {\n      <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.container.image.v1+json\"</span>,\n      <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:c54a2cc56cbb2f04003c1cd4507e118af7c0d340fe7e2720f70976c4b75237dc\"</span>\n   },\n   <span class=\"highlight__hljs-string___1SffY\">\"layers\"</span>: [\n      {\n         <span class=\"highlight__hljs-string___1SffY\">\"mediaType\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,\n         <span class=\"highlight__hljs-string___1SffY\">\"size\"</span>: <span class=\"highlight__hljs-number___2gmaH\">1</span>,\n         <span class=\"highlight__hljs-string___1SffY\">\"digest\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"sha256:c04b14da8d1441880ed3fe6106fb2cc6fa1c9661846ac0266b8a5ec8edf37b7c\"</span>\n      }\n   ]\n}\n</code></pre>\n<p>We can parse the above <code>Manifest</code> JSON into the following Haskell\ndatatype. In the future we can also do digest validation for each\ndigest in the manifest.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">V2_2</span> {\n  schemaVersion = <span class=\"highlight__hljs-number___2gmaH\">2</span>,\n  mediaType = <span class=\"highlight__hljs-type___11WfV\">Manifest_V2_JSON</span>,\n  config = <span class=\"highlight__hljs-type___11WfV\">Config</span> {\n      cMediaType = <span class=\"highlight__hljs-type___11WfV\">V1_JSON</span>,\n      cSize = <span class=\"highlight__hljs-number___2gmaH\">7023</span>,\n      cDigest = <span class=\"highlight__hljs-string___1SffY\">\"sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7\"</span>\n      },\n  layers = [\n      <span class=\"highlight__hljs-type___11WfV\">Layer</span> {\n          lMediaType = <span class=\"highlight__hljs-type___11WfV\">Diff</span>,\n          lSize = <span class=\"highlight__hljs-number___2gmaH\">32654</span>,\n          lDigest = <span class=\"highlight__hljs-string___1SffY\">\"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f\"</span>,\n          lUrls = <span class=\"highlight__hljs-type___11WfV\">Nothing</span>\n          },\n      <span class=\"highlight__hljs-type___11WfV\">Layer</span> {\n          lMediaType = <span class=\"highlight__hljs-type___11WfV\">Diff</span>,\n          lSize = <span class=\"highlight__hljs-number___2gmaH\">16724</span>,\n          lDigest = <span class=\"highlight__hljs-string___1SffY\">\"sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b\"</span>,\n          lUrls = <span class=\"highlight__hljs-type___11WfV\">Nothing</span>\n          },\n      <span class=\"highlight__hljs-type___11WfV\">Layer</span> {\n          lMediaType = <span class=\"highlight__hljs-type___11WfV\">Diff</span>,\n          lSize = <span class=\"highlight__hljs-number___2gmaH\">73109</span>,\n          lDigest = <span class=\"highlight__hljs-string___1SffY\">\"sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736\"</span>,\n          lUrls = <span class=\"highlight__hljs-type___11WfV\">Nothing</span>\n          }\n      ]\n  }\n</code></pre>\n<p>For us, it is important to note how the mechanics behind backward\ncompatibility work.</p>\n<blockquote>\n<p>When pushing images, clients which support the new manifest format\nshould first construct a manifest in the new format.</p>\n</blockquote>\n<p>Which is great for us because that means we only have to code support\nfor v2 manifests and compatible clients will behave appropriately.</p>\n<h3 id=\"implementing-the-handler\">Implementing the Handler</h3>\n<p>At this point, it’s useful to set up a proxy. After doing that, we can\nlog out arbitrary parts of the requests/responses to find the\nfollowing headers coming from the docker engine request to <code>putManifest</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>{\n  <span class=\"highlight__hljs-string___1SffY\">\"connection\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"close\"</span>,\n  <span class=\"highlight__hljs-string___1SffY\">\"accept-encoding\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"gzip\"</span>,\n  <span class=\"highlight__hljs-string___1SffY\">\"content-type\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,\n  <span class=\"highlight__hljs-string___1SffY\">\"content-length\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"482\"</span>,\n  <span class=\"highlight__hljs-string___1SffY\">\"user-agent\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"docker/1.12.1 go/go1.6.3 git-commit/23cf638 kernel/4.4.20-moby os/linux arch/amd64 UpstreamClient(Docker-Client/1.12.1 \\\\(darwin\\\\))\"</span>,\n  <span class=\"highlight__hljs-string___1SffY\">\"host\"</span>: <span class=\"highlight__hljs-string___1SffY\">\"localhost:8000\"</span>\n}\n</code></pre>\n<p>The one we <em>really</em> care about is the <code>Content-Type</code> header. The\nrequest identifies the type of <code>Manifest</code> based on the <code>Content-Type</code>,\nso we can easily handle different <code>Manifest</code> content. To add support\nfor the <code>vnd.docker.distribution.manifest.v2+json</code> <code>Content-Type</code>, we\ncan write the implementation for a new Servant <code>Content-Type</code>.</p>\n<p><a href=\"/servant-custom-content-types/\">Read More on Custom Content-Types</a></p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">data</span> <span class=\"highlight__hljs-type___11WfV\">HashedJSON</span> = <span class=\"highlight__hljs-type___11WfV\">HashedJSON</span> <span class=\"highlight__hljs-type___11WfV\">String</span></span>\n<span class=\"highlight__hljs-class___mOeOV\">\n<span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">Accept</span> <span class=\"highlight__hljs-type___11WfV\">HashedJSON</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  contentType _ = <span class=\"highlight__hljs-string___1SffY\">\"application\"</span> // <span class=\"highlight__hljs-string___1SffY\">\"vnd.docker.distribution.manifest.v2+json\"</span>\n<span class=\"highlight__hljs-class___mOeOV\">\n<span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">FromJSON</span> a =&gt; <span class=\"highlight__hljs-type___11WfV\">MimeUnrender</span> <span class=\"highlight__hljs-type___11WfV\">HashedJSON</span> (<span class=\"highlight__hljs-type___11WfV\">Digest</span> <span class=\"highlight__hljs-type___11WfV\">SHA256</span>, <span class=\"highlight__hljs-title___1fl8Q\">a</span>) <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n   mimeUnrender _ bs = <span class=\"highlight__hljs-keyword___som98\">case</span> eitherDecodeLenient bs <span class=\"highlight__hljs-keyword___som98\">of</span>\n     <span class=\"highlight__hljs-type___11WfV\">Left</span> err -&gt; <span class=\"highlight__hljs-type___11WfV\">Left</span> err\n     <span class=\"highlight__hljs-type___11WfV\">Right</span> val -&gt; <span class=\"highlight__hljs-type___11WfV\">Right</span> (mkLazyDigest bs, val)\n</code></pre>\n<p>Note that we have also included the ability to hash the incoming\ncontent with this <code>Content-Type</code>. This means our handlers don’t have\nto worry about dealing with hashing.</p>\n<p>Our route with the new <code>Content-Type</code> looks like the following, where\n<code>CH</code> comes from the <a href=\"https://hackage.haskell.org/package/cryptonite\">cryptonite</a> package. The request body\nis specified as a tuple of <code>(Digest, Manfiest)</code> which comes from the\n<code>HashedJSON</code> <code>Content-Type</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>  <span class=\"highlight__hljs-type___11WfV\">ReqBody</span> '[<span class=\"highlight__hljs-type___11WfV\">HashedJSON</span>] (<span class=\"highlight__hljs-type___11WfV\">CH</span>.<span class=\"highlight__hljs-type___11WfV\">Digest</span> <span class=\"highlight__hljs-type___11WfV\">CH</span>.<span class=\"highlight__hljs-type___11WfV\">SHA256</span>, <span class=\"highlight__hljs-type___11WfV\">Manifest</span>) :&gt;\n    <span class=\"highlight__hljs-type___11WfV\">PutCreated</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n      <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Content-Length\"</span> <span class=\"highlight__hljs-type___11WfV\">Int</span>,\n      <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Content-Digest\"</span> <span class=\"highlight__hljs-type___11WfV\">CDigest</span>\n      ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n</code></pre>\n<p>We are still doing as little work as possible in the handler.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">putManifest</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n            -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n            -&gt; <span class=\"highlight__hljs-type___11WfV\">Ref</span>\n            -&gt; (<span class=\"highlight__hljs-type___11WfV\">CH</span>.<span class=\"highlight__hljs-type___11WfV\">Digest</span> <span class=\"highlight__hljs-type___11WfV\">CH</span>.<span class=\"highlight__hljs-type___11WfV\">SHA256</span>, <span class=\"highlight__hljs-type___11WfV\">Manifest</span>)\n            -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Content-Length\"</span> <span class=\"highlight__hljs-type___11WfV\">Int</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Content-Digest\"</span> <span class=\"highlight__hljs-type___11WfV\">CDigest</span>\n    ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">putManifest</span> namespace' name ref' (digest, manifest) = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  liftIO $ print <span class=\"highlight__hljs-string___1SffY\">\"putManifest\"</span>\n  liftIO $ print digest\n  return $ addHeader <span class=\"highlight__hljs-number___2gmaH\">0</span>\n         $ addHeader (<span class=\"highlight__hljs-type___11WfV\">CDigest</span> digest) <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>Success!</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&quot;putManifest&quot;\n6741f4d4187d8b5bcdf338c6a8dbbef12604e31211b3f57e4873f623f64dba80\nPUT /v2/biscarch/hello-world/manifests/latest\n  Request Body: {\n   &quot;schemaVersion&quot;: 2,\n   &quot;mediaType&quot;: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;,\n   &quot;config&quot;: {\n      &quot;mediaType&quot;: &quot;application/vnd.docker.container.image.v1+json&quot;,\n      &quot;digest&quot;: &quot;sha256:c54a2cc56cbb2f04003c1cd4507e118af7c0d340fe7e2720f70976c4b75237dc&quot;\n   },\n   &quot;layers&quot;: [\n      {\n         &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,\n         &quot;digest&quot;: &quot;sha256:c04b14da8d1441880ed3fe6106fb2cc6fa1c9661846ac0266b8a5ec8edf37b7c&quot;\n      }\n   ]\n}\n  Accept:\n  Status: 201 Created 0.000758785s\n</code></pre>\n<hr>\n<h1 id=\"a-gadt-rises\">A GADT Rises</h1>\n<p>Now that we have a fully “working” image upload (at least, the docker\nengine is convinced we handled everything correctly), we have two ways\nforward.</p>\n<ol>\n<li>Truly implement <code>push</code> compatibility complete with resumable\nupload, etc.</li>\n<li>Execute the same “as little as possible” process to complete a\n<code>docker pull</code>.</li>\n</ol>\n<p>Since we eventually we want to support multiple backends, Option 1\nwill have to happen in the future. To do this, we would start off with\na GADT that defines the various operations that need to be implemented\nfor a new backend.</p>\n<p>To refresh, here is the list of handlers we need to implement for\n<code>push</code> compatibility.</p>\n<ul>\n<li>uploadBlob</li>\n<li>patchBlob</li>\n<li>putBlob</li>\n<li>headDigest</li>\n<li>putManifest</li>\n</ul>\n<p>What we want in the end is a Generalized Algebraic Data Type that\ndefines what it means to be a <code>RegistryBackend</code>. An example\ndeclaration for the <code>uploadBlob</code> functionality shows that a compliant\nbackend would need to declare a function which too a <code>RepoName</code>,\n<code>UUID</code>, <code>Maybe Digest</code> and returned an <code>Either UploadError NoContent</code>. We would use <code>UploadError</code> to restrict the types of errors\nwhich come back so we can communicate with exists clients such as the\nDocker engine.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-type___11WfV\">RegistryBackend</span> b <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  uploadBlob :: b\n             -&gt; <span class=\"highlight__hljs-type___11WfV\">RepoName</span>\n             -&gt; <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n             -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n             -&gt; <span class=\"highlight__hljs-type___11WfV\">Either</span> <span class=\"highlight__hljs-type___11WfV\">UploadError</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n  ...\n</code></pre>\n<p>This involves a couple of pieces including changing our handler types\nfrom the following (which uses <code>App</code> directly).</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">putBlob</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>to something more general. Possibly just a <code>HasRegistryBackend</code>\nconstraint on the monad (<code>App</code> is also a monad).</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">putBlob</span> :: ( <span class=\"highlight__hljs-type___11WfV\">KatipContext</span> m, <span class=\"highlight__hljs-type___11WfV\">RegistryBackend</span> m )\n        =&gt; <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n        -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n        -&gt; m <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>This would allow us to move configuration of the server into the\nexecutables while still allowing the library to provide guarentees\nabout what it needs to be able to function. In effect, allowing us to\nbuild binaries that target Postgres, File Systems, and other\ninteresting data stores.</p>\n<p>We will keep this in mind as we move forward with a concrete\nimplementation based on Postgres. This concrete implementation will\ninform us as to which abstractions make sense. An interesting choice\nfor the second store implementation would be something without\ntransactions and different consistency guarentees such as S3 or a KV\nstore.</p>\n<h1 id=\"postgres-uploadblob\">Postgres uploadBlob</h1>\n<p>Since we now need a “real” backend, we’ll spin up Postgres using\n<a href=\"http://sqitch.org/\">sqitch</a> for migrations. The official Postgres image allows us\nto use a shell script to initialize the db so all we need to do in\naddition is install sqitch:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>FROM postgres\n\nRUN apt-get update &amp;&amp; apt-get install sqitch -y\n\nCOPY . /opt/sqitch\nWORKDIR /opt/sqitch\n\nCOPY ./initdb.sh /docker-entrypoint-initdb.d/initdb.sh\n</code></pre>\n<p><a href=\"https://github.com/ChristopherBiscardi/superhuman-registry/blob/9508e1b1b6887c8d4e412fad0ddd8f89676f8192/sqitch/initdb.sh\">initdb.sh</a>\nis the following script to execute sqitch:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>#!/bin/bash\nset -e\n\ncd /opt/sqitch &amp;&amp; sqitch -u &quot;$POSTGRES_USER&quot; deploy --verify\n</code></pre>\n<p>The migrations (in order) are the following three. The first sets up\nour SR schema.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-comment___UYk12\">-- Deploy sr:appschema to pg</span>\n\n<span class=\"highlight__hljs-keyword___som98\">BEGIN</span>;\n\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">SCHEMA</span> sr;\n\n<span class=\"highlight__hljs-keyword___som98\">COMMIT</span>;\n</code></pre>\n<p>The second registers uuid-ossp, which we will use when tracking upload\nrequests.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-comment___UYk12\">-- Deploy sr:uuid-ossp to pg</span>\n<span class=\"highlight__hljs-comment___UYk12\">-- requires: appschema</span>\n\n<span class=\"highlight__hljs-keyword___som98\">BEGIN</span>;\n\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> EXTENSION <span class=\"highlight__hljs-string___1SffY\">\"uuid-ossp\"</span>;\n\n<span class=\"highlight__hljs-keyword___som98\">COMMIT</span>;\n</code></pre>\n<p>Finally, we implement a table with automatic <code>created_at</code> and\n<code>modified_at</code> timestamps. These timestamps will help us implement\ngarbage collection for abandoned uploads. We let Postgres handle\ngeneration of unique UUIDs on <code>INSERT</code> and leave the creation of a\nLarge Object for the future.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-comment___UYk12\">-- Deploy sr:blob-uploads to pg</span>\n<span class=\"highlight__hljs-comment___UYk12\">-- requires: uuid-ossp</span>\n\n<span class=\"highlight__hljs-keyword___som98\">BEGIN</span>;\n\n<span class=\"highlight__hljs-comment___UYk12\">-- Table</span>\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">TABLE</span> sr.blob_uploads (\n  <span class=\"highlight__hljs-keyword___som98\">id</span> <span class=\"highlight__hljs-keyword___som98\">UUID</span> PRIMARY <span class=\"highlight__hljs-keyword___som98\">KEY</span> <span class=\"highlight__hljs-keyword___som98\">DEFAULT</span> uuid_generate_v4(),\n  lo_id <span class=\"highlight__hljs-keyword___som98\">OID</span>,\n  repo_name <span class=\"highlight__hljs-built_in___3uuyR\">VARCHAR</span>(<span class=\"highlight__hljs-number___2gmaH\">256</span>) <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n  created_at <span class=\"highlight__hljs-keyword___som98\">TIMESTAMP</span> <span class=\"highlight__hljs-keyword___som98\">WITH</span> <span class=\"highlight__hljs-keyword___som98\">TIME</span> ZONE <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n  modified_at <span class=\"highlight__hljs-keyword___som98\">TIMESTAMP</span> <span class=\"highlight__hljs-keyword___som98\">WITH</span> <span class=\"highlight__hljs-keyword___som98\">TIME</span> ZONE <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>\n);\n\n<span class=\"highlight__hljs-comment___UYk12\">-- Automatically update modified_at</span>\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">OR</span> <span class=\"highlight__hljs-keyword___som98\">REPLACE</span> <span class=\"highlight__hljs-keyword___som98\">FUNCTION</span> update_modified_column()\n<span class=\"highlight__hljs-keyword___som98\">RETURNS</span> <span class=\"highlight__hljs-keyword___som98\">TRIGGER</span> <span class=\"highlight__hljs-keyword___som98\">AS</span> $$\n<span class=\"highlight__hljs-keyword___som98\">BEGIN</span>\n    NEW.modified_at = <span class=\"highlight__hljs-keyword___som98\">now</span>();\n    <span class=\"highlight__hljs-comment___UYk12\">-- Force created_at to never change</span>\n    NEW.created_at = OLD.created_at;\n    RETURN NEW;\n<span class=\"highlight__hljs-keyword___som98\">END</span>;\n$$ language 'plpgsql';\n\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">TRIGGER</span> update_blob_upload_modtime\n<span class=\"highlight__hljs-keyword___som98\">BEFORE</span> <span class=\"highlight__hljs-keyword___som98\">UPDATE</span> <span class=\"highlight__hljs-keyword___som98\">ON</span> sr.blob_uploads\n<span class=\"highlight__hljs-keyword___som98\">FOR</span> <span class=\"highlight__hljs-keyword___som98\">EACH</span> <span class=\"highlight__hljs-keyword___som98\">ROW</span> <span class=\"highlight__hljs-keyword___som98\">EXECUTE</span> <span class=\"highlight__hljs-keyword___som98\">PROCEDURE</span> update_modified_column();\n\n<span class=\"highlight__hljs-comment___UYk12\">-- | Automatically populate created_at</span>\n<span class=\"highlight__hljs-comment___UYk12\">-- Use a trigger so it's impossible to override on insert</span>\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">OR</span> <span class=\"highlight__hljs-keyword___som98\">REPLACE</span> <span class=\"highlight__hljs-keyword___som98\">FUNCTION</span> populate_create_column()\n<span class=\"highlight__hljs-keyword___som98\">RETURNS</span> <span class=\"highlight__hljs-keyword___som98\">TRIGGER</span> <span class=\"highlight__hljs-keyword___som98\">AS</span> $$\n<span class=\"highlight__hljs-keyword___som98\">BEGIN</span>\n    NEW.created_at = <span class=\"highlight__hljs-keyword___som98\">now</span>();\n    NEW.modified_at = now();\n    RETURN NEW;\t\n<span class=\"highlight__hljs-keyword___som98\">END</span>;\n$$ language 'plpgsql';\n\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">TRIGGER</span> insert_blob_upload_createtime\n<span class=\"highlight__hljs-keyword___som98\">BEFORE</span> <span class=\"highlight__hljs-keyword___som98\">INSERT</span> <span class=\"highlight__hljs-keyword___som98\">ON</span> sr.blob_uploads\n<span class=\"highlight__hljs-keyword___som98\">FOR</span> <span class=\"highlight__hljs-keyword___som98\">EACH</span> <span class=\"highlight__hljs-keyword___som98\">ROW</span> <span class=\"highlight__hljs-keyword___som98\">EXECUTE</span> <span class=\"highlight__hljs-keyword___som98\">PROCEDURE</span> populate_create_column();\n\n<span class=\"highlight__hljs-keyword___som98\">COMMIT</span>;\n</code></pre>\n<p>To handle the initialization of new uploads, we use the following\nquery which grabs a connection from the pool, executes the statement\nand returns the UUID of the new upload.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-comment___UYk12\">-- | Insert a new upload for a Repos</span>\n<span class=\"highlight__hljs-title___1fl8Q\">startNewUpload</span> :: <span class=\"highlight__hljs-type___11WfV\">Reponame</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n<span class=\"highlight__hljs-title___1fl8Q\">startNewUpload</span> repo = runPG (query repo insertNewUpload)\n\n<span class=\"highlight__hljs-comment___UYk12\">-- | PG automatically creates uuid, created_at and modified_at</span>\n<span class=\"highlight__hljs-title___1fl8Q\">insertNewUpload</span> :: <span class=\"highlight__hljs-type___11WfV\">Query</span> <span class=\"highlight__hljs-type___11WfV\">Text</span> <span class=\"highlight__hljs-type___11WfV\">UUID</span>\n<span class=\"highlight__hljs-title___1fl8Q\">insertNewUpload</span> =\n  statement sql encoder decoder <span class=\"highlight__hljs-type___11WfV\">True</span>\n  <span class=\"highlight__hljs-keyword___som98\">where</span>\n    sql =\n      <span class=\"highlight__hljs-string___1SffY\">\"INSERT INTO sr.blob_uploads (repo_name) VALUES ($1) RETURNING id\"</span>\n    encoder =\n      <span class=\"highlight__hljs-type___11WfV\">E</span>.value <span class=\"highlight__hljs-type___11WfV\">E</span>.text\n    decoder =\n      <span class=\"highlight__hljs-type___11WfV\">D</span>.singleRow (<span class=\"highlight__hljs-type___11WfV\">D</span>.value <span class=\"highlight__hljs-type___11WfV\">D</span>.uuid)\n</code></pre>\n<p><code>runPG</code> is a utility function which handles any connection\nerrors.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">runPG</span> :: <span class=\"highlight__hljs-type___11WfV\">Session</span> a -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> a\n<span class=\"highlight__hljs-title___1fl8Q\">runPG</span> action = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  pool &lt;- asks acPGPool\n  res &lt;- liftIO $ <span class=\"highlight__hljs-type___11WfV\">P</span>.use pool action\n  <span class=\"highlight__hljs-keyword___som98\">case</span> res <span class=\"highlight__hljs-keyword___som98\">of</span>\n    <span class=\"highlight__hljs-type___11WfV\">Left</span> usageError -&gt; <span class=\"highlight__hljs-keyword___som98\">do</span>\n    ...\n</code></pre>\n<h1 id=\"postgres-headblob\">Postgres headBlob</h1>\n<p>At this point I figured out that Docker will ask to mount if you push\nan image, then retag it and push the retagged image.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker tag hello-world localhost:9000/biscarch/hello-worlds\ndocker push localhost:9000/biscarch/hello-worlds\ndocker tag hello-world localhost:9000/biscarch/hello-world-2\ndocker push localhost:9000/biscarch/hello-world-2\n</code></pre>\n<p>The last push produces the following request to blob upload:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>GET /v2/\n  Accept:\n  Status: 200 OK 0.002441185s\nPOST /v2/biscarch/hello-world-2/blobs/uploads/\n  Params: [(&quot;from&quot;,&quot;biscarch/hello-worlds&quot;),(&quot;mount&quot;,&quot;sha256:c04b14da8d1441880ed3fe6106fb2cc6fa1c9661846ac0266b8a5ec8edf37b7c&quot;)]\n  Accept:\n</code></pre>\n<p>To implement <code>putBlob</code> we’ll need to make our hacky <code>headBlob</code> return\n404s. This gives us a nice spot to implement a <code>blobs</code> table which\nwill form the basis of our <code>catalog</code>.</p>\n<p>TODO: implement CREATE TABLE <code>blobs</code> here.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-comment___UYk12\">-- Table</span>\n<span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">TABLE</span> sr.blobs (\n  <span class=\"highlight__hljs-comment___UYk12\">-- id is a sha256 hash</span>\n  <span class=\"highlight__hljs-comment___UYk12\">-- <span class=\"hljs-doctag\">TODO:</span> limit this to sha256 length?</span>\n  <span class=\"highlight__hljs-keyword___som98\">id</span> <span class=\"highlight__hljs-built_in___3uuyR\">TEXT</span> PRIMARY <span class=\"highlight__hljs-keyword___som98\">KEY</span>,\n  <span class=\"highlight__hljs-comment___UYk12\">-- id of the hashed blob</span>\n  lo_id <span class=\"highlight__hljs-keyword___som98\">OID</span>,\n  <span class=\"highlight__hljs-comment___UYk12\">-- maybe remove repo_name?</span>\n  repo_name <span class=\"highlight__hljs-built_in___3uuyR\">VARCHAR</span>(<span class=\"highlight__hljs-number___2gmaH\">256</span>) <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n  created_at <span class=\"highlight__hljs-keyword___som98\">TIMESTAMP</span> <span class=\"highlight__hljs-keyword___som98\">WITH</span> <span class=\"highlight__hljs-keyword___som98\">TIME</span> ZONE <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n  modified_at <span class=\"highlight__hljs-keyword___som98\">TIMESTAMP</span> <span class=\"highlight__hljs-keyword___som98\">WITH</span> <span class=\"highlight__hljs-keyword___som98\">TIME</span> ZONE <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>\n);\n</code></pre>\n<p>Our <code>HEAD</code> handler will check to see if the blob exists in our\n<code>catalog</code>. If it does, we need to get the <code>Content-Length</code> of the blob\nto return. If it does not exist we just 404.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">headDigest</span> :: <span class=\"highlight__hljs-type___11WfV\">Namespace</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">Name</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n           -&gt; <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Content-Length\"</span> <span class=\"highlight__hljs-type___11WfV\">Int</span>,\n    <span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"Docker-Content-Digest\"</span> <span class=\"highlight__hljs-type___11WfV\">Digest</span>\n    ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">headDigest</span> namespace' name' digest' = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  blobExists &lt;- headBlob digest'\n  <span class=\"highlight__hljs-keyword___som98\">case</span> blobExists <span class=\"highlight__hljs-keyword___som98\">of</span>\n    <span class=\"highlight__hljs-type___11WfV\">BLOB_EXISTS</span> d' -&gt; return addHeader <span class=\"highlight__hljs-number___2gmaH\">0</span>\n                    $ addHeader digest' <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n    <span class=\"highlight__hljs-type___11WfV\">UNKNOWN_BLOB</span> -&gt; throwError err404\n</code></pre>\n<h1 id=\"fixing-patchblob\">Fixing patchBlob</h1>\n<h1 id=\"postgres-putblob\">Postgres putBlob</h1>\n","attributes":{"title":"Building a Docker Registry","updatedAt":"Oct 3rd, 2016","publishedAt":"Oct 3rd, 2016","timeToRead":20,"headerImage":"/da49167186a7e54073552e04d715a80f.png","url":"/building-a-docker-registry/","canonicalURL":null,"excerpt":"Containers are surging right now. This series of blog posts will\nexplore a small corner of that universe by building a Docker Registry\nthat…","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}