{"data":{"root":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611482/snap_sks60m.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611482/snap_sks60m.png\" alt=\"snap-framework\"></a></p>\n<p><a href=\"http://www.christopherbiscardi.com/2014/10/05/working-with-snap-1-0/\">Previous Post – Working With Snap 1.0</a></p>\n<p>In our previous post we built out a scaffold project with Snap 1.0. In this post\nwe’ll go over building a simple Dockerfile to deploy the project.</p>\n<p>Make sure you’ve <a href=\"https://docs.docker.com/installation/#installation\">installed docker</a></p>\n<h2 id=\"building-the-haskell-base\">Building the Haskell Base</h2>\n<p>There is an effort to make a <a href=\"https://github.com/darinmorrison/docker-haskell/tree/docker-library\">docker official haskell\nimage</a> so\nwe’ll use that. Once it’s merged into <code>docker-library</code>, we can simply skip\nbuilding the <code>docker-haskell</code> from scratch.</p>\n<p>Clone docker-haskell and switch to the docker-library branch. (It doesn’t matter\nwhere on the computer we do this)</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>git clone git@github.com:darinmorrison/docker-haskell.git\ncd docker-haskell\ngit checkout docker-library\n</code></pre>\n<p>Once in the appropriate directory, we can build the image with <a href=\"https://docs.docker.com/reference/commandline/cli/#build\"><code>docker build</code></a>. <code>-t</code> is short\nfor <code>--tag</code>, which lets us tag an image. We’ll use <code>haskell</code> for the base name\nand tag it as <code>7.8</code>. Finally, the <code>.</code> tells docker where to find the dockerfile\nwe’re building.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>cd 7.8\ndocker build -t haskell:7.8 .\n</code></pre>\n<p>We can test that it worked by using <a href=\"https://docs.docker.com/reference/commandline/cli/#run\"><code>docker run</code></a> to spawn <code>ghci</code> as\nan interactive pseudo-tty.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker run -i -t haskell:7.8 ghci\n</code></pre>\n<p>Use <code>:q</code> to quit <code>ghci</code> as usual.</p>\n<h1 id=\"building-our-project\">Building our Project</h1>\n<p>We’ll base our project on the docker image we just built.</p>\n<blockquote>\n<p>NOTE: We can push this base image <a href=\"https://docs.docker.com/userguide/dockerrepos/#pushing-a-repository-to-docker-hub\">to the docker\nhub</a>\nbut interestingly enough, we don’t have to (if we’re using “normal” repos;\nAutomated Builds are a different story). We can push the final image without\npushing the base image.</p>\n</blockquote>\n<h3 id=\"dockerfile\">Dockerfile</h3>\n<p>Our <code>Dockerfile</code> goes in the root of the <code>auth-server/</code> folder. If you’ve built\na haskell project before and are familiar with cabal sandboxes, this will be\nsimilar:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code># https://github.com/darinmorrison/docker-haskell/tree/docker-library\nFROM haskell:7.8\n\nRUN cabal update\n\n# Add Cabal File and deps/ folder\nADD ./auth-server.cabal /opt/auth-server/auth-server.cabal\nADD ./deps /opt/auth-server/deps\n\n# Create Sandbox and Add Source Deps\nRUN cd /opt/auth-server &amp;&amp;\n        cabal sandbox init &amp;&amp;\n        cabal sandbox add-source deps/io-streams-haproxy &amp;&amp;\n        cabal sandbox add-source deps/snap &amp;&amp;\n        cabal sandbox add-source deps/snap-core &amp;&amp;\n        cabal sandbox add-source deps/snap-server &amp;&amp;\n        cabal sandbox add-source deps/snap-loader-static &amp;&amp;\n        cabal sandbox add-source deps/heist\n\nRUN cd /opt/auth-server &amp;&amp; cabal install --only-dependencies\n\n# Explicitly add relevant folders\nADD ./src /opt/auth-server/src\nADD ./snaplets /opt/auth-server/snaplets\nADD ./static /opt/auth-server/static\n\n# Init logging directories\nRUN mkdir /opt/auth-server/log\n\n# Build the Project\nRUN cd /opt/auth-server &amp;&amp; cabal build\n\n# The directory CMD works from\nWORKDIR /opt/auth-server\nCMD [&quot;./dist/build/auth-server/auth-server&quot;]\n</code></pre>\n<p>With the above dockerfile in the root of <code>auth-server/</code> we can build with:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>cd auth-server\ndocker build -t auth-server .\n</code></pre>\n<blockquote>\n<p>NOTE: <code>-t auth-server</code> could be any name, such as <code>-t myawesomething</code> but if\nyou plan to push it to the docker hub do <code>username/image-name:tag-name</code></p>\n</blockquote>\n<p>After building, run it with:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker run -i -t -p 8000:8000 auth-server\n</code></pre>\n<p>and we should have a running instance of our application on port <code>8000</code> (or at\n<code>boot2docker ip</code> on port <code>8000</code>).</p>\n<h3 id=\"to-the-hub\">To The Hub!</h3>\n<p>We can push the image we just built to a registry (such as the docker hub) by\nbuilding it with our username (so it gets filed under our user on the hub):</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker build -t biscarch/auth-server\ndocker push biscarch/auth-server\n</code></pre>\n<p>and on some other computer (such as AWS, a Digital Ocean instance or another dev\ncomputer) pull and run the image:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker pull biscarch/auth-server\ndocker run -d -p 8000:8000 biscarch/auth-server\n</code></pre>\n<p>after running, we can check that it’s up with <code>docker ps</code>:</p>\n<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611480/Screenshot-2014-10-14-20.26.19_ms5prn.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611480/Screenshot-2014-10-14-20.26.19_ms5prn.png\" alt=\"Screenshot 2014-10-14 20.26.19\"></a></p>\n<h1 id=\"fin\">FIN</h1>\n<p>The completed docker image is on the hub as\n<a href=\"https://registry.hub.docker.com/u/biscarch/auth-server/\">biscarch/auth-server:0.0.0.2</a>,\nso you can run a <code>pull</code>, then a <code>run</code> anywhere you like:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>docker pull biscarch/auth-server:0.0.0.2\ndocker run -i -t -p 8000:8000 biscarch/auth-server:0.0.0.2\n</code></pre>\n","attributes":{"title":"Deploying Snap with Docker","updatedAt":"Oct 15th, 2014","publishedAt":"Oct 15th, 2014","timeToRead":2,"headerImage":null,"url":"/2014/10/15/deploying-snap-with-docker/","canonicalURL":null,"excerpt":"","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}