{"data":{"post":{"body":"<p>In this post we will enable Drakma HTTP support in the Android/MOCL example code. I have forked the repo <a href=\"https://github.com/ChristopherBiscardi/mocl-example-lisp-contacts-android\">on Github</a> for posterity. The first post is <a href=\"http://www.christopherbiscardi.com/2014/01/10/common-lisp-on-android-running-the-mocl-android-example/\">here</a> and it will get you set up with the Android/MOCL example without Drakma.</p>\n<p>First we must download dependencies.</p>\n<p><a href=\"http://weitz.de/drakma/#install\">Drakma</a><br>\n<a href=\"http://common-lisp.net/projects/usocket/releases/\">USocket</a><br>\n<a href=\"http://weitz.de/flexi-streams/\">Flexi-Streams</a><br>\n<a href=\"http://weitz.de/chunga/\">Chunga</a><br>\n<a href=\"http://www.cliki.net/cl-base64\">CL-BASE64</a><br>\n<a href=\"http://www.cliki.net/puri\">Puri</a></p>\n<p>My libs are located in mocl/systems. So I that’s where I place the folders of code, then link the .asd files.<br>\nThe instructions may change slightly with different versions of libs.</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"bash\"</span>&gt;<span class=\"hljs-keyword\">cd</span> mocl/systems\n<span class=\"hljs-keyword\">ln</span> -<span class=\"hljs-keyword\">s</span> drakma-<span class=\"hljs-number\">1.3</span>.<span class=\"hljs-number\">7</span>/drakma.asd drakma.asd\n<span class=\"hljs-keyword\">ln</span> -<span class=\"hljs-keyword\">s</span> usocket-<span class=\"hljs-number\">0.6</span>.<span class=\"hljs-number\">1</span>/usocket.asd usocket.asd\ngit clone http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/edicl/<span class=\"hljs-keyword\">cl</span>-ppcre.git\n<span class=\"hljs-keyword\">ln</span> -<span class=\"hljs-keyword\">s</span> <span class=\"hljs-keyword\">cl</span>-ppcre/<span class=\"hljs-keyword\">cl</span>-ppcre.asd <span class=\"hljs-keyword\">cl</span>-ppcre.asd```\n\nNote that `<span class=\"hljs-keyword\">cl</span>-ppcre-unicode.asd` also <span class=\"hljs-built_in\">exists</span>. Also of note <span class=\"hljs-keyword\">is</span> the <span class=\"hljs-keyword\">version</span> of `trivial-gray-streams` in use here. As of this writing the current <span class=\"hljs-keyword\">version</span> <span class=\"hljs-keyword\">is</span> causing issues <span class=\"hljs-built_in\">and</span> the <span class=\"hljs-keyword\">version</span> presented below should <span class=\"hljs-keyword\">be</span> used.\n\n</code></pre>\n<p><code class=\"bash\">ln -s flexi-streams-1.0.12/flexi-streams.asd flexi-streams.asd\ngit clone <a href=\"https://git.gitorious.org/trivial-gray-streams/wukix-trivial-gray-streams.git\">https://git.gitorious.org/trivial-gray-streams/wukix-trivial-gray-streams.git</a>\nln -s wukix-trivial-gray-streams/trivial-gray-streams.asd trivial-gray-streams.asd\nln -s chunga-1.1.5/chunga.asd chunga.asd\nln -s cl-base64-3.3.3/cl-base64.asd cl-base64.asd\nln -s puri-1.5.5/puri.asd puri.asd```</p>\n<p>So after doing the linking dance we can uncomment the Drakma code in app.lisp (5 lines):</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"lisp\"</span>&gt;(pushnew <span class=\"hljs-symbol\">:drakma-no-ssl</span> *features*)\n   (require <span class=\"hljs-symbol\">:drakma</span>)```\n\n</code></pre>\n<p><code class=\"lisp\">(declaim (call-in net-test))\n(defun net-test ()\n(print (drakma:http-request “<a href=\"http://wukix.com\">http://wukix.com</a>”)))```</p>\n<p>but we have to change out <code>http://wukix.com</code> because as of this writing wukix has changed their site to redirect to https, and drakma can’t use ssl yet. In my case I changed it to <code>http://www.cliki.net/</code> because it currently accepts over http.</p>\n<p>and add <code>net_test</code> to our <code>MainActivity.java</code>. In this case we just log out the result</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"Java\"</span>&gt;<span class=\"hljs-keyword\">CL</span>.cl_init();\ntry {\n    String dataDir = getDataDir();\n    <span class=\"hljs-keyword\">CL</span>.set_temp_dir(dataDir);\n    <span class=\"hljs-keyword\">CL</span>.set_doc_dir(dataDir);\n    <span class=\"hljs-keyword\">CL</span>.set_font_path(getAssetPath(<span class=\"hljs-string\">\"DejaVuSans.ttf\"</span>));\n    <span class=\"hljs-keyword\">CL</span>.load_contacts();\n} catch (Exception <span class=\"hljs-keyword\">e</span>) {\n    <span class=\"hljs-comment\">// TODO Auto-generated catch block</span>\n    <span class=\"hljs-keyword\">e</span>.printStackTrace();\n}\n\n<span class=\"hljs-keyword\">Log</span>.<span class=\"hljs-built_in\">e</span>(<span class=\"hljs-string\">\"CL\"</span>,<span class=\"hljs-keyword\">CL</span>.net_test());```\n\nand <span class=\"hljs-keyword\">run</span>:\n\n</code></pre>\n<p><code class=\"bash\">cd mocl-example-lisp-contacts-android\nmocl --android LispContacts app.lisp\ncd LispContacts/jni\nndk-build```</p>\n<p>Then simply debug the project in ADK and watch the logcat output. The result should show up as an error, since we used <code>Log.e(&quot;&quot;,&quot;&quot;)</code>, with a tag of CL.</p>\n<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a></p>\n"}}}