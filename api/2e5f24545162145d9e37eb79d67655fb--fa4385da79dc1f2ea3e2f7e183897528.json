{"data":{"root":{"post":{"body":"<p><a href=\"http://www.christopherbiscardi.com/2014/01/10/getting-started-with-snap-and-user-authentication-part-2/\">Part 2</a></p>\n<p>Before we get started, there is a quickstart on the snap-framework site\n<a href=\"http://snapframework.com/docs/quickstart\">here</a> that goes into the <code>barebones</code>\nscaffold project a bit. This course will go a little more in depth into the\n<code>default</code> project, exploring user authentication.</p>\n<p>I use <a href=\"https://github.com/Paczesiowa/hsenv\">hsenv</a> to create separate Haskell\nenvironments, but that is not a requirement and beginners may be more\ncomfortable installing the <a href=\"http://www.haskell.org/platform/\">Haskell Platform</a></p>\n<p>If you wish to use hsenv, you can run this on newer versions:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>hsenv --ghc=7.6.3\n</code></pre>\n<p>or download the package for ghc-7.6.3\n<a href=\"http://www.haskell.org/ghc/download_ghc_7_6_3\">here</a> and run this:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>hsenv --ghc=/path/to/downloaded/ghc-7.6.3-x86_64-apple-darwin.tar.bz2\n</code></pre>\n<p>From here on out the process is the same if you’re using hsenv or not. Create a\nnew directory named “abc” and enter it. This will also function as the name of\nour project and executable.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>mkdir abc\n<span class=\"highlight__hljs-built_in___3uuyR\">cd</span> abc\n</code></pre>\n<p>It’s good to update the package list when starting a new project:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>cabal update\ncabal install cabal-install\n</code></pre>\n<p>After updating and installing the new version of cabal-instal we can install\nsnap:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>cabal install snap\n</code></pre>\n<p>At this point we will have the <code>snap</code> CLI and can run init to scaffold a default\nproject. After scaffolding, we then run <code>cabal install</code> to compile the binary\nand <code>abc</code> to run the project. <code>abc</code> will also take a port as such: <code>abc -p 8000</code></p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>snap init\ncabal install\nabc -p 8000\n</code></pre>\n<p>Our app, abc, should now be running. Navigate to <code>localhost:8000</code> (or the port\nyou specified) in your browser to take a look.</p>\n<p>In the next post we’ll take a look at the code we generated and take a brief\noverview of what it does.</p>\n<p><a href=\"http://www.christopherbiscardi.com/2014/01/10/getting-started-with-snap-and-user-authentication-part-2/\">Part 2 – Auth</a></p>\n<p><a href=\"http://www.christopherbiscardi.com/2014/01/11/getting-started-with-snap-and-user-authentication-part-3/\">Part 3 – Postgres Backed Auth</a></p>\n","attributes":{"title":"Getting Started With Snap (and User Authentication): Part 1","updatedAt":"Jan 7th, 2014","publishedAt":"Jan 7th, 2014","timeToRead":1,"headerImage":null,"url":"/2014/1/6/getting-started-with-snap-and-user-authentication-part-1/","canonicalURL":null,"excerpt":"Part 2","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}