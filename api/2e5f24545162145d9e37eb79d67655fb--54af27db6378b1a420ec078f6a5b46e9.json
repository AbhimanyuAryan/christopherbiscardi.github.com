{"data":{"root":{"post":{"body":"<p>As seen in the <a href=\"http://www.christopherbiscardi.com/2013/01/13/riak-core-quickstart/\">quickstart post</a>; the default Riak Core template gives you a <code>myapp:ping().</code> method.\nI named my application spades, so my files are named <code>spades.erl</code> and <code>spades_vnode.erl</code> with the function being called as <code>spades:ping().</code></p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;erlang&quot;&gt;\n%% File: spades.erl\n%% @doc Pings a random vnode to make sure communication is functional\nping() -&gt;\n  DocIdx = riak_core_util:chash_key({&lt;&lt;&quot;ping&quot;&gt;&gt;, term_to_binary(now())}),\n  PrefList = riak_core_apl:get_primary_apl(DocIdx, 1, spades),\n  [{IndexNode, _Type}] = PrefList,\n  riak_core_vnode_master:sync_spawn_command(IndexNode, ping, spades_vnode_master).\n</code></pre>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;erlang&quot;&gt;\n%% File: spades_vnode.erl\n%% Sample command: respond to a ping\nhandle_command(ping, _Sender, State) -&gt;\n  {reply, {pong, State#state.partition}, State};\n</code></pre>\n<p>All commands we execute as <code>myapp:command().</code> (such as <code>spades:ping().</code>) route through the myapp.erl functions.</p>\n<p>In this case, when we call <code>spades:ping().</code> the ping(). function in spades.erl is what gets called.</p>\n<p>Let’s take a look at the first line of code.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;erlang&quot;&gt;\n    DocIdx = riak_core_util:chash_key({&lt;&lt;&quot;ping&quot;&gt;&gt;, term_to_binary(now())}),\n</code></pre>\n<p>DocIdx is short for Document Index. This appears to be a holdover from before Riak Core was separated from Riak KV.\nWe are using the Consistent Hash (chash) function from the riak_core_util module.\nBy hashing on the “ping” and the current time, we achieve an acceptable level of randomness to distribute our request to a random vnode.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;erlang&quot;&gt;\n  PrefList = riak_core_apl:get_primary_apl(DocIdx, 1, spades),\n</code></pre>\n<p>We then create a PreferenceList (PrefList) by using the hash we just created, an N value and a module name.</p>\n","attributes":{"title":"Riak Core: myapp:ping().","updatedAt":"Jan 13th, 2013","publishedAt":"Jan 13th, 2013","timeToRead":1,"headerImage":null,"url":"/2013/1/13/riak-core-myappping/","canonicalURL":null,"excerpt":"As seen in the quickstart post; the default Riak Core template gives you a myapp:ping(). method.\nI named my application spades, so my files…","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}