{"data":{"post":{"body":"<p>Recently I was asked to build a CRUD app.</p>\n<p>The task was open to using any tech I wanted on the backend, so my first thought was a distributed service in Erlang with a WebMachine interface. This would satisfy the REST requirements for the location service, which we could access via an application server for web.</p>\n<p>However, the preferred method for this task was described to be Python/Flask, So we’ll use that.</p>\n<p>Since sessions are not technically RESTful, they cannot be included in a user authentication scheme. Client side on mobile devices is a different story, with iOS using keychain for security and Android advocating OAuth-type approaches. As it happens, the task language doesn’t include the concept of users, just locations, so we’ll skip authentication to make it REST-Compliant (note: REST doesn’t have a spec.)</p>\n<p>Attributes of a favorite location object include:</p>\n<ul>\n<li>id</li>\n<li>lat</li>\n<li>lng</li>\n<li>address (e.g. 800 Market Street, San Francisco, CA 94114)</li>\n<li>name (e.g. Work)</li>\n</ul>\n<p>This could easily fit in a SQL database, but since we’re using Geolocation and I happen to know that MongoDB’s Geo facilities would allow us to query based on distance from our current position, we’ll use Mongo. Alternatively, we could have also used ElasticSearch/Solr/Lucene but Mongo will serve our purposes just fine.</p>\n<p>We will be deploying on Heroku to use the free ssl support and addons. In reality Heroku is a test platform due to being hosted on EC2 US East only. We will also be skipping the CDN (CloudFront/S3/etc) as the total users here will be under 5.</p>\n<p>I’ve never used Flask before, so this will take a little longer than normal. If I was going for turnaround time, I might have used node.js and express or RESTify because I’m stronger with JS/node.</p>\n<p>To connect to the Mongo Instance on Heroku || localhost:</p>\n<pre><code>&lt;code <span class=\"hljs-attr\">class=\"python\"&gt;</span>\n  <span class=\"hljs-built_in\">import</span> pymongo\n\n  <span class=\"hljs-comment\"># Get MongoDB URL if on Heroku, else use localhost</span>\n  <span class=\"hljs-attr\">MONGO_URL</span> = os.environ.get('MONGOHQ_URL')\n   \n   <span class=\"hljs-keyword\">if</span> MONGO_URL:\n       <span class=\"hljs-comment\"># Get a connection</span>\n       <span class=\"hljs-attr\">conn</span> = pymongo.Connection(MONGO_URL)\n   \n       <span class=\"hljs-comment\"># Get the database</span>\n       <span class=\"hljs-attr\">db</span> = conn[urlparse(MONGO_URL).path[<span class=\"hljs-number\">1</span>:]]\n   <span class=\"hljs-keyword\">else</span>:\n       <span class=\"hljs-comment\"># Not on an app with the MongoHQ add-on, do some localhost action</span>\n       <span class=\"hljs-attr\">conn</span> = pymongo.Connection('localhost', <span class=\"hljs-number\">27017</span>)\n       <span class=\"hljs-attr\">db</span> = conn['test']\n  <span class=\"hljs-comment\"># locations Collection</span>\n  <span class=\"hljs-attr\">locationsC</span> = db.locations\n</code></pre>\n<p>And set up some content negotiation formatters:</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"python\"</span>&gt;\n<span class=\"hljs-comment\"># Content Negotiation Formatters</span>\n\n\nclass JSONFormatter(Formatter)<span class=\"hljs-symbol\">:</span>\n    format = <span class=\"hljs-string\">'json'</span>\n    mimetypes = [<span class=\"hljs-string\">'application/json'</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render</span></span>(<span class=\"hljs-keyword\">self</span>, obj)<span class=\"hljs-symbol\">:</span>\n        <span class=\"hljs-keyword\">return</span> json.dumps(obj)\n\n\nclass HTMLFormatter(Formatter)<span class=\"hljs-symbol\">:</span>\n    format = <span class=\"hljs-string\">'json'</span>\n    mimetypes = [<span class=\"hljs-string\">'text/html'</span>]\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">configure</span></span>(<span class=\"hljs-keyword\">self</span>, template)<span class=\"hljs-symbol\">:</span>\n        <span class=\"hljs-keyword\">self</span>.template = template\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render</span></span>(<span class=\"hljs-keyword\">self</span>, obj)<span class=\"hljs-symbol\">:</span>\n        <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-keyword\">self</span>.template, **obj)\n</code></pre>\n<p>Having got some server basics out of the way I started on the structure of the home page. There isn’t a defined business purpose here, so I chose to make the design based around creating new locations.</p>\n<p><a href=\"http://www.christopherbiscardi.com/2012/12/06/a-python-flask-crud/screen-shot-2013-01-18-at-8-31-37-am/\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_174,w_300/v1428611529/Screen-shot-2013-01-18-at-8.31.37-AM_vtxjto.png\" alt=\"Python Crud App Homepage\"></a></p>\n"}}}