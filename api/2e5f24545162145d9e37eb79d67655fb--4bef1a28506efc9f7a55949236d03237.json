{"data":{"root":{"post":{"body":"<p>In this post we’ll go through the process to create a basic Clojure/Compojure/libnoir scaffolding project and deploying it to Heroku.</p>\n<p>First, make sure you’ve installed the prereqs:\n<a href=\"http://leiningen.org/\">Leiningen</a> &gt;= v2.0\n<a href=\"https://toolbelt.heroku.com/\">Heroku Toolbelt</a></p>\n<p>and here’s the <a href=\"https://github.com/ChristopherBiscardi/clojure-compojure-libnoir\">GitHub</a> if that’s your style.</p>\n<p>After installing leiningen, run:</p>\n<p><code>lein new compojure scaffold-app</code></p>\n<p>to scaffold a new project. Then cd into the project and run <code>lein ring server</code> to install dependencies and run the app.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;cd scaffold-app\nlein ring server```\n\nWe can kill the server with `C-c`. We will need a `Procfile` to deploy to Heroku and it will look like this:\n\n`web: java $JVM_OPTS -cp target/scaffolding-app.jar clojure.main -m scaffold-app.handler $PORT`\n\nBe sure to save that as `Procfile`. This says we will have a “web” dyno type, which is a special type on heroku that is allowed to receive web traffic.\n\nWe need a `:main` namespace in our app so that `lein run` knows how to run the app.\n\nInside of `project.clj` add `:main` and a dependency on `lib-noir`, from which we will use a jetty adapter. We also want to add `min-lein-version` so that heroku uses lein 2.0 and add a section for our `:uberjar-name`. This will help us out with some startup-timing issues we could encounter otherwise.\n\n</code></pre>\n<p><code class=\"clojure\">(defproject scaffold-app “0.1.0-SNAPSHOT”\n:description “FIXME: write description”\n:url “<a href=\"http://example.com/FIXME\">http://example.com/FIXME</a>”\n:dependencies [[org.clojure/clojure “1.5.1”]\n[lib-noir “0.7.9”]\n[compojure “1.1.6”]]\n:main scaffold-app.handler\n:min-lein-version “2.0.0”\n:uberjar-name “scaffolding-app.jar”\n:plugins [[lein-ring “0.8.10”]]\n:ring {:handler scaffold-app.handler/app}\n:profiles\n{:dev {:dependencies [[javax.servlet/servlet-api “2.5”]\n[ring-mock “0.1.5”]]}})```</p>\n<p>In <code>src/scaffold_app/handler.clj</code> add <code>ring.adapter.jetty</code> to <code>:use</code> and bracket</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;clojure&quot;&gt;(:use [compojure.core]\n      [ring.adapter.jetty :as ring])```\n\nand `-main` to the body where the port will be given to us from Heroku:\n\n</code></pre>\n<p><code class=\"clojure\">(defn -main [port]\n(run-jetty (handler/site app-routes) {:port (read-string port) :join? false}))```</p>\n<p>At this point you should be able to run <code>lein run 8080</code> to start an instance of the app on port 8080. If this works, you are ready to deploy to Heroku.</p>\n<p>Assuming you have git, a Heroku account and the Toolbelt (mentioned at the top of the post) installed we can deploy to heroku in this fashion: (Remember to change “scaffolding-clojure” to something else. There is already an app with that name that exists on heroku.)</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;git init\nheroku apps:create scaffolding-clojure```\n\nheroku’s `apps:create` adds a “heroku” remote to git.\n\n</code></pre>\n<p><code class=\"bash\">git add Procfile .gitignore <a href=\"http://README.md\">README.md</a> project.clj src/ test/\ngit commit -m 'first commit’\ngit push -u heroku master```</p>\n<p>We can open our app with <code>heroku open</code> or watch it run with <code>heroku logs --tail</code></p>\n<p>In the next post we’ll dive into lib-noir a bit to investigate potential applications (such as JSON APIs).</p>\n<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a></p>\n","attributes":{"title":"Scaffolding a Clojure/Compojure Webapp for Heroku","updatedAt":"Jan 15th, 2014","publishedAt":"Jan 15th, 2014","timeToRead":1,"headerImage":null,"url":"/2014/1/15/scaffolding-a-clojurecompojure-webapp-for-heroku/","canonicalURL":null,"excerpt":"In this post we’ll go through the process to create a basic Clojure/Compojure/libnoir scaffolding project and deploying it to Heroku.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}