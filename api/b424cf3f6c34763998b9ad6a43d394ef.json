{"data":{"post":{"body":"<h2>Prerequisites</h2>\n<dl><dt>[Rebar](https://github.com/basho/rebar)</dt><dd>To build the project</dd></dl>\n##  Relevant Files\n<dl><dt>Project on Github</dt><dd>[https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example](https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example)</dd><dt>[chapp.erl](https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example/blob/master/a    pps/chapp/src/chapp.erl)</dt><dd>Holds the different routing code</dd><dt>[chapp_vnode.erl](https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example/blob/master/apps/chapp/src    /chapp_vnode.erl)</dt><dd>The ping function on the vnodes. This function is the same on every vnode, the difference is which vnode is processing the request.</dd></dl>\n## The Code\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"erlang\"</span>&gt;\n%% <span class=\"hljs-symbol\">@doc</span> Pings a <span class=\"hljs-built_in\">random</span> vnode \n<span class=\"hljs-built_in\">ping</span>() -&gt;\n    DocIdx = riak_core_util:chash_key({&gt;, term_to_binary(<span class=\"hljs-built_in\">now</span>())}),\n    PrefList = riak_core_apl:get_primary_apl(DocIdx, <span class=\"hljs-number\">1</span>, chapp),\n    [{IndexNode, _Type}] = PrefList,\n    riak_core_vnode_master:sync_spawn_command(IndexNode, <span class=\"hljs-built_in\">ping</span>, chapp_vnode_master).\n</code></pre>\n<p>The first function, shown above, pings a random (random enough for our purposes) vnode and returns the partition identifier.<br>\nThe code we’re interested in is in the first line of the function – specifically the chash_key() function.</p>\n<p>The <a href=\"https://github.com/basho/riak_core/blob/master/src/riak_core_util.erl#L187-192\">chash_key</a> function takes a two-tuple and returns a binary identifier we can use to get a PrefList. Much of the terminology in the Riak Core source refers to Riak KV. In this case, the variables are named Bucket and Key in the chash_key function.</p>\n<p>Each function in [chapp.erl](<a href=\"https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example/blob/master/a\">https://github.com/ChristopherBiscardi/Riak-Core-Consistent-Hash-Routing-Example/blob/master/a</a>    pps/chapp/src/chapp.erl) has different tuples which affect which vnode gets called.</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;</span>\n% ping()\n</span><span class=\"hljs-template-variable\">{&gt;, term_to_binary(now())}</span><span class=\"xml\">\n\n% pingsame()\n</span><span class=\"hljs-template-variable\">{&gt;, &gt;}</span><span class=\"xml\">\n\n% pinginput(X)\n</span><span class=\"hljs-template-variable\">{&gt;, term_to_binary(X)}</span><span class=\"xml\">\n</span></code></pre>\n<p>so if we build the project.</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;\ncd path<span class=\"hljs-regexp\">/to/</span><span class=\"hljs-keyword\">project</span>\nmake rel\n</code></pre>\n<p>and run the console</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;\n.<span class=\"hljs-regexp\">/rel/</span>chapp<span class=\"hljs-regexp\">/bin/</span>chapp console\n</code></pre>\n<p>we can then execute the various ping() functions as such:</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\nchapp:ping().\n</code></pre>\n<p>which gives us a tuple that contains <code>pong</code> and the partition id that processed the request.</p>\n<p>We can see the results from running the ping() function a couple times below. Notice that each time we run ping(), a different partition handles the call.</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;</span>\n</span><span class=\"hljs-template-variable\">{pong,1004782375664995756265033322492444576013453623296}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,1050454301831586472458898473514828420377701515264}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,1027618338748291114361965898003636498195577569280}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,1118962191081472546749696200048404186924073353216}</span><span class=\"xml\">\n</span></code></pre>\n<p>Looking at the next function <code>pingsame</code> which we call as such:</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\nchapp:pingsame().\n</code></pre>\n<p>we can see that by calling this function multiple times, we get the same partition handling the call, because the hash of the tuple is always the same.</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;</span>\n</span><span class=\"hljs-template-variable\">{pong,936274486415109681974235595958868809467081785344}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,936274486415109681974235595958868809467081785344}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,936274486415109681974235595958868809467081785344}</span><span class=\"xml\">\n</span><span class=\"hljs-template-variable\">{pong,936274486415109681974235595958868809467081785344}</span><span class=\"xml\">\n</span></code></pre>\n<p>The pinginput function allows us to take a more interactive look at where our requests go. pinginput uses the input we give it as the second element in the chash_key function tuple.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\nchapp:pinginput(someinput).\n</code></pre>\n<p>we can see that by calling this function multiple times with the same input, the same vnode processes the request.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\nchapp:pinginput(someinput).\n{pong,<span class=\"hljs-number\">959110449498405040071168171470060731649205731328</span>}\nchapp:pinginput(someinput).\n{pong,<span class=\"hljs-number\">959110449498405040071168171470060731649205731328</span>}\nchapp:pinginput(someinput).\n{pong,<span class=\"hljs-number\">959110449498405040071168171470060731649205731328</span>}\n</code></pre>\n<p>We can also see that by calling pinginput with a different input results in a different vnode handling the request.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\nchapp:pinginput(otherinput).\n{pong,<span class=\"hljs-number\">342539446249430371453988632667878832731859189760</span>}\nchapp:pinginput(otherinput).\n{pong,<span class=\"hljs-number\">342539446249430371453988632667878832731859189760</span>}\nchapp:pinginput(otherinput).\n{pong,<span class=\"hljs-number\">342539446249430371453988632667878832731859189760</span>}\n</code></pre>\n"}}}