{"data":{"post":{"body":"<p>As seen in the <a href=\"http://www.christopherbiscardi.com/2013/01/13/riak-core-quickstart/\">quickstart post</a>; the default Riak Core template gives you a <code>myapp:ping().</code> method.<br>\nI named my application spades, so my files are named <code>spades.erl</code> and <code>spades_vnode.erl</code> with the function being called as <code>spades:ping().</code></p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"erlang\"</span>&gt;\n%% File: spades.erl\n%% <span class=\"hljs-symbol\">@doc</span> Pings a <span class=\"hljs-built_in\">random</span> vnode <span class=\"hljs-keyword\">to</span> make sure communication is functional\n<span class=\"hljs-built_in\">ping</span>() -&gt;\n  DocIdx = riak_core_util:chash_key({&lt;&lt;<span class=\"hljs-string\">\"ping\"</span>&gt;&gt;, term_to_binary(<span class=\"hljs-built_in\">now</span>())}),\n  PrefList = riak_core_apl:get_primary_apl(DocIdx, <span class=\"hljs-number\">1</span>, spades),\n  [{IndexNode, _Type}] = PrefList,\n  riak_core_vnode_master:sync_spawn_command(IndexNode, <span class=\"hljs-built_in\">ping</span>, spades_vnode_master).\n</code></pre>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"erlang\"</span>&gt;\n<span class=\"hljs-comment\">%% File: spades_vnode.erl</span>\n<span class=\"hljs-comment\">%% Sample command: respond to a ping</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">handle_command</span><span class=\"hljs-params\">(ping, _Sender, State)</span> -&gt;</span>\n  {reply, {pong, State#state.partition}, State};\n</code></pre>\n<p>All commands we execute as <code>myapp:command().</code> (such as <code>spades:ping().</code>) route through the myapp.erl functions.</p>\n<p>In this case, when we call <code>spades:ping().</code> the ping(). function in spades.erl is what gets called.</p>\n<p>Let’s take a look at the first line of code.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\n    DocIdx = riak_core_util:chash_key({&lt;&lt;<span class=\"hljs-string\">\"ping\"</span>&gt;&gt;, term_to_binary(now())}),\n</code></pre>\n<p>DocIdx is short for Document Index. This appears to be a holdover from before Riak Core was separated from Riak KV.<br>\nWe are using the Consistent Hash (chash) function from the riak_core_util module.<br>\nBy hashing on the “ping” and the current time, we achieve an acceptable level of randomness to distribute our request to a random vnode.</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"erlang\"</span>&gt;\n  PrefList = riak_core_apl:get_primary_apl(DocIdx, 1, spades),\n</code></pre>\n<p>We then create a PreferenceList (PrefList) by using the hash we just created, an N value and a module name.</p>\n"}}}