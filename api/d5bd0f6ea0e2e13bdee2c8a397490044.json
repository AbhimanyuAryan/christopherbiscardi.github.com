{"data":{"post":{"body":"<p>In this post we’ll go through the process to create a basic Clojure/Compojure/libnoir scaffolding project and deploying it to Heroku.</p>\n<p>First, make sure you’ve installed the prereqs:<br>\n<a href=\"http://leiningen.org/\">Leiningen</a> &gt;= v2.0<br>\n<a href=\"https://toolbelt.heroku.com/\">Heroku Toolbelt</a></p>\n<p>and here’s the <a href=\"https://github.com/ChristopherBiscardi/clojure-compojure-libnoir\">GitHub</a> if that’s your style.</p>\n<p>After installing leiningen, run:</p>\n<p><code>lein new compojure scaffold-app</code></p>\n<p>to scaffold a new project. Then cd into the project and run <code>lein ring server</code> to install dependencies and run the app.</p>\n<pre><code>&lt;code <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;cd scaffold-app\nlein ring server```\n\nWe can kill <span class=\"hljs-keyword\">the</span> server <span class=\"hljs-keyword\">with</span> `C-c`. We will need a `Procfile` <span class=\"hljs-keyword\">to</span> deploy <span class=\"hljs-keyword\">to</span> Heroku <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">it</span> will look like this:\n\n`web: java $JVM_OPTS -cp target/scaffolding-app.jar clojure.main -m scaffold-app.handler $PORT`\n\nBe sure <span class=\"hljs-keyword\">to</span> save <span class=\"hljs-keyword\">that</span> <span class=\"hljs-keyword\">as</span> `Procfile`. This says we will have a “web” dyno type, which <span class=\"hljs-keyword\">is</span> a special type <span class=\"hljs-keyword\">on</span> heroku <span class=\"hljs-keyword\">that</span> <span class=\"hljs-keyword\">is</span> allowed <span class=\"hljs-keyword\">to</span> receive web traffic.\n\nWe need a `:main` namespace <span class=\"hljs-keyword\">in</span> our app so <span class=\"hljs-keyword\">that</span> `lein <span class=\"hljs-built_in\">run</span>` knows how <span class=\"hljs-keyword\">to</span> <span class=\"hljs-built_in\">run</span> <span class=\"hljs-keyword\">the</span> app.\n\nInside <span class=\"hljs-keyword\">of</span> `project.clj` add `:main` <span class=\"hljs-keyword\">and</span> a dependency <span class=\"hljs-keyword\">on</span> `lib-noir`, <span class=\"hljs-keyword\">from</span> which we will use a jetty adapter. We also want <span class=\"hljs-keyword\">to</span> add `min-lein-<span class=\"hljs-built_in\">version</span>` so <span class=\"hljs-keyword\">that</span> heroku uses lein <span class=\"hljs-number\">2.0</span> <span class=\"hljs-keyword\">and</span> add a section <span class=\"hljs-keyword\">for</span> our `:uberjar-<span class=\"hljs-built_in\">name</span>`. This will help us out <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">some</span> startup-timing issues we could encounter otherwise.\n\n</code></pre>\n<p><code class=\"clojure\">(defproject scaffold-app “0.1.0-SNAPSHOT”\n:description “FIXME: write description”\n:url “<a href=\"http://example.com/FIXME\">http://example.com/FIXME</a>”\n:dependencies [[org.clojure/clojure “1.5.1”]\n[lib-noir “0.7.9”]\n[compojure “1.1.6”]]\n:main scaffold-app.handler\n:min-lein-version “2.0.0”\n:uberjar-name “scaffolding-app.jar”\n:plugins [[lein-ring “0.8.10”]]\n:ring {:handler scaffold-app.handler/app}\n:profiles\n{:dev {:dependencies [[javax.servlet/servlet-api “2.5”]\n[ring-mock “0.1.5”]]}})```</p>\n<p>In <code>src/scaffold_app/handler.clj</code> add <code>ring.adapter.jetty</code> to <code>:use</code> and bracket</p>\n<pre><code>&lt;code <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"clojure\"</span>&gt;(:use [compojure.core]\n      [ring.adapter.jetty :<span class=\"hljs-keyword\">as</span> ring])```\n\n<span class=\"hljs-keyword\">and</span> `-main` <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">the</span> body <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">the</span> port will be <span class=\"hljs-keyword\">given</span> <span class=\"hljs-keyword\">to</span> us <span class=\"hljs-keyword\">from</span> Heroku:\n\n</code></pre>\n<p><code class=\"clojure\">(defn -main [port]\n(run-jetty (handler/site app-routes) {:port (read-string port) :join? false}))```</p>\n<p>At this point you should be able to run <code>lein run 8080</code> to start an instance of the app on port 8080. If this works, you are ready to deploy to Heroku.</p>\n<p>Assuming you have git, a Heroku account and the Toolbelt (mentioned at the top of the post) installed we can deploy to heroku in this fashion: (Remember to change “scaffolding-clojure” to something else. There is already an app with that name that exists on heroku.)</p>\n<pre><code>&lt;code <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"bash\"</span>&gt;git init\nheroku apps:create scaffolding-clojure<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`\n\nheroku’s `</span>apps:create<span class=\"hljs-string\">` adds a “heroku” remote to git.\n\n</span></code></pre>\n<p><code class=\"bash\">git add Procfile .gitignore <a href=\"http://README.md\">README.md</a> project.clj src/ test/\ngit commit -m 'first commit’\ngit push -u heroku master```</p>\n<p>We can open our app with <code>heroku open</code> or watch it run with <code>heroku logs --tail</code></p>\n<p>In the next post we’ll dive into lib-noir a bit to investigate potential applications (such as JSON APIs).</p>\n<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a></p>\n"}}}