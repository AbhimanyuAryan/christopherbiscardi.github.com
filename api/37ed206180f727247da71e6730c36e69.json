{"data":{"post":{"body":"<p><a href=\"http://www.christopherbiscardi.com/2014/01/10/getting-started-with-snap-and-user-authentication-part-2/\">Part 2</a></p>\n<p>Before we get started, there is a quickstart on the snap-framework site <a href=\"http://snapframework.com/docs/quickstart\">here</a> that goes into the <code>barebones</code> scaffold project a bit. This course will go a little more in depth into the <code>default</code> project, exploring user authentication.</p>\n<p>I use <a href=\"https://github.com/Paczesiowa/hsenv\">hsenv</a> to create separate Haskell environments, but that is not a requirement and beginners may be more comfortable installing the <a href=\"http://www.haskell.org/platform/\">Haskell Platform</a></p>\n<p>If you wish to use hsenv, you can run this on newer versions:</p>\n<pre><code>&lt;code <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;hsenv <span class=\"hljs-comment\">--ghc=7.6.3</span>\n</code></pre>\n<p>or download the package for ghc-7.6.3 <a href=\"http://www.haskell.org/ghc/download_ghc_7_6_3\">here</a> and run this:</p>\n<pre><code>&lt;<span class=\"hljs-selector-tag\">code</span> class=<span class=\"hljs-string\">\"bash\"</span>&gt;hsenv --ghc=/path/to/downloaded/ghc-<span class=\"hljs-number\">7.6</span>.<span class=\"hljs-number\">3</span>-x86_64-apple-darwin<span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.bz2</span>\n</code></pre>\n<p>From here on out the process is the same if you’re using hsenv or not.<br>\nCreate a new directory named “abc” and enter it. This will also function as the name of our project and executable.</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"bash\"</span>&gt;<span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-keyword\">abc</span>\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-keyword\">abc</span>\n</code></pre>\n<p>It’s good to update the package list when starting a new project:</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"bash\"</span>&gt;cabal update\ncabal <span class=\"hljs-keyword\">install</span> cabal-<span class=\"hljs-keyword\">install</span>\n</code></pre>\n<p>After updating and installing the new version of cabal-instal we can install snap:</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"bash\"</span>&gt;cabal install snap\n</code></pre>\n<p>At this point we will have the <code>snap</code> CLI and can run init to scaffold a default project. After scaffolding, we then run <code>cabal install</code> to compile the binary and <code>abc</code> to run the project. <code>abc</code> will also take a port as such: <code>abc -p 8000</code></p>\n<pre><code>&lt;<span class=\"hljs-selector-tag\">code</span> class=<span class=\"hljs-string\">\"bash\"</span>&gt;snap init\ncabal install\nabc -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">8000</span>\n</code></pre>\n<p>Our app, abc, should now be running. Navigate to <code>localhost:8000</code> (or the port you specified) in your browser to take a look.</p>\n<p>In the next post we’ll take a look at the code we generated and take a brief overview of what it does.</p>\n<p><a href=\"http://www.christopherbiscardi.com/2014/01/10/getting-started-with-snap-and-user-authentication-part-2/\">Part 2 – Auth</a></p>\n<p><a href=\"http://www.christopherbiscardi.com/2014/01/11/getting-started-with-snap-and-user-authentication-part-3/\">Part 3 – Postgres Backed Auth</a></p>\n"}}}