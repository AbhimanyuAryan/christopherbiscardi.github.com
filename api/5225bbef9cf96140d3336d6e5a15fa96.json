{"data":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a></p>\n<p><a href=\"https://github.com/ChristopherBiscardi/Getting-Started-with-Snap-and-User-Authentication\">Git Repo</a><br>\n<a href=\"http://www.christopherbiscardi.com/2014/01/07/getting-started-with-snap-and-user-authentication-part-1/\">part 1</a></p>\n<p>The file structure now looks like this:</p>\n<pre><code>      -<span class=\"ruby\"> abc.cabal\n</span>      -<span class=\"ruby\"> log/\n</span>         -<span class=\"ruby\"> access.log\n</span>         -<span class=\"ruby\"> error.log\n</span>      -<span class=\"ruby\"> snaplets/\n</span>         -<span class=\"ruby\"> heist/\n</span>            -<span class=\"ruby\"> templates/\n</span>               -<span class=\"ruby\"> _login.tpl\n</span>               -<span class=\"ruby\"> _new_user.tpl\n</span>               -<span class=\"ruby\"> base.tpl\n</span>               -<span class=\"ruby\"> index.tpl\n</span>               -<span class=\"ruby\"> login.tpl\n</span>               -<span class=\"ruby\"> new_user.tpl\n</span>               -<span class=\"ruby\"> userform.tpl\n</span>      -<span class=\"ruby\"> src/\n</span>         -<span class=\"ruby\"> Application.hs\n</span>         -<span class=\"ruby\"> Main.hs\n</span>         -<span class=\"ruby\"> Site.hs\n</span>      -<span class=\"ruby\"> static/\n</span>         -<span class=\"ruby\"> screen.css\n</span></code></pre>\n<p><code>abc.cabal</code> includes our dependencies and build information. This file is read when we run <code>cabal install</code></p>\n<p><code>log</code> includes two files that log out what browsers <code>access</code> the site and what <code>error</code>s occur.</p>\n<p><code>snaplets</code> is where our snaplets store their files. In this case we only have <code>heist</code> there, which contains a <code>templates</code> folder that includes the templates we use to render the site.</p>\n<p><code>static</code> includes a simple stylesheet that is served when we visit the site.</p>\n<p><code>src</code> is the folder we’re currently concerned with. It includes three files:</p>\n<h5>Main.hs</h5>\n<p>This file contains some boilerplate for dynamic recompilation of a snap site. We’ll be leaving this file alone.</p>\n<h5>Application.hs</h5>\n<p>Here we define our App datatype with the snaplets we will be using.</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"haskell\"</span>&gt;data App = App\n    { <span class=\"hljs-title\">_heist</span> :: Snaplet (Heist App)\n    , <span class=\"hljs-title\">_sess</span> :: Snaplet SessionManager\n    , <span class=\"hljs-title\">_auth</span> :: Snaplet (AuthManager App)\n    }```\n\nIn this <span class=\"hljs-keyword\">case</span> we are <span class=\"hljs-keyword\">using</span> `heist`, `sessions` <span class=\"hljs-keyword\">and</span> `authentication`.\n\nThen we make <span class=\"hljs-keyword\">a</span> call <span class=\"hljs-built_in\">to</span> `makeLenses`\n\n`makeLenses <span class=\"hljs-string\">''</span>App`\n\n`makeLenses` does some things under <span class=\"hljs-keyword\">the</span> hood like creating getters/setters <span class=\"hljs-keyword\">and</span> changing <span class=\"hljs-keyword\">the</span> names <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> snaplets <span class=\"hljs-keyword\">in</span> our app <span class=\"hljs-built_in\">to</span> remove <span class=\"hljs-keyword\">the</span> underscore. This means that `<span class=\"hljs-title\">_auth</span>` will be referred <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">as</span> `auth` <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">the</span> rest <span class=\"hljs-keyword\">of</span> our app, including <span class=\"hljs-keyword\">in</span> `src/Site.hs`.\n\nWe <span class=\"hljs-keyword\">then</span> define <span class=\"hljs-keyword\">an</span> instance <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> Heist Snaplet so we don’t have <span class=\"hljs-built_in\">to</span> use `<span class=\"hljs-keyword\">with</span> heist` every <span class=\"hljs-built_in\">time</span> we want <span class=\"hljs-built_in\">to</span> render <span class=\"hljs-keyword\">a</span> template (More about this later).\n\n</code></pre>\n<p><code class=\"haskell\">instance HasHeist App where\nheistLens = subSnaplet heist```</p>\n<p>and finally we declare a type alias so that we can use <code>AppHandler</code> instead of the longer <code>Handler App App</code> in the type signatures for our routes.</p>\n<p><code>type AppHandler = Handler App App</code></p>\n<h5>Site.hs</h5>\n<p>This is where the meat of our site lives. The routing code, handlers and initialization for the entire app.</p>\n<p>The first route is <code>&quot;/login&quot;</code> which uses <code>handleLoginSubmit</code>.</p>\n<p><code>(&quot;/login&quot;, with auth handleLoginSubmit)</code></p>\n<p><code>with auth</code> lets us work in the auth Snaplet for <code>handleLoginSubmit</code>.</p>\n<pre><code>&lt;<span class=\"hljs-selector-tag\">code</span> class=<span class=\"hljs-string\">\"haskell\"</span>&gt;handleLoginSubmit :: Handler App (AuthManager App) ()\nhandleLoginSubmit =\n    loginUser <span class=\"hljs-string\">\"login\"</span> <span class=\"hljs-string\">\"password\"</span> Nothing\n              (_ -&gt; handleLogin err) (redirect <span class=\"hljs-string\">\"/\"</span>)\n  where\n    err = Just <span class=\"hljs-string\">\"Unknown user or password\"</span>```\n\nSince we’re working <span class=\"hljs-keyword\">in</span> the auth Snaplet our type signature <span class=\"hljs-keyword\">for</span> the handler has the type `Handler App (AuthManager App) ()`, which is slightly different from the type we aliased <span class=\"hljs-keyword\">in</span> `Application.hs`.\n\n`loginUser` is <span class=\"hljs-selector-tag\">a</span> function from the auth snaplet. It takes the `username` field and the `password` field from <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">form</span> submission, <span class=\"hljs-selector-tag\">a</span> “remember” field, <span class=\"hljs-selector-tag\">a</span> failure function and <span class=\"hljs-selector-tag\">a</span> success function, <span class=\"hljs-keyword\">in</span> that <span class=\"hljs-attribute\">order</span>. The type signature looks like this:\n\n</code></pre>\n<p><code class=\"haskell\">loginUser\n:: ByteString – name of username field\n-&gt; ByteString – name of password field\n-&gt; Maybe ByteString – name of remember field (<code>Nothing</code> means there isn’t one)\n-&gt; (AuthFailure -&gt; Handler b (AuthManager b) ()) – failure function\n-&gt; Handler b (AuthManager b) () – success function\n-&gt; Handler b (AuthManager b) () – return value is a handler</p>\n<pre><code>\nSo going back to `handleLoginSubmit` we <span class=\"hljs-keyword\">use</span>:  \n<span class=\"hljs-string\">`\"login\"`</span> <span class=\"hljs-keyword\">as</span> the username <span class=\"hljs-keyword\">field</span>  \n<span class=\"hljs-string\">`\"password\"`</span> <span class=\"hljs-keyword\">as</span> the <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">field</span>  \n<span class=\"hljs-string\">`Nothing`</span> <span class=\"hljs-keyword\">as</span> the remember <span class=\"hljs-keyword\">field</span>  \n<span class=\"hljs-string\">`_ -&gt; handleLogin err`</span> <span class=\"hljs-keyword\">as</span> our <span class=\"hljs-keyword\">error</span> <span class=\"hljs-keyword\">function</span>  \n <span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">`redirect \"/\"`</span> <span class=\"hljs-keyword\">as</span> our <span class=\"hljs-keyword\">success</span> <span class=\"hljs-keyword\">function</span>.\n\n<span class=\"hljs-string\">`err`</span> <span class=\"hljs-keyword\">is</span> defined <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">`Just \"Unknown user or password\"`</span> which matches up <span class=\"hljs-keyword\">with</span> the <span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">`handleLogin`</span>.\n\nThe <span class=\"hljs-string\">`handleLogin`</span> code will be covered <span class=\"hljs-keyword\">in</span> a Heist tutorial <span class=\"hljs-keyword\">at</span> another <span class=\"hljs-keyword\">time</span>, but suffice it <span class=\"hljs-keyword\">to</span> say that <span class=\"hljs-string\">`handleLogin`</span> <span class=\"hljs-keyword\">is</span> rendering the login <span class=\"hljs-keyword\">form</span> <span class=\"hljs-keyword\">with</span> the <span class=\"hljs-keyword\">error</span> that we’ve supplied it (which <span class=\"hljs-keyword\">is</span> “<span class=\"hljs-keyword\">Unknown</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">password</span>”).\n\nOur <span class=\"hljs-string\">`\"/logout\"`</span> route <span class=\"hljs-keyword\">is</span> pretty simple. Just <span class=\"hljs-keyword\">call</span> the snaplet-auth supplied <span class=\"hljs-keyword\">function</span> <span class=\"hljs-string\">`logout`</span> <span class=\"hljs-keyword\">and</span> redirect <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">`\"/\"`</span>\n\n<span class=\"hljs-string\">`\"/new_user\"`</span> does a similar thing, <span class=\"hljs-keyword\">except</span> it displays the <span class=\"hljs-keyword\">empty</span> <span class=\"hljs-keyword\">form</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-string\">`GET`</span> request <span class=\"hljs-keyword\">and</span> handles a <span class=\"hljs-keyword\">form</span> submit <span class=\"hljs-keyword\">on</span> <span class=\"hljs-string\">`POST`</span>.\n\n<span class=\"hljs-keyword\">Next</span> we’ll <span class=\"hljs-keyword\">replace</span> the backend, currently a <span class=\"hljs-keyword\">json</span> <span class=\"hljs-keyword\">file</span>, <span class=\"hljs-keyword\">with</span> postgres.\n\n\n</code></pre>\n"}}}