{"data":{"root":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611482/snap_sks60m.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611482/snap_sks60m.png\" alt=\"snap-framework\"></a></p>\n<p>Snap 1.0 isn’t on Hackage yet, but here’s how you can play with it now.</p>\n<p>NOTE: This was written using ghc-7.8.3. The repo is <a href=\"https://github.com/ChristopherBiscardi/snap-micro-services\">on GitHub</a></p>\n<p>First we’ll make a new directory for the project and one for the dependencies, then clone the dependencies for 1.0 that aren’t on Hackage:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot; style=&quot;overflow-x:auto&quot;&gt;mkdir auth_server\ncd auth_server\nmkdir deps\ngit clone git@github.com:snapframework/io-streams-haproxy.git deps/io-streams-haproxy\ngit clone git@github.com:snapframework/snap.git deps/snap\ngit clone git@github.com:snapframework/snap-core.git deps/snap-core\ngit clone git@github.com:snapframework/snap-server.git deps/snap-server\ngit clone git@github.com:snapframework/snap-loader-static.git deps/snap-loader-static\ngit clone git@github.com:snapframework/heist.git deps/heist\ngit clone git@github.com:snapframework/snap-templates.git deps/snap-templates\n</code></pre>\n<p>We should have a file structure that looks like this:</p>\n<ul>\n<li>auth_server/ - deps/ - io-streams-haproxy/</li>\n<li>snap/</li>\n<li>snap-core/</li>\n<li>snap-server/</li>\n<li>snap-loader-static/</li>\n<li>heist/</li>\n</ul>\n<p>We can now get a scaffolded app using <code>snap-templates</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;cd auth_server/deps/snap-templates\ncabal build\n</code></pre>\n<p>Building <code>snap-templates</code> gives us the <code>snap</code> executable that we used to use from the <code>snap</code> project. In the project root, let’s init a new scaffold:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;cd auth_server\n./deps/snap-templates/dist/build/snap/snap init\n</code></pre>\n<p>Which leaves us with this structure at the top level:</p>\n<ul>\n<li>auth_server/ - auth-server.cabal</li>\n<li>deps/</li>\n<li>snaplets/</li>\n<li>src/</li>\n<li>static/</li>\n</ul>\n<p>If you haven’t created a new sandbox for this project, do that now and install the dependencies for the scaffold into the sandbox.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;bash&quot;&gt;cd auth_server\ncabal sandbox init\ncabal install --only-dependencies\n</code></pre>\n<p>We can’t build the app yet, since the scaffold is missing two things. We need to add <code>map-syntax</code> as a dependency to <code>auth-server.cabal</code> and we need to replace <code>noSplices</code> with <code>mempty</code> in <code>Site.hs</code> since <code>noSplices</code> has been deprecated.</p>\n<p>First, in <code>auth-server.cabal</code>, under <code>Build-depends</code> add <code>map-syntax</code>:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>    xmlhtml                   &gt;= 0.1,\n    map-syntax                &gt;= 0.1\n</code></pre>\n<p>Next, we need to add two imports to <code>src/Site.hs</code>:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot;&gt;import           Data.Map.Syntax\nimport           Data.Monoid        (mempty)\n</code></pre>\n<p>as well as replace <code>noSplices</code> with <code>mempty</code>:</p>\n<p>Before:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>errs = maybe noSplices splice authError\n</code></pre>\n<p>After:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code> errs = maybe mempty splice authError\n</code></pre>\n<p>We can now build and run the project:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>cd auth_server\ncabal build\n./dist/build/auth-server/auth-server\n</code></pre>\n<p>We now have a working Snap 1.0 app to play with. In a future blog post, we’ll explore the creation of a Users service.</p>\n","attributes":{"title":"Working with Snap 1.0","updatedAt":"Oct 5th, 2014","publishedAt":"Oct 5th, 2014","timeToRead":1,"headerImage":null,"url":"/2014/10/5/working-with-snap-1-0/","canonicalURL":null,"excerpt":"","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}