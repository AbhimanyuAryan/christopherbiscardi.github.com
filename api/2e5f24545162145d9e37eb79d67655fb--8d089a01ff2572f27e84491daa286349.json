{"data":{"root":{"post":{"body":"<p><a href=\"http://res.cloudinary.com/diqzbm8lz/image/upload/v1428611521/CBLogo_2014_transparent_swcmig.png\"><img src=\"http://res.cloudinary.com/diqzbm8lz/image/upload/h_300,w_300/v1428611521/CBLogo_2014_transparent_swcmig.png\" alt=\"CBLogo_2014_transparent\"></a></p>\n<p><a href=\"https://github.com/ChristopherBiscardi/Getting-Started-with-Snap-and-User-Authentication\">Git Repo</a>\n<a href=\"http://www.christopherbiscardi.com/2014/01/07/getting-started-with-snap-and-user-authentication-part-1/\">part 1</a></p>\n<p>The file structure now looks like this:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>  - abc.cabal\n  - log/\n     - access.log\n     - error.log\n  - snaplets/\n     - heist/\n        - templates/\n           - _login.tpl\n           - _new_user.tpl\n           - base.tpl\n           - index.tpl\n           - login.tpl\n           - new_user.tpl\n           - userform.tpl\n  - src/\n     - Application.hs\n     - Main.hs\n     - Site.hs\n  - static/\n     - screen.css\n</code></pre>\n<p><code>abc.cabal</code> includes our dependencies and build information. This file is read\nwhen we run <code>cabal install</code></p>\n<p><code>log</code> includes two files that log out what browsers <code>access</code> the site and what\n<code>error</code>s occur.</p>\n<p><code>snaplets</code> is where our snaplets store their files. In this case we only have\n<code>heist</code> there, which contains a <code>templates</code> folder that includes the templates\nwe use to render the site.</p>\n<p><code>static</code> includes a simple stylesheet that is served when we visit the site.</p>\n<p><code>src</code> is the folder we’re currently concerned with. It includes three files:</p>\n<h5 id=\"mainhs\">Main.hs</h5>\n<p>This file contains some boilerplate for dynamic recompilation of a snap site.\nWe’ll be leaving this file alone.</p>\n<h5 id=\"applicationhs\">Application.hs</h5>\n<p>Here we define our App datatype with the snaplets we will be using.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">data</span> <span class=\"highlight__hljs-type___11WfV\">App</span> = <span class=\"highlight__hljs-type___11WfV\">App</span></span>\n    { _heist :: <span class=\"highlight__hljs-type___11WfV\">Snaplet</span> (<span class=\"highlight__hljs-type___11WfV\">Heist</span> <span class=\"highlight__hljs-type___11WfV\">App</span>)\n    , _sess :: <span class=\"highlight__hljs-type___11WfV\">Snaplet</span> <span class=\"highlight__hljs-type___11WfV\">SessionManager</span>\n    , _auth :: <span class=\"highlight__hljs-type___11WfV\">Snaplet</span> (<span class=\"highlight__hljs-type___11WfV\">AuthManager</span> <span class=\"highlight__hljs-type___11WfV\">App</span>)\n    }\n</code></pre>\n<p>In this case we are using <code>heist</code>, <code>sessions</code> and <code>authentication</code>.</p>\n<p>Then we make a call to <code>makeLenses</code></p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>makeLenses ''App\n</code></pre>\n<p><code>makeLenses</code> does some things under the hood like creating getters/setters and\nchanging the names for the snaplets in our app to remove the underscore. This\nmeans that <code>_auth</code> will be referred to as <code>auth</code> in the rest of our app,\nincluding in <code>src/Site.hs</code>.</p>\n<p>We then define an instance for the Heist Snaplet so we don’t have to use <code>with heist</code> every time we want to render a template (More about this later).</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">HasHeist</span> <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n    heistLens = subSnaplet heist\n</code></pre>\n<p>and finally we declare a type alias so that we can use <code>AppHandler</code> instead of\nthe longer <code>Handler App App</code> in the type signatures for our routes.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>type AppHandler = Handler App App\n</code></pre>\n<h5 id=\"sitehs\">Site.hs</h5>\n<p>This is where the meat of our site lives. The routing code, handlers and\ninitialization for the entire app.</p>\n<p>The first route is <code>&quot;/login&quot;</code> which uses <code>handleLoginSubmit</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>(&quot;/login&quot;,    with auth handleLoginSubmit)\n</code></pre>\n<p><code>with auth</code> lets us work in the auth Snaplet for <code>handleLoginSubmit</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">handleLoginSubmit</span> :: <span class=\"highlight__hljs-type___11WfV\">Handler</span> <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">AuthManager</span> <span class=\"highlight__hljs-type___11WfV\">App</span>) ()\n<span class=\"highlight__hljs-title___1fl8Q\">handleLoginSubmit</span> =\n    loginUser <span class=\"highlight__hljs-string___1SffY\">\"login\"</span> <span class=\"highlight__hljs-string___1SffY\">\"password\"</span> <span class=\"highlight__hljs-type___11WfV\">Nothing</span>\n              (_ -&gt; handleLogin err) (redirect <span class=\"highlight__hljs-string___1SffY\">\"/\"</span>)\n  <span class=\"highlight__hljs-keyword___som98\">where</span>\n    err = <span class=\"highlight__hljs-type___11WfV\">Just</span> <span class=\"highlight__hljs-string___1SffY\">\"Unknown user or password\"</span>\n</code></pre>\n<p>Since we’re working in the auth Snaplet our type signature for the handler has\nthe type <code>Handler App (AuthManager App) ()</code>, which is slightly different from\nthe type we aliased in <code>Application.hs</code>.</p>\n<p><code>loginUser</code> is a function from the auth snaplet. It takes the <code>username</code> field\nand the <code>password</code> field from a form submission, a “remember” field, a failure\nfunction and a success function, in that order. The type signature looks like\nthis:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">loginUser</span>\n  :: <span class=\"highlight__hljs-type___11WfV\">ByteString</span> <span class=\"highlight__hljs-comment___UYk12\">-- name of username field</span>\n     -&gt; <span class=\"highlight__hljs-type___11WfV\">ByteString</span> <span class=\"highlight__hljs-comment___UYk12\">-- name of password field</span>\n     -&gt; <span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">ByteString</span> <span class=\"highlight__hljs-comment___UYk12\">-- name of remember field (`Nothing` means there isn't one)</span>\n     -&gt; (<span class=\"highlight__hljs-type___11WfV\">AuthFailure</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">Handler</span> b (<span class=\"highlight__hljs-type___11WfV\">AuthManager</span> b) ()) <span class=\"highlight__hljs-comment___UYk12\">-- failure function</span>\n     -&gt; <span class=\"highlight__hljs-type___11WfV\">Handler</span> b (<span class=\"highlight__hljs-type___11WfV\">AuthManager</span> b) () <span class=\"highlight__hljs-comment___UYk12\">-- success function</span>\n     -&gt; <span class=\"highlight__hljs-type___11WfV\">Handler</span> b (<span class=\"highlight__hljs-type___11WfV\">AuthManager</span> b) () <span class=\"highlight__hljs-comment___UYk12\">-- return value is a handler</span>\n</code></pre>\n<p>So going back to <code>handleLoginSubmit</code> we use:\n<code>&quot;login&quot;</code> as the username field\n<code>&quot;password&quot;</code> as the password field\n<code>Nothing</code> as the remember field\n<code>_ -&gt; handleLogin err</code> as our error function\nand <code>redirect &quot;/&quot;</code> as our success function.</p>\n<p><code>err</code> is defined as <code>Just &quot;Unknown user or password&quot;</code> which matches up with the\ntype from <code>handleLogin</code>.</p>\n<p>The <code>handleLogin</code> code will be covered in a Heist tutorial at another time, but\nsuffice it to say that <code>handleLogin</code> is rendering the login form with the error\nthat we’ve supplied it (which is “Unknown user or password”).</p>\n<p>Our <code>&quot;/logout&quot;</code> route is pretty simple. Just call the snaplet-auth supplied\nfunction <code>logout</code> and redirect to <code>&quot;/&quot;</code></p>\n<p><code>&quot;/new_user&quot;</code> does a similar thing, except it displays the empty form on <code>GET</code>\nrequest and handles a form submit on <code>POST</code>.</p>\n<p>Next we’ll replace the backend, currently a json file, with postgres.</p>\n","attributes":{"title":"Getting Started With Snap (and User Authentication): Part 2","updatedAt":"Jan 10th, 2014","publishedAt":"Jan 10th, 2014","timeToRead":3,"headerImage":null,"url":"/2014/1/9/getting-started-with-snap-and-user-authentication-part-2/","canonicalURL":null,"excerpt":"","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}