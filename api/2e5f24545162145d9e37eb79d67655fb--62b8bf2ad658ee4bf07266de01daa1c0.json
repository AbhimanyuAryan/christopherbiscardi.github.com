{"data":{"root":{"post":{"body":"<p>I wrote a simple Haxl DataSource and I thought it would be good to share. If you\ndon’t know what Haxl is you can find out more\n<a href=\"https://github.com/facebook/Haxl\">here</a>.</p>\n<p>The gist with the relevant .cabal and DataSource is\n<a href=\"https://gist.github.com/ChristopherBiscardi/45c765eb292d96ab4549\">here</a></p>\n<h2 id=\"table\">Table</h2>\n<p>We will need a people table to store our people:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-keyword___som98\">CREATE</span> <span class=\"highlight__hljs-keyword___som98\">TABLE</span> people (\n    _id bigserial primary <span class=\"highlight__hljs-keyword___som98\">key</span>,\n    first_name <span class=\"highlight__hljs-built_in___3uuyR\">text</span> <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n    last_name <span class=\"highlight__hljs-built_in___3uuyR\">text</span> <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>,\n    age <span class=\"highlight__hljs-built_in___3uuyR\">int</span> <span class=\"highlight__hljs-keyword___som98\">NOT</span> <span class=\"highlight__hljs-literal___1V6TY\">NULL</span>\n);\n</code></pre>\n<p>And some data to query:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-keyword___som98\">INSERT</span> <span class=\"highlight__hljs-keyword___som98\">INTO</span> people (<span class=\"highlight__hljs-string___1SffY\">\"first_name\"</span>, <span class=\"highlight__hljs-string___1SffY\">\"last_name\"</span>, <span class=\"highlight__hljs-string___1SffY\">\"age\"</span>) <span class=\"highlight__hljs-keyword___som98\">VALUES</span> (<span class=\"highlight__hljs-string___1SffY\">'Bob'</span>,<span class=\"highlight__hljs-string___1SffY\">'Seger'</span>,<span class=\"highlight__hljs-number___2gmaH\">69</span>);\n<span class=\"highlight__hljs-keyword___som98\">INSERT</span> <span class=\"highlight__hljs-keyword___som98\">INTO</span> people (<span class=\"highlight__hljs-string___1SffY\">\"first_name\"</span>, <span class=\"highlight__hljs-string___1SffY\">\"last_name\"</span>, <span class=\"highlight__hljs-string___1SffY\">\"age\"</span>) <span class=\"highlight__hljs-keyword___som98\">VALUES</span> (<span class=\"highlight__hljs-string___1SffY\">'Billy'</span>,<span class=\"highlight__hljs-string___1SffY\">'Idol'</span>,<span class=\"highlight__hljs-number___2gmaH\">58</span>);\n</code></pre>\n<p>which gives us a table that looks like:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>peopledb=# select * from people;\n _id | first_name | last_name | age\n-----+------------+-----------+-----\n   1 | Bob        | Seger     |  69\n   2 | Billy      | Idol      |  58\n(2 rows)\n</code></pre>\n<p>We can then head into ghci and check out the Haxl DataSource.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">ghci</span> <span class=\"highlight__hljs-type___11WfV\">DataSource</span>.hs\n<span class=\"highlight__hljs-title___1fl8Q\">let</span> cinfo = defaultConnectInfo {\n    connectUser = <span class=\"highlight__hljs-string___1SffY\">\"pgsuper\"</span>\n  , connectPassword = <span class=\"highlight__hljs-string___1SffY\">\"password\"</span>\n  , connectDatabase = <span class=\"highlight__hljs-string___1SffY\">\"peopledb\"</span>\n  }\n<span class=\"highlight__hljs-title___1fl8Q\">pgstate</span>\n</code></pre>\n<p>If we check out the value of <code>r</code> we see a <code>Just Person</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">Just</span> (<span class=\"highlight__hljs-type___11WfV\">Person</span> {_id = <span class=\"highlight__hljs-type___11WfV\">PersonId</span> <span class=\"highlight__hljs-number___2gmaH\">1</span>, first_name = <span class=\"highlight__hljs-string___1SffY\">\"Bob\"</span>, last_name = <span class=\"highlight__hljs-string___1SffY\">\"Seger\"</span>, age = <span class=\"highlight__hljs-number___2gmaH\">69</span>})\n</code></pre>\n<h2 id=\"the-code\">The Code</h2>\n<p>First, we need a datatype to be querying. Of note is that we’ve <code>newtype</code>'d\n<code>PersonId</code>, so we’ll use <code>GeneralizedNewtypeDeriving</code> to get the <code>FromField</code>\ninstance from <code>Int</code></p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">newtype</span> <span class=\"highlight__hljs-type___11WfV\">PersonId</span> = <span class=\"highlight__hljs-type___11WfV\">PersonId</span> <span class=\"highlight__hljs-type___11WfV\">Int</span> <span class=\"highlight__hljs-keyword___som98\">deriving</span> (<span class=\"highlight__hljs-type___11WfV\">Show</span>, <span class=\"highlight__hljs-type___11WfV\">Eq</span>, <span class=\"highlight__hljs-type___11WfV\">FromField</span>)</span>\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">data</span> <span class=\"highlight__hljs-type___11WfV\">Person</span> = <span class=\"highlight__hljs-type___11WfV\">Person</span> { <span class=\"highlight__hljs-title___1fl8Q\">_id</span>        :: <span class=\"highlight__hljs-type___11WfV\">PersonId</span>\n                     , <span class=\"highlight__hljs-title___1fl8Q\">first_name</span> :: <span class=\"highlight__hljs-type___11WfV\">Text</span>\n                     , <span class=\"highlight__hljs-title___1fl8Q\">last_name</span>  :: <span class=\"highlight__hljs-type___11WfV\">Text</span>\n                     , <span class=\"highlight__hljs-title___1fl8Q\">age</span>        :: <span class=\"highlight__hljs-type___11WfV\">Int</span> } <span class=\"highlight__hljs-keyword___som98\">deriving</span> (<span class=\"highlight__hljs-type___11WfV\">Show</span>, <span class=\"highlight__hljs-type___11WfV\">Typeable</span>)</span>\n</code></pre>\n<p>Next we’ll define our requests as a GADT. In this case we only have a single\nrequest type: “GetPerson”, which takes a <code>PersonId</code> and looks up that user.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">data</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span> a where</span>\n  <span class=\"highlight__hljs-type___11WfV\">GetPerson</span> :: <span class=\"highlight__hljs-type___11WfV\">PersonId</span> -&gt; <span class=\"highlight__hljs-type___11WfV\">PGReq</span> (<span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Person</span>)\n  <span class=\"highlight__hljs-keyword___som98\">deriving</span> <span class=\"highlight__hljs-type___11WfV\">Typeable</span>\n</code></pre>\n<p>Now we need some simple boilerplate. The Hashable instance defines the hash of our request types for the cache. In this case a <code>GetPerson</code> request is as a tuple of <code>(0,PersonId)</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">deriving</span> <span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">Eq</span> (<span class=\"highlight__hljs-type___11WfV\">PGReq</span> a)\n<span class=\"highlight__hljs-title___1fl8Q\">deriving</span> <span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">Show</span> (<span class=\"highlight__hljs-type___11WfV\">PGReq</span> a)\n<span class=\"highlight__hljs-class___mOeOV\">\n<span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">Show1</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span> show1 = show\n<span class=\"highlight__hljs-class___mOeOV\">\n<span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">Hashable</span> (<span class=\"highlight__hljs-type___11WfV\">PGReq</span> <span class=\"highlight__hljs-title___1fl8Q\">a</span>) <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  hashWithSalt s (<span class=\"highlight__hljs-type___11WfV\">GetPerson</span> (<span class=\"highlight__hljs-type___11WfV\">PersonId</span> pid)) = hashWithSalt s (<span class=\"highlight__hljs-number___2gmaH\">0</span>::<span class=\"highlight__hljs-type___11WfV\">Int</span>, pid)\n</code></pre>\n<p>Following the boilerplate we’ll create a <code>StateKey</code> instance. Since this is a simple implementation, we’ll put the connection information in our state so we can create connections later. We’ll also define a function to initialize said state.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">StateKey</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  <span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">data</span> <span class=\"highlight__hljs-type___11WfV\">State</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span> =</span>\n    <span class=\"highlight__hljs-type___11WfV\">PGState</span>\n      { connInfo :: <span class=\"highlight__hljs-type___11WfV\">ConnectInfo</span> }\n\n<span class=\"highlight__hljs-title___1fl8Q\">initHaxlState</span>\n  :: <span class=\"highlight__hljs-type___11WfV\">ConnectInfo</span>\n  -&gt; <span class=\"highlight__hljs-type___11WfV\">IO</span> (<span class=\"highlight__hljs-type___11WfV\">State</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">initHaxlState</span> cInfo = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  return <span class=\"highlight__hljs-type___11WfV\">PGState</span>\n    { connInfo = cInfo }\n</code></pre>\n<p>Haxl needs us to name our DataSource and tell it which function to use for\nfetching data.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">DataSourceName</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  dataSourceName _ = <span class=\"highlight__hljs-string___1SffY\">\"Postgres\"</span>\n<span class=\"highlight__hljs-class___mOeOV\">\n<span class=\"highlight__hljs-keyword___som98\">instance</span> <span class=\"highlight__hljs-type___11WfV\">DataSource</span> u <span class=\"highlight__hljs-type___11WfV\">PGReq</span> <span class=\"highlight__hljs-keyword___som98\">where</span></span>\n  fetch = pgFetch\n</code></pre>\n<p>Then we can define our asynchronous fetch functions which will process our\n<code>BlockedFetch</code>es. We put a failure on exceptions and pass the data through on a\nsuccess.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">pgFetch</span>\n :: <span class=\"highlight__hljs-type___11WfV\">State</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span>\n -&gt; <span class=\"highlight__hljs-type___11WfV\">Flags</span>\n -&gt; u\n -&gt; [<span class=\"highlight__hljs-type___11WfV\">BlockedFetch</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span>]\n -&gt; <span class=\"highlight__hljs-type___11WfV\">PerformFetch</span>\n<span class=\"highlight__hljs-title___1fl8Q\">pgFetch</span> <span class=\"highlight__hljs-type___11WfV\">PGState</span> {..} _flags _user bfs =\n  <span class=\"highlight__hljs-type___11WfV\">AsyncFetch</span> $ \\inner -&gt; <span class=\"highlight__hljs-keyword___som98\">do</span>\n    asyncs  <span class=\"highlight__hljs-type___11WfV\">BlockedFetch</span> <span class=\"highlight__hljs-type___11WfV\">PGReq</span>\n  -&gt; <span class=\"highlight__hljs-type___11WfV\">IO</span> (<span class=\"highlight__hljs-type___11WfV\">Async</span> ())\n<span class=\"highlight__hljs-title___1fl8Q\">fetchAsync</span> creds (<span class=\"highlight__hljs-type___11WfV\">BlockedFetch</span> req rvar) =\n  async $ <span class=\"highlight__hljs-keyword___som98\">do</span>\n    bracket (connect creds) (close) $ \\conn -&gt; <span class=\"highlight__hljs-keyword___som98\">do</span>\n      e  putFailure rvar (ex :: <span class=\"highlight__hljs-type___11WfV\">SomeException</span>)\n        <span class=\"highlight__hljs-type___11WfV\">Right</span> val -&gt; putSuccess rvar val\n</code></pre>\n<p>Finally, we can define our application logic. In this case our only request type\nis <code>GetPerson</code>, so we need to get a single <code>Person</code> by <code>PersonId</code>. We could also\nwrite more <code>fetchReq</code> patterns if we had more request types.</p>\n<p><code>getPerson</code> is the function we’ll actually call to get a person by id; As seen\nin the intro to this post.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">fetchReq</span>\n  :: <span class=\"highlight__hljs-type___11WfV\">Connection</span>\n  -&gt; <span class=\"highlight__hljs-type___11WfV\">PGReq</span> a\n  -&gt; <span class=\"highlight__hljs-type___11WfV\">IO</span> a\n<span class=\"highlight__hljs-title___1fl8Q\">fetchReq</span> conn (<span class=\"highlight__hljs-type___11WfV\">GetPerson</span> (<span class=\"highlight__hljs-type___11WfV\">PersonId</span> pid)) = <span class=\"highlight__hljs-keyword___som98\">do</span>\n  people  <span class=\"highlight__hljs-type___11WfV\">GenHaxl</span> u (<span class=\"highlight__hljs-type___11WfV\">Maybe</span> <span class=\"highlight__hljs-type___11WfV\">Person</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">getPerson</span> pid = dataFetch (<span class=\"highlight__hljs-type___11WfV\">GetPerson</span> pid)\n</code></pre>\n","attributes":{"title":"A Foray Into Haxl: PostgreSQL Simple","updatedAt":"Jul 4th, 2014","publishedAt":"Jul 4th, 2014","timeToRead":3,"headerImage":null,"url":"/2014/7/4/a-foray-into-haxl-postgresql-simple/","canonicalURL":null,"excerpt":"I wrote a simple Haxl DataSource and I thought it would be good to share. If you\ndon’t know what Haxl is you can find out more\nhere.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}