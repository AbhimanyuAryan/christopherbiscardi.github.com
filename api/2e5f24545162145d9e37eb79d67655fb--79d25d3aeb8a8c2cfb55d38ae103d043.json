{"data":{"root":{"post":{"body":"<p>I think <a href=\"http://learnyouahaskell.com/starting-out#im-a-list-comprehension\">list\ncomprehensions</a>\nare my favorite reason to pull out Haskell.</p>\n<p>For example: I was recently asked this:</p>\n<p>You have a row of 100 school lockers. For each number from 1 to 100 walk down\nthe line of lockers starting at the beginning, and switch the state of every nth\nlocker. All of the lockers start closed.</p>\n<p>For example:\nwe start off at 1 and switch all the lockers to open. (1,2,3,4,5,…)\nwe then go to 2 and switch all of the lockers evenly divisible by 2. (2,4,6,8…)\nfor 3 we flip every 3rd locker (3,6,9,12,…)\n4 is every 4th locker. (4,8,12,16,…)\netc.</p>\n<h4 id=\"answer-below-this-line\">Answer Below This Line</h4>\n<p>In Haskell this is easily accomplished using a list comprehension.</p>\n<p>We can observe through trial (ie: actually flipping every locker) that the\nlockers are flipped by their factors. (ie: 6 is flipped by 1,2,3,and 6), so\nwe’ll write a quick comprehension to give us the factors of a number:</p>\n<p>In this example, we get the factors of 6</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>[x | x\n</code></pre>\n<p>links:\n<a href=\"http://learnyouahaskell.com/starting-out#texas-ranges\">[1…6]</a>\n<a href=\"http://en.wikipedia.org/wiki/Modulo_operation\">modulo</a>\n<a href=\"http://zvon.org/other/haskell/Outputprelude/mod_f.html\">mod</a>\n<a href=\"http://www.haskell.org/haskellwiki/Infix_operator\"><code>infix</code></a></p>\n<p>Essentially you can read the above code as</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">Give</span> me x <span class=\"highlight__hljs-keyword___som98\">where</span> x is [<span class=\"highlight__hljs-number___2gmaH\">1</span>,<span class=\"highlight__hljs-number___2gmaH\">2</span>,<span class=\"highlight__hljs-number___2gmaH\">3</span>,<span class=\"highlight__hljs-number___2gmaH\">4</span>,<span class=\"highlight__hljs-number___2gmaH\">5</span>,<span class=\"highlight__hljs-number___2gmaH\">6</span>] and <span class=\"highlight__hljs-number___2gmaH\">6</span> is evenly divisible by x\n</code></pre>\n<p>and breaking it down:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-type___11WfV\">Give</span> me x\n[x\n\n<span class=\"highlight__hljs-title___1fl8Q\">where</span>\n|\n\n<span class=\"highlight__hljs-title___1fl8Q\">x</span>\n\n<span class=\"highlight__hljs-title___1fl8Q\">is</span>\n</code></pre>\n<p>We can then realize that if you flip something an even number of times, nothing\nchanges. This means we’re looking for the number with an odd number of factors\nbecause we want the lockers that are open at the end.</p>\n<p>The code to determine an open locker will look like this, where factors is the\ncode we just wrote.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">length</span> factors `mod` <span class=\"highlight__hljs-number___2gmaH\">2</span> == <span class=\"highlight__hljs-number___2gmaH\">1</span>\n</code></pre>\n<p>If we stick that in a list comprehension for all numbers [1…100] we have\neffectively filtered out all of the open lockers.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>[n | n\n</code></pre>\n<p>But wait! There’s more! For the low low price of $19.95 we can realize there’s a\npattern in the results. The pattern happens to be perfect squares. This is\nbecause perfect squares are the only numbers with an odd number of factors!</p>\n<p>for example:\n9’s factors are 1,3 and 9.\nWhile 8’s factors are 1,2,4 and 8</p>\n<p>We can now write a far more efficient list comprehension.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>[x*x | x &lt;- [<span class=\"highlight__hljs-number___2gmaH\">1.</span><span class=\"highlight__hljs-number___2gmaH\">.10</span>]]\n</code></pre>\n<p>Which can be read as:\ngive me x*x where x is [1,2,3,4,5,6,7,8,9,10]</p>\n<p>We can also expand this into an function using an infinite list, just in case we\nwant to calculate how many lockers are open if we have 50081 lockers.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">let</span> lockers = [x*x | x\n</code></pre>\n","attributes":{"title":"Quick Tip: Haskell List Comprehensions","updatedAt":"Feb 8th, 2013","publishedAt":"Feb 8th, 2013","timeToRead":1,"headerImage":null,"url":"/2013/2/8/quick-tip-haskell-list-comprehensions/","canonicalURL":null,"excerpt":"I think list\ncomprehensions\nare my favorite reason to pull out Haskell.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}