{"data":{"root":{"post":{"body":"<p>The github repo for this post is <a href=\"https://github.com/ChristopherBiscardi/snap-postgres-heist\">here</a>.</p>\n<h2 id=\"single-authuser-splice\">Single AuthUser Splice</h2>\n<p>Assuming we have instances and initializations for the Postgres Auth backend and Postgresql-Simple Snaplet, we can do a few things. First, we need to write a Splice for the AuthUser data type. We will only use a couple fields to show how it works.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot; style=&quot;overflow-x:auto&quot;&gt;authUserSplice :: Monad m =&gt;\n                  AuthUser -&gt;\n                  Splices (HeistT n m Template)\nauthUserSplice authUser = do\n  &quot;userLogin&quot; ## I.textSplice (userLogin authUser)\n  &quot;userLoginCount&quot; ## I.textSplice (T.pack $ show $ userLoginCount authUser)\n</code></pre>\n<p>Using <code>##</code>, we are binding the strings <code>&quot;userLogin&quot;</code> and <code>&quot;userLoginCount&quot;</code> to their respective values from the <code>authUser</code> object. <code>userLogin authUser</code> gives us a <code>Text</code> result, so <code>&quot;userLogin&quot;</code> is bound to a text splice. We also bind <code>&quot;userLoginCount&quot;</code> as a text splice by converting the <code>int</code> we get from using <code>userLoginCount</code> on <code>authUser</code>.</p>\n<p>Now that we have our Splice written, letâ€™s write our template.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;html&quot;&gt;&lt;apply template=&quot;base&quot;&gt;\n&lt;h1&gt;&lt;userLogin/&gt;&lt;/h1&gt;\n&lt;p&gt;Number of Times Logged In: &lt;userLoginCount/&gt;&lt;/p&gt;\n&lt;/apply&gt;```\n\nNothing major here. We have used the strings we bound before as tags to display the text from the `authUser` object.\n\nFinally, we can write a Handler to make the database request and render the template using our splice.\n\n</code></pre>\n<p><code class=\"haskell\" style=\"overflow-x:auto\">getFromPostgres :: Handler App (AuthManager App) ()\ngetFromPostgres = do\nresult ```</p>\n<p>Using a simple query to store the data from Postgres in <code>result</code>, we then render using our template (<code>auth_user_splice.tpl</code>) and apply the splice to the data in our result.</p>\n<h2 id=\"list-of-authusers\">List of AuthUsers</h2>\n<p>To display a list of data, the process is very similar.</p>\n<p>We can reuse the <code>authUserSplice</code> we just wrote and map it across the list of data we plan on passing in using <code>mapSplices</code> and <code>runChildrenWith</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot; style=&quot;overflow-x:auto&quot;&gt;authUsersSplice  :: [AuthUser] -&gt; I.Splice AppHandler\nauthUsersSplice = I.mapSplices (I.runChildrenWith . authUserSplice)```\n\nWe will also write a new template to display the information. Included in this is the `authUsers` tag, which we are going to bind in our Handler.\n\n</code></pre>\n<p><code class=\"html\"><apply template=\"base\"></p>\n<dl>\n<authUsers>\n<dt><userLogin/></dt>\n<dd>Number of Times Logged In: <userLoginCount/></dd>\n</authUsers>\n</dl>\n</apply>```\n<p>We can then write our handler as such:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>&lt;code class=&quot;haskell&quot; style=&quot;overflow-x:auto&quot;&gt;getManyFromPostgres :: Handler App (AuthManager App) ()\ngetManyFromPostgres = do\n        results ```\n\nWe are rendering our new template `auth_users_splice.tpl` with our mapped splices bound to `&quot;authUsers&quot;`. The code inside of `&lt;authUsers&gt;` will be run for each result in our list.\n\n\n## End\n\nThat's it. Feel free to pull the code from [github](https://github.com/ChristopherBiscardi/snap-postgres-heist) and leave any questions you have below.\n</code></pre>\n","attributes":{"title":"Snap, Postgres and Heist: Displaying Data from Queries","updatedAt":"Apr 8th, 2014","publishedAt":"Apr 8th, 2014","timeToRead":2,"headerImage":null,"url":"/2014/4/8/snap-postgres-and-heist-displaying-data-from-queries/","canonicalURL":null,"excerpt":"The github repo for this post is here.","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}