{"data":{"post":{"body":"<p>In this post we will go over how to accept environmental variables in Haskell.</p>\n<p><a href=\"http://www.christopherbiscardi.com/post-conventions/\">Conventions</a> used in this post.</p>\n<pre><code>&lt;code <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"haskell\"</span>&gt;<span class=\"hljs-keyword\">import</span> System.Environment\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n</code></pre>\n<p>We can compile this if we put it in a file called <code>env.hs</code>.</p>\n<p><code>&lt;code class=&quot;bash&quot;&gt;ghc env.hs</code></p>\n<p>and run it with an ad-hoc ENV variable:</p>\n<p><code>&lt;code class=&quot;bash&quot;&gt;myvariable=&quot;what&quot; ./env</code></p>\n<p>Which will print out:</p>\n<p><code>&quot;what&quot;</code></p>\n<p>but this will throw an error if the ENV var doesn’t exist:</p>\n<pre><code>&lt;code class=<span class=\"hljs-string\">\"bash\"</span>&gt;λ ./env\n<span class=\"hljs-symbol\">env: myvariable: getEnv:</span> does <span class=\"hljs-literal\">not</span> exist (no environment variable)```\n\nTo solve that issue we can use `lookupEnv` with `fromMaybe`\n\n</code></pre>\n<p><code class=\"haskell\">import System.Environment (lookupEnv)\nimport Data.Maybe (fromMaybe)</p>\n<p>main :: IO ()\nmain = do</p>\n<pre><code>\nwhich will give us a <span class=\"hljs-keyword\">default</span> value <span class=\"hljs-keyword\">when</span> the ENV <span class=\"hljs-keyword\">variable</span> doesn<span class=\"hljs-symbol\">'t</span> exist:\n\n</code></pre>\n<p><code class=\"bash\">λ ./env\n&quot;mydefaultvalue&quot;\nλ myvariable=“what” ./env\n&quot;what&quot;```</p>\n"}}}