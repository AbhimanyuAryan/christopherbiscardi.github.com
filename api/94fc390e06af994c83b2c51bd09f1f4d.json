{"data":{"post":{"body":"<blockquote>\n<p>“Life moves pretty fast. If you don’t stop and look around for a while, you could miss it.” – Ferris Bueller’s Day Off</p>\n</blockquote>\n<h3>The State of Front End Development</h3>\n<p>Front End tools are moving fast these days. Let’s take a minute to (briefly) look at where we’re going.</p>\n<h3>Module Systems</h3>\n<h3>The Old Way</h3>\n<p>From a user-facing view, the old way is to wrap code in closures.</p>\n<pre><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n   <span class=\"hljs-keyword\">this</span>.myGlobal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n}());\n</code></pre>\n<h4>AMD</h4>\n<p><a href=\"http://requirejs.org/docs/whyamd.html\">Why AMD?</a> is covered in other areas but suffice it to say it looks like the below and is being superseded by the ubiquity and conciseness of CommonJS.</p>\n<pre><code>define([<span class=\"hljs-string\">'jquery'</span>] , <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n});\n</code></pre>\n<h4>CommonJS</h4>\n<p>CommonJS is used in node.js which likely contributed to its rise. It is also fairly simple to read and understand. There isn’t as much boilerplate as AMD (where the define/arguments are position-sensitive and can get fairly long).</p>\n<pre><code><span class=\"hljs-comment\">// hello.js</span>\nexports.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello World'</span>\n};\n</code></pre>\n<pre><code><span class=\"hljs-comment\">// main.js</span>\nvar example = require(<span class=\"hljs-string\">'./hello.js'</span>)<span class=\"hljs-comment\">;</span>\nexample.hello()<span class=\"hljs-comment\">;</span>\n</code></pre>\n<h4>ES6</h4>\n<p>ES6 modules are usable via transpilers, in some cases <a href=\"https://www.npmjs.org/package/es6-modules-commonjs\">compiling to CommonJS</a></p>\n<pre><code><span class=\"hljs-built_in\">module</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> {format} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"util\"</span>;\n<span class=\"hljs-keyword\">export</span> {React, format <span class=\"hljs-keyword\">as</span> fmt};\n</code></pre>\n<h4>PureScript</h4>\n<p>PureScript <a href=\"http://docs.purescript.org/en/latest/modules.html\">modules</a> can compile to CommonJS modules.</p>\n<pre><code><span class=\"hljs-keyword\">module</span> A <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">id</span> x = x\n</code></pre>\n<h3>Implementations of Module Systems</h3>\n<h4>RequireJS</h4>\n<p><a href=\"http://requirejs.org/\">RequireJS</a> is an implementation of AMD. It comes with an optimizer (r.js) but many people have since moved on to CommonJS tools such as Browserify.</p>\n<h4>Browserify</h4>\n<p><a href=\"http://browserify.org/\">Browserify</a> is currently the prevailing CommonJS implementation. It is available as a CLI and a scriptable interface (say, inside node.js). This makes it easy to integrate into a build system such as gulp or to use on it’s own.</p>\n<p>Browserify allows you to apply transforms during the build process for things like <a href=\"https://www.npmjs.org/package/reactify\">React</a>, <a href=\"https://github.com/eugeneware/debowerify\">bower</a> and alt-js languages such as <a href=\"https://github.com/jnordberg/coffeeify\">CoffeeScript</a>.</p>\n<h4>Webpack</h4>\n<p><a href=\"http://webpack.github.io/\">Webpack</a> sees heavy usage in the React Community. Possibly due to Pete Hunt’s (and others’) <a href=\"https://github.com/petehunt/webpack-howto\">advocacy</a>. Webpack comes with nice things like Feature Flags and Multiple Entrypoints.</p>\n<p>The most striking difference between Webpack and Browserify is the approach to building Components. Webpack takes a much more CSS-inclusive approach and can do dependency analysis if you’re using Multiple Entrypoints or similar. This approach to Components works very well with React’s concept of Components.</p>\n<h3>Package Managers</h3>\n<h4>NPM</h4>\n<p><a href=\"https://www.npmjs.org/\">NPM</a> is the defacto standard for node.js, but has also declared support for front-end dependency management. It can be hard to determine what packages are meant for the browser, server or both.</p>\n<h4>Bower</h4>\n<p>Bower is a front-end dependency management tool that is backed by Git/GitHub. Bower is also where <a href=\"https://leanpub.com/purescript/read\">PureScript</a>, an alt-js language, and some other tools make their packages available.</p>\n<h4>Other</h4>\n<p>There are also other, competing, managers at various levels such as <a href=\"http://volojs.org/\">Volo</a> and <a href=\"https://github.com/ender-js/Ender\">Ender</a></p>\n<p>…but talking about Volo brings us into scaffolding tools…</p>\n<h3>Scaffolding</h3>\n<h4>Yeoman</h4>\n<p><a href=\"http://yeoman.io/\">Yeoman</a> was originally a “Client Side Stack” but has transitioned to being a quite nice tool for scaffolding new projects. I suggest <a href=\"https://github.com/yeoman/generator-gulp-webapp\">this one</a> if you’re looking to learn more about Yeoman.</p>\n<h4>Brunch</h4>\n<p>I chose to include <a href=\"http://brunch.io/\">Brunch</a> here even though it also competes with Gulp/Grunt in that Brunch does Compilation, Minification, Concatenation and Watching of files. IMO Brunch tries to do too much in the world of JavaScript today. Specialized tools seem to be the current order.</p>\n<h3>Build Systems</h3>\n<h4>Grunt</h4>\n<p><a href=\"http://gruntjs.com/\">Grunt</a> is a Task Runner for JavaScript. It works fairly well and has a plugin for almost anything you’ll need; I’ve also seen some pretty hairy grunt configs.</p>\n<p><a href=\"http://gulpjs.com/\">Gulp</a> is “The New Order” of build systems. It is based on streaming so we can say goodbye to intermediate build files on disk. It also has a fairly expansive ecosystem of plugins that can be used. One interesting note is <a href=\"https://www.npmjs.org/package/vinyl-source-stream\">vinyl-source-streams</a>, which can be used to create streams out of tools like browserify.</p>\n<h3>Utility Belts</h3>\n<h4>Underscore</h4>\n<p><a href=\"http://underscorejs.org/\">Underscore</a> was a default utility belt for awhile. It is a solid library that provides functional programming helpers and is:</p>\n<blockquote>\n<p>The tie to go along with jQuery’s tux and Backbone’s suspenders.</p>\n</blockquote>\n<h4>Lodash</h4>\n<p><a href=\"http://lodash.com/\">Lodash</a> is “optimized underscore”. It is capable of being a drop-in replacement for underscore and provides <a href=\"http://lodash.com/#features\">some features</a> not available in underscore.</p>\n<h4>Lazy.js</h4>\n<p><a href=\"http://danieltao.com/lazy.js/\">Lazy.js</a> can get even better performance than Lodash through Lazy Evaluation. It seems to be a logical step in the progression toward the new state of Front End JavaScript.</p>\n<h3>Data Structures</h3>\n<p>One very interesting trend to pop up is the release of Lazy and Immutable Data Structures for JavaScript. Often the assumption here is that what makes FE development difficult is the tracking of mutation and maintaining of State.</p>\n<h4>Mori</h4>\n<p><a href=\"https://github.com/swannodette/mori\">Mori</a> is Om/ClojureScript’s Lazy/Persistent/Immutable Data Structures intended for use in a JavaScript environment.</p>\n<h4>ImmutableJS</h4>\n<p><a href=\"https://github.com/facebook/immutable-js\">ImmutableJS</a> is Facebook’s implementation of Immutable and Lazy Data Structures. It uses a JavaScript-First API and is designed with the context of React and Flux (being from Facebook).</p>\n<h3>Front End Frameworks</h3>\n<p>Finally, we come to “The Large List of Front End Frameworks”. There are a <em>ton</em> of them out there but I’m only going to cover a few of the most popular in an attempt to categorize different approaches.</p>\n<h4>Angular: The Opinionated Approach</h4>\n<p>Angular creates it’s own language in an effort to do a lot. Directives help developers create components and Services abstract data fetching. If you are a fan of Dependency Injection, Factories and Controllers, then you may do well to look at Angular.</p>\n<h4>Backbone: The Dude Abides</h4>\n<p>Backbone is fairly un-opinionated. <code>Models</code>/<code>Collection</code>, <code>Views</code> and <code>Routers</code> live here, which is fairly close to “MVC”. Backbone also includes an event system for listening to changes on Models/Collections or creating your own events.</p>\n<p>Backbone’s flexibility has allowed (or required depending on your view) <a href=\"http://marionettejs.com/\">Marionette</a> to exist. It also means that you can replace any component as you wish. Want to use Handlebars? Mustache? no problem. Want to replace <code>Views</code> with React? no problem.</p>\n<h4>React</h4>\n<p>React is the new kid on the block and represents a substantial change in the way people think about building applications. With pure React, you would never manually adjust the DOM again. Instead allowing React’s implementation of a Virtual DOM to handle diffing and insertion of changes into the actual DOM.</p>\n<p>React also represents a step toward Functional Programming concepts (<a href=\"http://en.wikipedia.org/wiki/Pure_function\">purity</a>, etc), which make React components easy to test and reason about. It also enables some more advanced concepts such as <a href=\"https://github.com/dustingetz/react-cursor\">Cursors</a> or <a href=\"http://lens.github.io/tutorial.html\">Lenses</a> which themselves enable a separation of data from View/DOM.</p>\n<h4>Om</h4>\n<p><a href=\"https://github.com/swannodette/om\">Om</a> is a special case of React. It is implemented in <a href=\"https://github.com/clojure/clojurescript\">ClojureScript</a>, uses some concepts such as <a href=\"http://www.vpri.org/pdf/tr2011001_final_worlds.pdf\">Worlds</a> and Persistent Data Structures and has a fairly expansive ecosystem at this point.</p>\n<p>There is a <a href=\"https://github.com/swannodette/om#applications-built-with-om\">list</a> of projects built with Om.</p>\n<h3>The Types are Coming</h3>\n<p>So where does this leave us?</p>\n<p>Even if we leave out React/Om we can see a clear preference towards Functions as a first-class tool through libraries such as Underscore and Lodash. <em>With</em> React, we get to see where functional programming gets us, The testability of pure functions and the composition of Components (which are themselves functions). With Om, we see where more advanced Functional Programming techniques gets us: Performance from Persistent Data Structures and clarity through separation of IO with Worlds.</p>\n<p>At this point it is interesting to note is that React was prototyped in SML and <a href=\"https://twitter.com/fbOpenSource/status/511643210482208768\">Flow</a> is implemented in <a href=\"https://ocaml.org/\">OCaml</a>. Flow promises to be “better” (note that not much is known about Flow publicly yet) than Microsoft’s <a href=\"http://www.typescriptlang.org/\">TypeScript</a>. We’ll have to wait to see how it compares to <a href=\"https://leanpub.com/purescript/read\">PureScript’s</a> Type System. (PureScript does have <a href=\"https://github.com/purescript-contrib/purescript-react\">bindings to React</a> as well).</p>\n<h1>Fin</h1>\n<p>If I were a betting person, I would bet on the future being closer to a Purely Functional approach than I would on other approaches. What do you think?</p>\n<p>In any case, The days where one could cobble together some HTML and call themselves a Front End Engineer are long gone and the future is very interesting.</p>\n"}}}