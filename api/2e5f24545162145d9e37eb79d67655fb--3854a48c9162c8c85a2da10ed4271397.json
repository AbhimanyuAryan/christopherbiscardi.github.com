{"data":{"root":{"post":{"body":"<p>It can be hard to figure out how to deal with all of the type\nmachinery in Servant. This post details adding headers to the response\nof a Servant API.</p>\n<p>Given the following API, which returns NoContent for a GET request.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2</span> = \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span></span>\n</code></pre>\n<p>and the following handler, which assumes we’ve set up a custom Monad\nstack called <code>App</code> (note that we’ve skipped the “server” boilerplate\nfor brevity, since it is covered in the Servant docs).</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">v2</span> :: <span class=\"highlight__hljs-type___11WfV\">App</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n<span class=\"highlight__hljs-title___1fl8Q\">v2</span> = return <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<p>We can add a response header using <a href=\"http://hackage.haskell.org/package/servant-0.8/docs/Servant-API-ResponseHeaders.html#v:addHeader\">addHeader</a>, which is\ndetailed in the docs on Hackage. What may be less obvious is that\naddHeader changes the response type of the route. Our simple API\nchanges it’s type to represent the new return value:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2Base</span> = \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[<span class=\"highlight__hljs-type___11WfV\">Header</span> \"<span class=\"highlight__hljs-type___11WfV\">X</span>-<span class=\"highlight__hljs-type___11WfV\">Awesome</span>\" <span class=\"highlight__hljs-type___11WfV\">String</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)</span>\n</code></pre>\n<p>and our handler now can return the appropriate type as well:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-title___1fl8Q\">v2</span> :: <span class=\"highlight__hljs-type___11WfV\">App</span> (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[<span class=\"highlight__hljs-type___11WfV\">Header</span> <span class=\"highlight__hljs-string___1SffY\">\"X-Awesome\"</span> <span class=\"highlight__hljs-type___11WfV\">String</span>] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)\n<span class=\"highlight__hljs-title___1fl8Q\">v2</span> = return $ addHeader <span class=\"highlight__hljs-string___1SffY\">\"very/awesome\"</span> <span class=\"highlight__hljs-type___11WfV\">NoContent</span>\n</code></pre>\n<h2 id=\"multiple-headers\">Multiple Headers</h2>\n<p>If we inspect the type we added to be able to return our first header,\nwe can notice that it is a list of <code>Header</code>s. We can use this to add\nmultiple new headers to our route as follows:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">type</span> <span class=\"highlight__hljs-type___11WfV\">V2Base</span> = \"v2\" :&gt; <span class=\"highlight__hljs-type___11WfV\">Get</span> '[<span class=\"highlight__hljs-type___11WfV\">JSON</span>] (<span class=\"highlight__hljs-type___11WfV\">Headers</span> '[\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> \"<span class=\"highlight__hljs-type___11WfV\">X</span>-<span class=\"highlight__hljs-type___11WfV\">Awesome</span>\" <span class=\"highlight__hljs-type___11WfV\">String</span>,\n  <span class=\"highlight__hljs-type___11WfV\">Header</span> \"<span class=\"highlight__hljs-type___11WfV\">Content</span>-<span class=\"highlight__hljs-type___11WfV\">Type</span>\" <span class=\"highlight__hljs-type___11WfV\">String</span>\n  ] <span class=\"highlight__hljs-type___11WfV\">NoContent</span>)</span>\n</code></pre>\n","attributes":{"title":"Response Headers with Servant","updatedAt":"Aug 8th, 2016","publishedAt":"Aug 8th, 2016","timeToRead":1,"headerImage":"/0e564987f79346b0e81685c304af3912.png","url":"/response-headers-with-servant/","canonicalURL":null,"excerpt":"It can be hard to figure out how to deal with all of the type\nmachinery in Servant. This post details adding headers to the response\nof a…","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}