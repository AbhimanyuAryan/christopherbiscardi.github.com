{"data":{"root":{"post":{"body":"<p>How do custom React Components communicate with their children?</p>\n<h1 id=\"a-simple-case\">A Simple Case</h1>\n<p>Given two components, <code>A</code> and <code>B</code>, where <code>A</code> renders arbitrary\nchildren and <code>B</code> renders a <code>display</code> prop.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-keyword___som98\">import</span> React, { Component } <span class=\"highlight__hljs-keyword___som98\">from</span> <span class=\"highlight__hljs-string___1SffY\">'react'</span>;\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-title___1fl8Q\">A</span> <span class=\"highlight__hljs-keyword___som98\">extends</span> <span class=\"highlight__hljs-title___1fl8Q\">Component</span> </span>{\n  render() {\n    <span class=\"highlight__hljs-keyword___som98\">return</span> <span class=\"xml\"><span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      { this.props.children }\n    <span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  }\n}\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-title___1fl8Q\">B</span> <span class=\"highlight__hljs-keyword___som98\">extends</span> <span class=\"highlight__hljs-title___1fl8Q\">Component</span> </span>{\n  render() {\n    <span class=\"highlight__hljs-keyword___som98\">return</span> <span class=\"xml\"><span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{this.props.display}<span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  }\n}\n</code></pre>\n<p>They can be rendered with React DOM as such:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>ReactDOM.render(&lt;A&gt;\n  &lt;B display='thing-one'/&gt;\n  &lt;B display='thing-two'/&gt;\n  &lt;/A&gt;,\n  document.body)\n</code></pre>\n<p>which yields a simple <code>thing-onething-two</code> result.</p>\n<h1 id=\"controlling-props\">Controlling Props</h1>\n<p>So far, nothing special. Let’s say we want A to control the display\nproperty of all <code>B</code>s or wrap every child in an element with a specific\nCSS class. We can simply alter the <code>A</code> component to map over any\nchildren, replacing the display prop using <code>cloneElement</code>.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-title___1fl8Q\">A</span> <span class=\"highlight__hljs-keyword___som98\">extends</span> <span class=\"highlight__hljs-title___1fl8Q\">Component</span> </span>{\n  render() {\n    <span class=\"highlight__hljs-keyword___som98\">const</span> { children } = <span class=\"highlight__hljs-keyword___som98\">this</span>.props;\n    <span class=\"highlight__hljs-keyword___som98\">return</span> <span class=\"xml\"><span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      {\n        children &amp;&amp; React.Children.map(children, (child, i) =&gt; React.cloneElement(child, {\n          display: `thing-${i}`\n        }))\n      }\n    <span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  }\n}\n</code></pre>\n<p>Note that the same render:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>ReactDOM.render(&lt;A&gt;\n  &lt;B display='thing-one'/&gt;\n  &lt;B display='thing-two'/&gt;\n  &lt;/A&gt;,\n  document.body)\n</code></pre>\n<p>returns a new result <code>thing-0thing-1</code>. This is because we have\nsuccessfully overridden the <code>display</code> prop of all children rendered by\n<code>A</code>.</p>\n<h1 id=\"handlers-and-state\">Handlers and State</h1>\n<p>Let’s say that every time the user clicks on <code>B</code>, we want to update\nthe state of <code>A</code> with a counter. We can simply add some inital state\nto <code>A</code> and pass in an additional handler prop which is defined on\n<code>A</code>. We use fat-arrow autobinding shorthand syntax so that <code>this</code> int\nhe <code>onChildClick</code> handler refers to <code>A</code>'s <code>this</code>. Then we make sure\nthat <code>B</code> can accept an <code>onClick</code> handler.</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code><span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-title___1fl8Q\">A</span> <span class=\"highlight__hljs-keyword___som98\">extends</span> <span class=\"highlight__hljs-title___1fl8Q\">Component</span> </span>{\n  state = {\n    counter: <span class=\"highlight__hljs-number___2gmaH\">0</span>\n  };\n  onChildClick = e =&gt; {\n    <span class=\"highlight__hljs-keyword___som98\">this</span>.setState({\n      counter: <span class=\"highlight__hljs-keyword___som98\">this</span>.state.counter + <span class=\"highlight__hljs-number___2gmaH\">1</span>\n    })\n  };\n  render() {\n    <span class=\"highlight__hljs-keyword___som98\">const</span> { children } = <span class=\"highlight__hljs-keyword___som98\">this</span>.props;\n    <span class=\"highlight__hljs-keyword___som98\">return</span> <span class=\"xml\"><span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{this.state.counter}<span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      {\n        children &amp;&amp; React.Children.map(children, (child, i) =&gt; React.cloneElement(child, {\n          display: `thing-${i}`,\n          onClick: this.onChildClick\n        }))\n      }\n    <span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  }\n}\n\n<span class=\"highlight__hljs-class___mOeOV\"><span class=\"highlight__hljs-keyword___som98\">class</span> <span class=\"highlight__hljs-title___1fl8Q\">B</span> <span class=\"highlight__hljs-keyword___som98\">extends</span> <span class=\"highlight__hljs-title___1fl8Q\">Component</span> </span>{\n  render() {\n    <span class=\"highlight__hljs-keyword___som98\">return</span> <span class=\"xml\"><span class=\"highlight__hljs-tag___2Bb-l\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"highlight__hljs-string___1SffY\">{this.props.onClick}</span>&gt;</span>{this.props.display}<span class=\"highlight__hljs-tag___2Bb-l\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  }\n}\n</code></pre>\n<p>Now, rendering the same way as before, we get a new output:</p>\n<pre class=\"highlight__hljs___FzKxy index__p2___65FBl\"><code>0\n\nthing-0thing-1\n</code></pre>\n<p>and every time <code>thing-0</code> or <code>thing-1</code> is clicked, the counter in <code>A</code>\nis updated.</p>\n","attributes":{"title":"React: Communicating With Children","updatedAt":"Nov 22nd, 2016","publishedAt":"Nov 22nd, 2016","timeToRead":2,"headerImage":null,"url":"/react-communicating-with-children/","canonicalURL":null,"excerpt":"How do custom React Components communicate with their children?","__typename":"BlogPostAttributes"},"__typename":"BlogPost"},"__typename":"Query"}}}